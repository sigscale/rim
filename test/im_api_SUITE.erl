%%% im_api_SUITE.erl
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% @copyright 2018-2019 SigScale Global Inc.
%%% @end
%%% Licensed under the Apache License, Version 2.0 (the "License");
%%% you may not use this file except in compliance with the License.
%%% You may obtain a copy of the License at
%%%
%%%     http://www.apache.org/licenses/LICENSE-2.0
%%%
%%% Unless required by applicable law or agreed to in writing, software
%%% distributed under the License is distributed on an "AS IS" BASIS,
%%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%% See the License for the specific language governing permissions and
%%% limitations under the License.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Test suite for the public API of the
%%% {@link //sigscale_im. sigscale_im} application.
%%%
-module(im_api_SUITE).
-copyright('Copyright (c) 2018-2019 SigScale Global Inc.').

%% common_test required callbacks
-export([suite/0, sequences/0, all/0]).
-export([init_per_suite/1, end_per_suite/1]).
-export([init_per_testcase/2, end_per_testcase/2]).

-compile(export_all).

-include("im.hrl").
-include_lib("xmerl/include/xmerl.hrl").
-include_lib("common_test/include/ct.hrl").
-include_lib("inets/include/mod_auth.hrl").

%%---------------------------------------------------------------------
%%  Test server callback functions
%%---------------------------------------------------------------------

-spec suite() -> DefaultData :: [tuple()].
%% Require variables and set default values for the suite.
%%
suite() ->
	[{timetrap, {minutes, 1}}].

-spec init_per_suite(Config :: [tuple()]) -> Config :: [tuple()].
%% Initiation before the whole suite.
%%
init_per_suite(Config) ->
	PrivDir = ?config(priv_dir, Config),
	ok = application:set_env(mnesia, dir, PrivDir),
	ok = im_test_lib:initialize_db(),
	ok = im_test_lib:start(),
	Config.

-spec end_per_suite(Config :: [tuple()]) -> any().
%% Cleanup after the whole suite.
%%
end_per_suite(_Config) ->
	ok = application:stop(sigscale_im),
	ok = application:stop(mnesia).

-spec init_per_testcase(TestCase :: atom(), Config :: [tuple()]) -> Config :: [tuple()].
%% Initiation before each test case.
%%
init_per_testcase(bulk_cm_geran, Config) ->
	NCC = integer_to_list(rand:uniform(8) - 1),
	BCC = integer_to_list(rand:uniform(8) - 1),
	LAC = integer_to_list(rand:uniform(65533)),
	MCC = integer_to_list(rand:uniform(999)),
	MNC = integer_to_list(rand:uniform(999)),
	RAC = integer_to_list(rand:uniform(256) - 1),
	RACC = integer_to_list(rand:uniform(8) - 1),
	F1 = fun F1(0, Acc) ->
				Acc;
			F1(N, Acc) ->
				GsmCell = {'gn:GsmCell', [{id, integer_to_list(N)}],
						[indent(7), {'gn:attributes', [],
								[indent(8), {'gn:userLabel', ["Cell " ++ generate_identity(5)]},
								indent(8), {'gn:cellIdentity', [integer_to_list(rand:uniform(65535))]},
								indent(8), {'gn:cellAllocation', [cell_allocation()]},
								indent(8), {'gn:ncc', [NCC]},
								indent(8), {'gn:bcc', [BCC]},
								indent(8), {'gn:lac', [LAC]},
								indent(8), {'gn:mcc', [MCC]},
								indent(8), {'gn:mnc', [MNC]},
								indent(8), {'gn:rac', [RAC]},
								indent(8), {'gn:racc', [RACC]},
								indent(8), {'gn:tsc', [BCC]},
								indent(8), {'gn:rxLevAccessMin', [integer_to_list(rand:uniform(64) - 1)]},
								indent(8), {'gn:msTxPwrMaxCCH', [integer_to_list(rand:uniform(32) - 1)]},
								indent(8), {'gn:rfHoppingEnabled', ["false"]},
								indent(8), {'gn:hoppingSequenceList', [],
								[indent(9), {'gn:hoppingSequence', [],
								[indent(10), {'gn:hsn', [], ["0"]}, indent(9)]}, indent(8)]},
								indent(8), {'gn:plmnPermitted', [NCC]}, indent(7)]},
								indent(7), {'gn:GsmRelation', [{id, "1"}],
								[indent(8), {'gn:attributes', [],
								[indent(9), {'gn:adjacentCell', ["SubNetwork="
								++ integer_to_list(rand:uniform(8)) ++ ",BssFunction="
								++ integer_to_list(rand:uniform(8)) ++ ",BtsSiteMgr="
								++ integer_to_list(rand:uniform(32)) ++ ",GsmCell="
								++ integer_to_list(rand:uniform(128))]},
								indent(8)]}, indent(7)]}, indent(6)]},
				F1(N - 1, [indent(6), GsmCell | Acc])
	end,
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				Latitude = "43." ++ integer_to_list(rand:uniform(9999)),
				Longitude = "-79." ++ integer_to_list(rand:uniform(9999)),
				SiteManager = {'gn:BtsSiteMgr', [{id, integer_to_list(N)}],
						[indent(6), {'gn:attributes', [],
						[indent(7), {'gn:userLabel', ["BTS " ++ integer_to_list(N)]},
						indent(7), {'gn:latitude', [Latitude]},
						indent(7), {'gn:longitude', [Longitude]},
						indent(7), {'gn:operationalState', ["enabled"]}, indent(6)]}]
						++ F1(3, []) ++ [indent(6), {'xn:VsDataContainer', [{id, "1"}],
						[indent(7), {'xn:attributes', [],
						[indent(8), {'xn:vsDataType', ["DataType " ++ integer_to_list(N)]},
						indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
						indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F(N - 1, [indent(5), SiteManager | Acc])
	end,
	SiteManager = F(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:gn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.656#geranNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC-sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["GSM"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,BssFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["BSS"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["BSC " ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'gn:BssFunction', [{id, "1"}],
									[indent(5), {'gn:attributes', [],
											[indent(6), {'gn:userLabel', ["BSC " ++ generate_identity(5)]},
													indent(5)]} | SiteManager] ++ [indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=9"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2018-12-26T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	GeranNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "geran.xml",
	file:write_file(XMLPath, GeranNrmXML),
	Config;
init_per_testcase(bulk_cm_utran, Config) ->
	F1 = fun F1(0, Acc) ->
				Acc;
			F1(N, Acc) ->
				Relation = {'un:UtranRelation', [{id, integer_to_list(N)}],
						[indent(7), {'un:attributes', [],
								[indent(8), {'un:adjacentCell', ["SubNetwork=1,UtranCellFDD=1,UtranRelation=2"]},
										indent(7)]},
						indent(7), {'xn:VsDataContainer', [{id, "1"}],
								[indent(8), {'xn:attributes', [],
										[indent(9), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(9), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(9), {'xn:vsData', []}, indent(8)]}, indent(7)]}, indent(6)]},
				F1(N - 1, [indent(6), Relation | Acc])
	end,
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				CellFDD = {'un:UtranCellFDD', [{id, integer_to_list(N)}],
						[indent(6), {'un:attributes', [],
								[indent(7), {'un:userLabel', [generate_identity(7)]},
								indent(7), {'un:localCellId', [integer_to_list(rand:uniform(268435455))]},
								indent(7), {'un:cellMode', ["FDDMode"]},
								indent(7), {'un:fachPower', [integer_to_list(rand:uniform(500) - 350)]},
								indent(7), {'un:relatedAntennaList', [],
										[indent(8), {'xn:dn', ["RncFunction=1,UtranCellFDD=1"]},
										indent(8), {'xn:dn', ["RncFunction=1,UtranCellFDD=2"]}, indent(7)]},
								indent(7), {'un:operationalState', ["enabled"]},
								indent(7), {'un:numOfHspdschs', [integer_to_list(rand:uniform(96) - 1)]}, indent(6)]}] ++ F1(3, []) ++
						[indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F(N - 1, [indent(5), CellFDD | Acc])
	end,
	CellFDD = F(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:un', "http://www.3gpp.org/ftp/specs/archive/28_series/28.653#utranNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["UMTS"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,NodeBFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["RNC"]},
											indent(6), {'xn:managedElementType', ["NodeB"]},
											indent(6), {'xn:managedElementType', ["IubLink"]},
											indent(6), {'xn:managedElementType', ["UtranCellTDDLcr"]},
											indent(6), {'xn:managedElementType', ["UtranCellTDDHcr"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["RNC" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'un:NodeBFunction', [{id, "1"}],
									[indent(5), {'un:attributes', [],
											[indent(6), {'un:userLabel', ["NodeB" ++ generate_identity(5)]},
											indent(6), {'un:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]},
											indent(6), {'un:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', [generate_identity(7)]},
													indent(7), {'xn:siteLatitude', ["23.5429"]},
													indent(7), {'xn:siteLongitude', ["95.6075"]},
													indent(7), {'xn:siteDescription', ["Fullerton Falls"]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["hut"]},
													indent(7), {'xn:powerInterface', ["battery+deisel"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=7"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'un:RncFunction', [{id, "1"}],
									[indent(5), {'un:attributes', [],
											[indent(6), {'un:userLabel', ["RNC " ++ generate_identity(5)]},
											indent(6), {'un:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]},
											indent(6), {'un:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', [generate_identity(7)]},
													indent(7), {'xn:siteLatitude', ["27.5429"]},
													indent(7), {'xn:siteLongitude', ["99.6075"]},
													indent(7), {'xn:siteDescription', ["Fullerton Falls"]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["hut"]},
													indent(7), {'xn:powerInterface', ["petrol"]}, indent(6)]},
											indent(6), {'un:mcc', ["999"]},
											indent(6), {'un:rncId', ["777"]}, indent(5)]},
									indent(5), {'un:EP_IuCS', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:farEndEntity', [generate_identity(5)]},
													indent(7), {'un:userLabel', ["IuCS " ++ generate_identity(5)]},
													indent(7), {'un:connMscNumber', ["3254"]}, indent(6)]}, indent(5)]},
									indent(5), {'un:EP_IuPS', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:farEndEntity', [generate_identity(5)]},
													indent(7), {'un:userLabel', ["IuPS " ++ generate_identity(5)]},
													indent(7), {'un:connSgsnNumber', ["9842"]}, indent(6)]}, indent(5)]},
									indent(5), {'un:EP_Iur', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:farEndEntity', [generate_identity(5)]},
													indent(7), {'un:userLabel', ["Iur " ++ generate_identity(5)]},
													indent(7), {'un:connectedRncId', [generate_identity(7)]},
															indent(6)]}, indent(5)]},
									indent(5), {'un:IubLink', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:userLabel', ["Iub " ++ generate_identity(5)]},
													indent(7), {'un:iubLinkUtranCell', [],
															[indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=1"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=2"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=3"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=4"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=5"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=6"]}, indent(7)]},
													indent(7), {'un:aEnd', [generate_identity(5)]},
													indent(7), {'un:zEnd', [generate_identity(5)]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=8"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'un:IubLink', [{id, "2"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:userLabel', ["Iub " ++ generate_identity(5)]},
													indent(7), {'un:iubLinkUtranCell', [],
															[indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellTDDLcr=1"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellTDDHcr=1"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=7"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=8"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=9"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=10"]}, indent(7)]},
													indent(7), {'un:aEnd', [generate_identity(5)]},
													indent(7), {'un:zEnd', [generate_identity(5)]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=8"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'un:UtranCellTDDLcr', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:userLabel', ["TDDLcr " ++ generate_identity(5)]},
													indent(7), {'un:cId', ["3545"]},
													indent(7), {'un:pichPower', ["2.9"]},
													indent(7), {'un:relatedAntennaList', [],
															[indent(8), {'xn:dn', [generate_identity(7)]}, indent(7)]},
													indent(7), {'un:uarfcn', ["6874"]},
													indent(7), {'un:tstdIndicator', ["inactive"]}, indent(5)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=10"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'un:UtranCellTDDHcr', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:userLabel', ["TDDHcr" ++ generate_identity(5)]},
													indent(7), {'un:cId', ["6871"]},
													indent(7), {'un:pichPower', ["1.5"]},
													indent(7), {'un:relatedAntennaList', [],
															[indent(8), {'xn:dn', [generate_identity(7)]}, indent(7)]},
													indent(7), {'un:uarfcn', ["3451"]},
													indent(7), {'un:tstdIndicator', ["SCH and PCCPCH allocated in a single TS"]},
															indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=11"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]}] ++ CellFDD ++
						[indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["RncHandOver"]},
										indent(8), {'xn:vsDataFormatVersion', ["NNRncHandOver.1.1"]},
										indent(8), {'vsRHO11:vsDataRHO', [],
												[indent(9), {'vsRHO11:abcMin', ["12"]},
												indent(9), {'vsRHO11:abcMax', ["34"]}, indent(8)]}, indent(7)]}, indent(6)]}, indent(5)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2018-12-27T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	UtranNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "utran.xml",
	file:write_file(XMLPath, UtranNrmXML),
	Config;
init_per_testcase(bulk_cm_eutran, Config) ->
	F1 = fun F1(0, Acc) ->
				Acc;
			F1(N, Acc) ->
				Relation = {'en:EUtranRelation', [{id, integer_to_list(N)}],
						[indent(7), {'en:attributes', [],
								[indent(8), {'en:adjacentCell', ["SubNetwork=1,ENBFunction=1,EUtranCellTDD=2"]},
										indent(7)]},
						indent(7), {'xn:VsDataContainer', [{id, "1"}],
								[indent(8), {'xn:attributes', [],
										[indent(9), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(9), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(9), {'xn:vsData', []}, indent(8)]}, indent(7)]}, indent(6)]},
				F1(N - 1, [indent(6), Relation | Acc])
	end,
	F2 = fun F2(0, Acc) ->
				Acc;
			F2(N, Acc) ->
				CellTDD = {'en:EUtranCellFDD', [{id, integer_to_list(N)}],
						[indent(6), {'en:attributes', [],
								[indent(7), {'en:userLabel', [generate_identity(10)]},
								indent(7), {'en:cellLocalId', ["251"]},
								indent(7), {'en:cellSize', ["medium"]},
								indent(7), {'en:pLMNIdList', [],
									[indent(8), {'en:pLMNId', [],
											[indent(9), {'en:mcc', ["959"]},
											indent(9), {'en:mnc', ["356"]}, indent(8)]}, indent(7)]},
								indent(7), {'en:cellAccessInfoList', [],
									[indent(8), {'en:cellAccessInfo', [],
											[indent(9), {'en:plmnId', [],
													[indent(10), {'en:mcc', ["199"]},
													indent(10), {'en:mnc', ["346"]}, indent(9)]},
											indent(9), {'en:tac', ["791642365"]},
											indent(9), {'en:cellId', ["65382131"]}, indent(8)]}, indent(7)]},
								indent(7), {'en:tac', ["964213205"]},
								indent(7), {'en:pci', ["420"]},
								indent(7), {'en:maximumTransmissionPower', ["635"]},
								indent(7), {'en:referenceSignalPower', ["237"]},
								indent(7), {'en:pb', ["196"]},
								indent(7), {'en:allowedAccessClasses', [],
									[indent(8), {'en:allowedAccessClassesElement', ["EmergencyCall"]}, indent(7)]},
								indent(7), {'en:earfcnDl', ["832"]},
								indent(7), {'en:earfcnUl', ["391"]}, indent(6)]}] ++ F1(3, []) ++
						[indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F2(N - 1, [indent(5), CellTDD | Acc])
	end,
	CellFDD = F2(10, []),
	F3 = fun F3(0, Acc) ->
				Acc;
			F3(N, Acc) ->
				CellTDD = {'en:EUtranCellTDD', [{id, integer_to_list(N)}],
						[indent(6), {'en:attributes', [],
								[indent(7), {'en:userLabel', [generate_identity(10)]},
								indent(7), {'en:cellLocalId', ["211"]},
								indent(7), {'en:cellSize', ["verysmall"]},
								indent(7), {'en:pLMNIdList', [],
									[indent(8), {'en:pLMNId', [],
											[indent(9), {'en:mcc', ["999"]},
											indent(9), {'en:mnc', ["456"]}, indent(8)]}, indent(7)]},
								indent(7), {'en:cellAccessInfoList', [],
									[indent(8), {'en:cellAccessInfo', [],
											[indent(9), {'en:plmnId', [],
													[indent(10), {'en:mcc', ["999"]},
													indent(10), {'en:mnc', ["446"]}, indent(9)]},
											indent(9), {'en:tac', ["795645365"]},
											indent(9), {'en:cellId', ["65987134"]}, indent(8)]}, indent(7)]},
								indent(7), {'en:tac', ["965213215"]},
								indent(7), {'en:pci', ["450"]},
								indent(7), {'en:maximumTransmissionPower', ["685"]},
								indent(7), {'en:referenceSignalPower', ["267"]},
								indent(7), {'en:pb', ["198"]},
								indent(7), {'en:allowedAccessClasses', [],
									[indent(8), {'en:allowedAccessClassesElement', ["SecurityServices"]}, indent(7)]},
								indent(7), {'en:earfcn', ["852"]},
								indent(7), {'en:sfAssignment', ["635"]},
								indent(7), {'en:specialSfPatterns', ["753"]}, indent(6)]}] ++ F1(3, []) ++
						[indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F3(N - 1, [indent(5), CellTDD | Acc])
	end,
	CellTDD = F3(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:epc', "http://www.3gpp.org/ftp/specs/archive/28_series/28.709#epcNrm"},
			{'xmlns:nn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.541#nrNrm"},
			{'xmlns:en', "http://www.3gpp.org/ftp/specs/archive/28_series/28.659#eutranNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["GSM"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ENBFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["ENB"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'en:ENBFunction', [{id, "1"}],
									[indent(5), {'en:attributes', [],
											[indent(6), {'en:userLabel', ["France SN1"]},
											indent(6), {'en:iRATANRSwitch', ["true"]},
											indent(6), {'en:x2BlackList', [],
												[indent(7), {'xn:dn', ["ENBFunction=1,x2BlackList"]}, indent(6)]},
											indent(6), {'en:x2HOBlackList', [],
												[indent(7), {'xn:dn', ["ENBFunction=1,x2HOBlackList"]}, indent(6)]},
											indent(6), {'en:tceIDMappingInfoList', [],
												[indent(7), {'en:tceIDMappingInfo', []}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, 1}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity', ["DC=sigscale.net,SubNetwork=4,"
															"ManagedEntity=1,MMEFunction=1,EP_RP_EPS=4"]},
													indent(7), {'epc:userLabel', ["EP-MME-1"]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=2"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_X2C', [{id, 1}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity', ["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=1,EP_X2C=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_X2U', [{id, 1}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity', ["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUUPFunction=1,EP_X2U=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUUP-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_NgC', [{id, 1}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity', ["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=1,EP_NgC=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_NgU', [{id, 1}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity', ["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUUPFunction=1,EP_NgU=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUUP-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_XnC', [{id, 1}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity', ["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=2,EP_XnC=2"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-2"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_XnU', [{id, 1}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity', ["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUUPFunction=2,EP_XnU=2"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUUP-1"]}, indent(6)]}, indent(5)]}] ++ CellFDD ++ CellTDD},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2018-12-27T18:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	EutranNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "eutran.xml",
	file:write_file(XMLPath, EutranNrmXML),
	Config;
init_per_testcase(bulk_cm_epc, Config) ->
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:epc', "http://www.3gpp.org/ftp/specs/archive/28_series/28.709#epcNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["EPC"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,EPDGFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["EPDG"]},
											indent(6), {'xn:managedElementType', ["MME"]},
											indent(6), {'xn:managedElementType', ["PGW"]},
											indent(6), {'xn:managedElementType', ["ServingGW"]},
											indent(6), {'xn:managedElementType', ["PCRF"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME 1" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'epc:EPDGFunction', [{id, "1"}],
									[indent(5), {'epc:attributes', [],
											[indent(6), {'epc:userLabel', ["EPDG 1"]},
											indent(6), {'epc:vnfParametersList', [],
												[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
												indent(7), {'xn:autoScalable', ["false"]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "1"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedElement=1,PGWFunction=1,EP_RP_EPS=1"]},
													indent(7), {'epc:userLabel', ["EP-PGW-1"]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=6"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "2"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedElement=1,PCRFFunction=1,EP_RP_EPS=1"]},
													indent(7), {'epc:userLabel', ["EP-PCRF-2"]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'epc:MMEFunction', [{id, "1"}],
									[indent(5), {'epc:attributes', [],
											[indent(6), {'epc:userLabel', ["MME 1"]},
											indent(6), {'epc:vnfParametersList', [],
												[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
												indent(7), {'xn:autoScalable', ["true"]}, indent(6)]},
											indent(6), {'epc:mMEC', ["89426"]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "1"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ServingGWFunction=1,EP_RP_EPS=1"]},
													indent(7), {'epc:userLabel', ["EP-SGW-1"]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=67"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
															indent(8), {'xn:vsData', []}, indent(7)]},
																	indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'epc:PCRFFunction', [{id, "1"}],
									[indent(5), {'epc:attributes', [],
											[indent(6), {'epc:userLabel', ["PCRF 1"]},
											indent(6), {'epc:linkList', [],
												[indent(7), {'xn:dn', [generate_identity(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "1"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedEntity=1,EPDGFunction=1,EP_RP_EPS=2"]},
													indent(7), {'epc:userLabel', ["EP-EPDG-1"]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=75"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "2"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedEntity=1,PGWFunction=1,EP_RP_EPS=2"]},
													indent(7), {'epc:userLabel', ["EP-PGW-2"]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "3"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedEntity=1,ServingGWFunction=1,EP_RP_EPS=2"]},
													indent(7), {'epc:userLabel', ["EP-ServingGW-2"]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'epc:PGWFunction', [{id, "1"}],
									[indent(5), {'epc:attributes', [],
											[indent(6), {'epc:userLabel', ["PGW 1"]},
											indent(6), {'epc:vnfParametersList', [],
												[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
												indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "1"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedEntity=1,EPDGFunction=1,EP_RP_EPS=1"]},
													indent(7), {'epc:userLabel', ["EP-EPDG-1"]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=375"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "2"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedEntity=1,PCRFFunction=1,EP_RP_EPS=2"]},
													indent(7), {'epc:userLabel', ["EP-PCRF-2"]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "3"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedEntity=1,ServingGWFunction=1,EP_RP_EPS=3"]},
													indent(7), {'epc:userLabel', ["EP-ServingGW-3"]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'epc:ServingGWFunction', [{id, "1"}],
									[indent(5), {'epc:attributes', [],
											[indent(6), {'epc:userLabel', ["ServingGW 1"]},
											indent(6), {'epc:tACList', [],
												[indent(7), {'epc:tAC', ["568912"]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "1"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedElement=1,MMEFunction=1,EP_RP_EPS=1"]},
													indent(7), {'epc:userLabel', ["EP-MME-1"]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=65"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "2"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedElement=1,PCRFFunction=1,EP_RP_EPS=3"]},
													indent(7), {'epc:userLabel', ["EP-PCRF-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'epc:EP_RP_EPS', [{id, "3"}],
											[indent(6), {'epc:attributes', [],
													[indent(7), {'epc:farEndEntity',
															["DC=sigscale.net,SubNetwork=4,ManagedElement=1,PGWFunction=1,EP_RP_EPS=3"]},
													indent(7), {'epc:userLabel', ["EP-PGW-1"]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2018-12-27T23:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	EpcNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "epc.xml",
	file:write_file(XMLPath, EpcNrmXML),
	Config;
init_per_testcase(bulk_cm_core, Config) ->
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				Iucs = {'cn:IucsLink', [{id, integer_to_list(N)}],
						[indent(6), {'cn:attributes', [],
								[indent(7), {'cn:userLabel', [generate_identity(7)]},
								indent(7), {'cn:vnfParametersList', [],
										[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
										indent(8), {'xn:autoScalable', ["true"]}, indent(7)]},
								indent(7), {'cn:connectedRnc', ["SubNetwork=3,ManagedElement=1,RncFunction="
										++ integer_to_list(N)]},
								indent(7), {'cn:connectedBss', ["SubNetwork=1,ManagedElement=1,BssFunction="
										++ integer_to_list(N)]}, indent(6)]},
						indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F(N - 1, [indent(5), Iucs | Acc])
	end,
	IucsLink = F(10, []),
	F1 = fun F1(0, Acc) ->
				Acc;
			F1(N, Acc) ->
				Iups = {'cn:IupsLink', [{id, integer_to_list(N)}],
						[indent(6), {'cn:attributes', [],
								[indent(7), {'cn:userLabel', ["IuPS " ++ integer_to_list(N)]},
								indent(7), {'cn:vnfParametersList', [],
										[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
										indent(8), {'xn:autoScalable', ["true"]}, indent(7)]},
								indent(7), {'cn:connectedRnc', ["SubNetwork=3,ManagedElement=1,RncFunction="
										++ integer_to_list(N)]},
								indent(7), {'cn:connectedBss', ["SubNetwork=1,ManagedElement=1,BssFunction="
										++ integer_to_list(N)]}, indent(6)]},
						indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F1(N - 1, [indent(5), Iups | Acc])
	end,
	IupsLink = F1(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:cn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.703#coreNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=2,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "2"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["Core"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=2,MscFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["MscServer"]},
											indent(6), {'xn:managedElementType', ["CsMgw"]},
											indent(6), {'xn:managedElementType', ["Ggsn"]},
											indent(6), {'xn:managedElementType', ["Sgsn"]},
											indent(6), {'xn:managedElementType', ["Auc"]},
											indent(6), {'xn:managedElementType', ["Hlr"]},
											indent(6), {'xn:managedElementType', ["Eir"]},
											indent(6), {'xn:managedElementType', ["MnpSrf"]},
											indent(6), {'xn:managedElementType', ["Cgf"]},
											indent(6), {'xn:managedElementType', ["Sgw"]},
											indent(6), {'xn:managedElementType', ["Cbc"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME " ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=2,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'cn:MscServerFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["MSC" ++ generate_identity(5)]},
											indent(6), {'cn:mccList', [],
													[indent(7), {'cn:em', ["8564132"]}, indent(6)]},
											indent(6), {'cn:mncList', [],
													[indent(7), {'cn:em', ["9365425"]}, indent(6)]},
											indent(6), {'cn:lacList', [],
													[indent(7), {'cn:em', ["518567"]}, indent(6)]},
											indent(6), {'cn:sacList', [],
													[indent(7), {'cn:em', ["3879476"]}, indent(6)]},
											indent(6), {'cn:mscId', ["9613247"]},
											indent(6), {'cn:mscServerFunctionGsmCell', [],
													[indent(7), {'xn:dn', ["ENBFunction=1,mscServerFunctionGsmCell"]},
															indent(6)]},
											indent(6), {'cn:mscServerFunctionExternalGsmCell', [],
													[indent(7), {'xn:dn', ["ENBFunction=1,mscServerFunctionExternalGsmCell"]},
															indent(6)]},
											indent(6), {'cn:mscServerFunctionCsMgwFunction', [],
													[indent(7), {'xn:dn', ["ENBFunction=1,mscServerFunctionCsMgwFunction"]},
															indent(6)]},
											indent(6), {'cn:nriList', [],
													[indent(7), {'cn:em', ["1565372"]}]}, indent(5)]},
									indent(5), {'cn:ALink', [{id, "1"}],
											[indent(6), {'cn:attributes', [],
													[indent(7), {'cn:userLabel', ["ALink 1"]},
													indent(7), {'cn:vnfParametersList', [],
															[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
															indent(8), {'xn:autoScalable', ["true"]}, indent(7)]},
													indent(7), {'cn:connectedBss', ["SubNetwork=1,ManagedElement=1,BssFunction=1"]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=36"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]},
																	indent(5)]} | IucsLink] ++ [indent(4)]},
							indent(4), {'cn:CsMgwFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["CSMGW" ++ generate_identity(5)]},
											indent(6), {'cn:csMgwFunctionMscServerFunction', [generate_identity(7)]},
											indent(6), {'cn:csMgwFunctionIucsLink', [],
													[indent(7), {'xn:dn', ["CsMgwFunction=1,csMgwFunctionIucsLink"]},
															indent(6)]},
											indent(6), {'cn:csMgwFunctionALink', [],
													[indent(7), {'xn:dn', ["ManagedElement=1,csMgwFunctionALink"]},
															indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=2"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'cn:GgsnFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["GGSN" ++ generate_identity(5)]},
											indent(6), {'cn:proceduralStatus', [],
													[indent(7), {'sm:proceduralStatusElement', ["initializing"]},
															indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=2"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'cn:SgsnFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["SGSN" ++ generate_identity(5)]},
											indent(6), {'cn:mccList', [],
													[indent(7), {'cn:em', ["8725634"]}, indent(6)]},
											indent(6), {'cn:mncList', [],
													[indent(7), {'cn:em', ["365874"]}, indent(6)]},
											indent(6), {'cn:lacList', [],
													[indent(7), {'cn:em', ["879425"]}, indent(6)]},
											indent(6), {'cn:racList', [],
													[indent(7), {'cn:em', ["795346"]}, indent(6)]},
											indent(6), {'cn:sacList', [],
													[indent(7), {'cn:em', ["3859426"]}, indent(6)]},
											indent(6), {'cn:sgsnId', ["9613641"]},
											indent(6), {'cn:sgsnFunctionGsmCell', [],
													[indent(7), {'xn:dn', ["ManagedElement=1,SgsnFunction=1"]},
															indent(6)]},
											indent(6), {'cn:sgsnFunctionExternalGsmCell', [],
													[indent(7), {'xn:dn', ["ManagedElement=1,sgsnFunctionExternalGsmCell"]},
															indent(6)]},
											indent(6), {'cn:sgsnFunctionSgsnPool', ["sgsnfsgnspool"]},
											indent(6), {'cn:nriList', [],
													[indent(7), {'cn:em', ["1585374"]}]},
											indent(6), {'cn:proceduralStatus', [],
													[indent(7), {'sm:proceduralStatusElement', ["reporting"]}, indent(6)]}, indent(5)]},
									indent(5), {'cn:GbLink', [{id, "1"}],
											[indent(6), {'cn:attributes', [],
													[indent(7), {'cn:userLabel', ["GB 1"]},
													indent(7), {'cn:vnfParametersList', [],
															[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
															indent(8), {'xn:autoScalable', ["false"]}, indent(7)]},
													indent(7), {'cn:connectedBss', ["SubNetwork=1,ManagedElement=1,BssFunction=1"]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=284"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]},
																	indent(5)]} | IupsLink] ++ [indent(4)]},
							indent(4), {'cn:AucFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["AUC" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=3"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'cn:HlrFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["HLR" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=4"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'cn:EirFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["EIR" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=5"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'cn:MnpSrfFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["MNP_SRF" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=6"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'cn:CgfFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["CGF" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=7"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'cn:SgwFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["SGW" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=78"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'cn:CbcFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["CBC" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]}, indent(5)]},
									indent(5), {'cn:IubcLink', [{id, "1"}],
											[indent(6), {'cn:attributes', [],
													[indent(7), {'cn:userLabel', ["Iubc 1"]},
													indent(7), {'cn:vnfParametersList', [],
															[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
															indent(8), {'xn:autoScalable', ["true"]}, indent(6)]},
													indent(7), {'cn:connectedRnc', ["SubNetwork=3,ManagedElement=1,RncFunction=1"]},
															indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=64"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2019-01-05T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	CoreNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "core.xml",
	file:write_file(XMLPath, CoreNrmXML),
	Config;
init_per_testcase(bulk_cm_ims, Config) ->
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:im', "http://www.3gpp.org/ftp/specs/archive/28_series/28.706#imsNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["IMS"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,AsFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["AS"]},
											indent(6), {'xn:managedElementType', ["HSS"]},
											indent(6), {'xn:managedElementType', ["ICSCF"]},
											indent(6), {'xn:managedElementType', ["PCSCF"]},
											indent(6), {'xn:managedElementType', ["SCSCF"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME " ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]},
													indent(5)]}, indent(4)]},
							indent(4), {'im:ASFunction', [{id, "1"}],
									[indent(5), {'im:attributes', [],
											[indent(6), {'im:userLabel', ["AS " ++ generate_identity(5)]},
											indent(6), {'im:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=1"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'im:HSSFunction', [{id, "1"}],
									[indent(5), {'im:attributes', [],
											[indent(6), {'im:userLabel', ["HSS " ++ generate_identity(5)]},
											indent(6), {'im:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=2"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'im:ICSCFFunction', [{id, "1"}],
									[indent(5), {'im:attributes', [],
											[indent(6), {'im:userLabel', ["ICSCF " ++ generate_identity(5)]},
											indent(6), {'im:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=3"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'im:PCSCFFunction', [{id, "1"}],
									[indent(5), {'im:attributes', [],
											[indent(6), {'im:userLabel', ["PCSCF " ++ generate_identity(5)]},
											indent(6), {'im:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=4"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'im:SCSCFFunction', [{id, "1"}],
									[indent(5), {'im:attributes', [],
											[indent(6), {'im:userLabel', ["SCSCF " ++ generate_identity(5)]},
											indent(6), {'im:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=5"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]}, indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2019-01-05T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	ImsNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "ims.xml",
	file:write_file(XMLPath, ImsNrmXML),
	Config;
init_per_testcase(bulk_cm_pee, Config) ->
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				MonitoredEntity = {'pee:PEEMonitoredEntity', [{id, integer_to_list(N)}],
						[indent(5), {'pee:attributes', [],
								[indent(6), {'pee:mEId', ["ME" ++ generate_identity(5)]}, indent(5)]},
						indent(5), {'pee:PEEMEDescription', [],
								[indent(6), {'pee:siteIdentification', [generate_identity(7)]},
								indent(6), {'pee:siteLatitude', ["23.54294"]},
								indent(6), {'pee:siteLongitude', ["90.60755"]},
								indent(6), {'pee:siteDescription', ["Fullerton Falls"]},
								indent(6), {'pee:equipmentType', ["5G"]},
								indent(6), {'pee:environmentType', ["hut"]},
								indent(6), {'pee:powerInterface', ["battery+deisel"]},
								indent(6), {'pee:xcuDguDescription', ["DGUv1"]},
								indent(6), {'pee:sensorDescription', ["SensorPack-3"]},
								indent(6), {'pee:vSRmsDescription', ["Acme"]}, indent(5)]},
						indent(5), {'pee:PEEConfigInformation', [],
								[indent(6), {'pee:powerMinThreshold', ["500"]},
								indent(6), {'pee:powerMaxThreshold', ["2500"]},
								indent(6), {'pee:temperatureMinThreshold', [integer_to_list(N)]},
								indent(6), {'pee:temperatureMaxThreshold', ["26"]},
								indent(6), {'pee:voltageMinThreshold', ["202"]},
								indent(6), {'pee:voltageMaxThreshold', ["245"]},
								indent(6), {'pee:currentMinThreshold', ["15"]},
								indent(6), {'pee:currentMaxThreshold', ["35"]},
								indent(6), {'pee:humidityMinThreshold', [integer_to_list(N)]},
								indent(6), {'pee:humidityMaxThreshold', ["79"]}, indent(5)]}, indent(4)]},
				F(N - 1, [indent(4), MonitoredEntity | Acc])
	end,
	PeeME = F(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:im', "http://www.3gpp.org/ftp/specs/archive/28_series/28.706#imsNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["Sites"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,PEEMonitoredEntity=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["PEEMonitoredEntity"]}, indent(5)]},
									indent(5), {'xn:userLabel', [generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]},
													indent(5)]}, indent(4)]}] ++ PeeME ++ [indent(3)]}, indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2019-01-05T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	PeeNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "pee.xml",
	file:write_file(XMLPath, PeeNrmXML),
	Config;
init_per_testcase(bulk_cm_epcn3ai, Config) ->
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:epcn3ai', "http://www.3gpp.org/ftp/specs/archive/28_series/28.616#epcn3aiNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["EPCN3AI"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,3GPPAAAServerFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["3GPPAAAServer"]},
											indent(6), {'xn:managedElementType', ["3GPPAAAProxy"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME 1" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'epcn3ai:3GPPAAAServerFunction', [{id, "1"}],
									[indent(5), {'epcn3ai:attributes', [],
											[indent(6), {'epcn3ai:userLabel', ["3GPPAAAServer 1"]},
											indent(6), {'epcn3ai:vnfParametersList', [],
												[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
												indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=1"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'epcn3ai:3GPPAAAProxyFunction', [{id, "1"}],
									[indent(5), {'epcn3ai:attributes', [],
											[indent(6), {'epcn3ai:userLabel', ["3GPPAAAProxy 1"]},
											indent(6), {'epcn3ai:vnfParametersList', [],
												[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
												indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=2"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=3"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2019-08-19T23:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	EpcNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "epcn3ai.xml",
	file:write_file(XMLPath, EpcNrmXML),
	Config;
init_per_testcase(bulk_cm_inventory1, Config) ->
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				InventoryUnit = {'in:InventoryUnit', [{id, integer_to_list(N)}],
						[indent(5), {'in:attributes', [],
								[indent(6), {'in:inventoryUnitType', ["Shelf"]},
								indent(6), {'in:vendorUnitFamilyType', ["Card"]},
								indent(6), {'in:vendorUnitTypeNumber', [integer_to_list(rand:uniform(500))]},
								indent(6), {'in:versionNumber', [integer_to_list(rand:uniform(500))]},
								indent(6), {'in:vendorName', ["Acme"]},
								indent(6), {'in:serialNumber', [generate_identity(7)]},
								indent(6), {'in:dateOfManufacture', ["2018-10-04"]},
								indent(6), {'in:dateOfLastService', ["2019-08-14"]},
								indent(6), {'in:unitPosition', ["Rack=" ++ integer_to_list(N)]}, indent(6)]},
						indent(5), {'xn:VsDataContainer', [{id, "1"}],
								[indent(6), {'xn:attributes', [],
										[indent(7), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
				F(N - 1, [indent(4), InventoryUnit | Acc])
	end,
	InventoryUnits = F(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:in', "http://www.3gpp.org/ftp/specs/archive/28_series/28.633#inventoryNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["UMTS"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', ["Asquith"]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
											indent(6), {'xn:dn', ["SubNetwork=1,ManagedElement=1,NodeBFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.1"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["NodeB"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["nodeb-bay-bloor"]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', ["Bay and Bloor"]},
									indent(5), {'xn:swVersion', ["13.0.4"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]}]
							++ InventoryUnits ++
							[indent(4), {'in:TmaInventoryUnit', [{id, "1"}],
									[indent(5), {'in:attributes', [],
											[indent(6), {'in:inventoryUnitType', ["Amplifier"]},
											indent(6), {'in:vendorUnitFamilyType', ["TMA"]},
											indent(6), {'in:vendorUnitTypeNumber', ["099"]},
											indent(6), {'in:versionNumber', ["101"]},
											indent(6), {'in:vendorName', ["Acme"]},
											indent(6), {'in:serialNumber', ["1900054793"]},
											indent(6), {'in:dateOfManufacture', ["2017-02-21"]},
											indent(6), {'in:dateOfLastService', ["2019-08-14"]},
											indent(6), {'in:unitPosition', ["Rack=2,Shelf=1"]},
											indent(6), {'in:tmaNumberOfNonLinearGainValues', ["10"]},
											indent(6), {'in:tmaNonLinearGainValue', ["16"]},
											indent(6), {'in:tmaAntennaModelNumber', ["777"]},
											indent(6), {'in:tmaInstallersId', ["00534"]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=7"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'in:AntennaInventoryUnit', [{id, "1"}],
									[indent(5), {'in:attributes', [],
											[indent(6), {'in:inventoryUnitType', ["Sector"]},
											indent(6), {'in:vendorUnitFamilyType', ["Antenna"]},
											indent(6), {'in:versionNumber', ["230"]},
											indent(6), {'in:vendorName', ["Acme"]},
											indent(6), {'in:serialNumber', ["4683660231"]},
											indent(6), {'in:dateOfManufacture', ["2015-01-04"]},
											indent(6), {'in:dateOfLastService', ["2019-02-28"]},
											indent(6), {'in:mechanicalOffset', ["10"]},
											indent(6), {'in:baseElevation', ["126"]},
											indent(6), {'in:minTiltValue', ["0"]},
											indent(6), {'in:maxTiltValue', ["150"]},
											indent(6), {'in:latitude', ["43.6697"]}, indent(5)]}, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]}, indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2019-09-20T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	InventoryNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "inventory1.xml",
	file:write_file(XMLPath, InventoryNrmXML),
	Config;
init_per_testcase(bulk_cm_inventory2, Config) ->
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:in', "http://www.3gpp.org/ftp/specs/archive/28_series/28.633#inventoryNrmAlt2"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["UMTS"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', ["ems-umts-1"]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
											indent(6), {'xn:dn', ["SubNetwork=1,ManagedElement=2,NodeBFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', ["SubNetwork=1,ManagedElement=1"]},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["RNC"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["rnc" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.5.31"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'in:InventoryUnitNE', [{id, "1"}],
									[indent(5), {'in:attributes', [],
											[indent(6), {'in:neId', ["TitanRNC"]},
											indent(6), {'in:productName', ["Titan Radio Network Controller"]},
											indent(6), {'in:customerIdentifier', ["SigScale"]},
											indent(6), {'in:vendorName', ["Acme"]},
											indent(6), {'in:productType', ["VNF"]},
											indent(6), {'in:salesUniqueId', ["TRNC001"]},
											indent(6), {'in:operatorUniqueName', ["rnc-asquith-a"]},
											indent(6), {'in:siteId', ["1"]},
											indent(6), {'in:additionalInformation', ["BA:3,CF:77"]},
											indent(6), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
											indent(6), {'in:hWList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitHw=1"]},
													indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitHw=1,InventoryUnitHw=1"]},
													indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitHw=1,InventoryUnitHw=1,InventoryUnitHw=1"]},
													indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitHw=1,InventoryUnitHw=1,InventoryUnitHw=2"]}, indent(6)]},
											indent(6), {'in:sWList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitSw=1"]}, indent(6)]},
											indent(6), {'in:lICList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitLic=1"]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'in:InventoryUnitHw', [{id, "1"}],
									[indent(5), {'in:attributes', [],
											[indent(6), {'in:hwId', [generate_identity(5)]},
											indent(6), {'in:hwType', ["Chassis"]},
											indent(6), {'in:hwName', ["CAB787"]},
											indent(6), {'in:hwVersion', ["47B.1"]},
											indent(6), {'in:vendorName', ["Acme"]},
											indent(6), {'in:salesUniqueId', ["PN104562"]},
											indent(6), {'in:hwUnitLocation', ["Rack=1"]},
											indent(6), {'in:model', ["NA"]},
											indent(6), {'in:modificationDate', ["2019-02-14"]},
											indent(6), {'in:additionalInformation', ["CD:0,BF:3,EH:16"]},
											indent(6), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
											indent(6), {'in:nEList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitNE=1"]}, indent(6)]},
											indent(6), {'in:sWList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitSw=1"]}, indent(6)]}, indent(5)]},
									indent(5), {'in:InventoryUnitHw', [{id, "1"}],
											[indent(6), {'in:attributes', [],
													[indent(7), {'in:hwId', [generate_identity(5)]},
													indent(7), {'in:hwType', ["ATCA"]},
													indent(7), {'in:hwName', ["CG009"]},
													indent(7), {'in:hwVersion', ["12C"]},
													indent(7), {'in:vendorName', ["Acme"]},
													indent(7), {'in:salesUniqueId', ["PN101132"]},
													indent(7), {'in:hwUnitLocation', ["Rack=1,Shelf=1"]},
													indent(7), {'in:model', ["ATCA10"]},
													indent(7), {'in:modificationDate', ["2019-04-11"]},
													indent(7), {'in:additionalInformation', ["AA:00"]},
													indent(7), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
													indent(7), {'in:nEList', [],
															[indent(8), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitNE=1"]}, indent(7)]},
													indent(7), {'in:sWList', [],
															[indent(8), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitSw=1"]}, indent(7)]}, indent(6)]},
											indent(6), {'in:InventoryUnitHw', [{id, "1"}],
													[indent(7), {'in:attributes', [],
															[indent(8), {'in:hwId', [generate_identity(5)]},
															indent(8), {'in:hwType', ["Processor"]},
															indent(8), {'in:hwName', ["PC234"]},
															indent(8), {'in:hwVersion', ["672.65"]},
															indent(8), {'in:vendorName', ["Acme"]},
															indent(8), {'in:salesUniqueId', ["PN108067"]},
															indent(8), {'in:hwUnitLocation', ["Rack=1,Shelf=1,Slot=1"]},
															indent(8), {'in:model', ["ETH110"]},
															indent(8), {'in:modificationDate', ["2019-03-07"]},
															indent(8), {'in:manualDataEntry', ["active"]},
															indent(8), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
															indent(8), {'in:nEList', [],
																	[indent(9), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitNE=1"]}, indent(8)]},
															indent(8), {'in:sWList', [],
																	[indent(9), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitSw=1"]}, indent(8)]}, indent(7)]}, indent(6)]},
											indent(6), {'in:InventoryUnitHw', [{id, "2"}],
													[indent(7), {'in:attributes', [],
															[indent(8), {'in:hwId', [generate_identity(5)]},
															indent(8), {'in:hwType', ["Ethernet"]},
															indent(8), {'in:hwName', ["NC100"]},
															indent(8), {'in:hwVersion', ["47A.2"]},
															indent(8), {'in:vendorName', ["Acme"]},
															indent(8), {'in:salesUniqueId', ["PN103905"]},
															indent(8), {'in:hwUnitLocation', ["Rack=1,Shelf=1,Slot=5"]},
															indent(8), {'in:model', ["ETH110"]},
															indent(8), {'in:modificationDate', ["2019-04-13"]},
															indent(8), {'in:manualDataEntry', ["active"]},
															indent(8), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
															indent(8), {'in:nEList', [],
																	[indent(9), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitNE=1"]}, indent(8)]},
															indent(8), {'in:sWList', [],
																	[indent(9), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitSw=1"]}, indent(8)]}, indent(7)]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'in:InventoryUnitSw', [{id, "1"}],
									[indent(5), {'in:attributes', [],
											[indent(6), {'in:swId', ["848cd544-8317-4cc2-abed-e4a6b93fa81b"]},
											indent(6), {'in:swName', ["UMTS RNC Base"]},
											indent(6), {'in:swVersion', ["32.2.41"]},
											indent(6), {'in:vendorName', ["Acme"]},
											indent(6), {'in:salesUniqueId', ["SW009215"]},
											indent(6), {'in:classification', ["R45p1"]},
											indent(6), {'in:swStatus', ["primary"]},
											indent(6), {'in:swInstallationTime', ["2019-04-13T02:13:45.345Z"]},
											indent(6), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
											indent(6), {'in:nEList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitNE=1"]},
															indent(6)]},
											indent(6), {'in:hWList', [],
													[indent(7), {'xn:dn',["SubNetwork=1,ManagedElement=1,InventoryUnitHw=1,InventoryUnitHw=1,InventoryUnitHw=1"]}, indent(6)]},
											indent(6), {'in:lICList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitLic=1"]},
															indent(6)]}, indent(5)]}, indent(4)]}, indent(3)]}, indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2018-12-27T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	InventoryNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "inventory2.xml",
	file:write_file(XMLPath, InventoryNrmXML),
	Config;
init_per_testcase(bulk_cm_nr, Config) ->
	F1 = fun F1(0, Acc) ->
				Acc;
			F1(N, Acc) ->
				NRCellDU = {'nn:NRCellDU', [{id, integer_to_list(N)}],
						[indent(6), {'nn:attributes', [],
								[indent(7), {'nn:userLabel', ["nr-cell-du-" ++ integer_to_list(N)]},
								indent(7), {'nn:vnfParametersList', [],
										[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
										indent(8), {'xn:autoScalable', ["false"]}, indent(7)]},
								indent(7), {'nn:operationalState', ["enabled"]},
								indent(7), {'nn:cellState', ["IDLE"]},
								indent(7), {'nn:pLMNIdList', [],
										[indent(8), {'en:pLMNId', [],
												[indent(9), {'en:mcc', [integer_to_list(167 + N)]},
												indent(9), {'en:mnc', [integer_to_list(772 + N)]},
														indent(8)]}, indent(7)]},
								indent(7), {'nn:nRpci', [integer_to_list(500 + N)]},
								indent(7), {'nn:nRTac', [integer_to_list(167772 + N)]},
								indent(7), {'nn:arfcnDL', [integer_to_list(5 + N)]},
								indent(7), {'nn:bSChannelBwDL', [integer_to_list(-15 + N)]},
								indent(7), {'nn:bSChannelBwSUL', [integer_to_list(2 + N)]}, indent(6)]},
						indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["NRCDUHandOver=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F1(N - 1, [indent(5), NRCellDU | Acc])
	end,
	NRCellDUs = F1(5, []),
	F2 = fun F2(0, Acc) ->
				Acc;
			F2(N, Acc) ->
				NRSectorCarrier = {'nn:NRSectorCarrier', [{id, integer_to_list(N)}],
						[indent(6), {'nn:attributes', [],
								[indent(7), {'nn:userLabel', ["nr-sector-carrier-" ++ integer_to_list(N)]},
								indent(7), {'nn:vnfParametersList', [],
										[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
										indent(8), {'xn:autoScalable', ["true"]}, indent(7)]},
								indent(7), {'nn:txDirection', ["DL and UL"]},
								indent(7), {'nn:configuredMaxTxPower', [integer_to_list(95 + N)]},
								indent(7), {'nn:arfcnUL', [integer_to_list(5 + N)]},
								indent(7), {'nn:bSChannelBwDL', [integer_to_list(-135 + N)]},
								indent(7), {'nn:bSChannelBwUL', [integer_to_list(693 + N)]}, indent(6)]},
						indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["NRSCHandOver=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F2(N - 1, [indent(5), NRSectorCarrier | Acc])
	end,
	NRSectorCarriers = F2(5, []),
	F3 = fun F3(0, Acc) ->
				Acc;
			F3(N, Acc) ->
				NRCellCU = {'nn:NRCellCU', [{id, integer_to_list(N)}],
						[indent(6), {'nn:attributes', [],
								[indent(7), {'nn:userLabel', ["nr-cell-cu-" ++ integer_to_list(N)]},
								indent(7), {'nn:vnfParametersList', [],
										[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
										indent(8), {'xn:autoScalable', ["true"]}, indent(7)]},
								indent(7), {'nn:nCGI', [integer_to_list(687194767 - N)]},
								indent(7), {'nn:pLMNIdList', [],
										[indent(8), {'en:pLMNId', [],
												[indent(9), {'en:mcc', [integer_to_list(137 + N)]},
												indent(9), {'en:mnc', [integer_to_list(752 + N)]}, indent(8)]}, indent(7)]},
								indent(7), {'nn:rRMPolicyNSSIId',
										["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=1,NRCellCU=1"]},
								indent(7), {'nn:rRMPolicyRatio', [integer_to_list(1672 + N)]},
								indent(7), {'nn:rRMPolicy', [generate_identity(5)]}, indent(6)]},
						indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["NRCellCUHandOver=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F3(N - 1, [indent(5), NRCellCU | Acc])
	end,
	NRCellCUs = F3(7, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:en', "http://www.3gpp.org/ftp/specs/archive/28_series/28.659#eutranNrm"},
			{'xmlns:nn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.541#nrNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=8,ManagementNode=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "8"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', ["sn-8"]},
							indent(4), {'xn:userDefinedNetworkType', ["NR"]},
							indent(4), {'xn:setOfMcc', ["582"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', ["ems-nr-1"]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["DC=sigscale.net,SubNetwork=8,ManagedElement=1"]},
													indent(5)]},
									indent(5), {'xn:swVersion', ["1.1"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["GNBDU"]},
											indent(6), {'xn:managedElementType', ["GNBCUCP"]},
											indent(6), {'xn:managedElementType', ["GNBCUUP"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME 1" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.5.31"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["DC=sigscale.net,SubNetwork=8,ManagementNode=1"]},
													indent(5)]}, indent(4)]},
							indent(4), {'nn:GNBDUFunction', [{id, "1"}],
									[indent(5), {'nn:attributes', [],
											[indent(6), {'nn:userLabel', ["gnbdu-asquith"]},
											indent(6), {'nn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]},
											indent(6), {'nn:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', ["ABC-3768"]},
													indent(7), {'xn:siteLatitude', ["59.6714"]},
													indent(7), {'xn:siteLongitude', ["-62.3862"]},
													indent(7), {'xn:siteDescription', [generate_identity(7)]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["Indoor"]},
													indent(7), {'xn:powerInterface', ["A3"]}, indent(6)]},
											indent(6), {'nn:gnbId', ["4294967"]},
											indent(6), {'nn:gnbIdLength', ["25"]},
											indent(6), {'nn:gnbDuId', ["68719476"]}, indent(5)]},
									indent(5), {'nn:EP_F1C', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=1,EP_F1C=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_F1U', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUUPFunction=1,EP_F1U=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUUP-1"]}, indent(6)]},
															indent(5)]}] ++ NRCellDUs ++ NRSectorCarriers ++ [indent(4)]},
							indent(4), {'nn:GNBCUCPFunction', [{id, "1"}],
									[indent(5), {'nn:attributes', [],
											[indent(6), {'nn:userLabel', ["gnbcucp-asquith"]},
											indent(6), {'nn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]},
											indent(6), {'nn:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', ["KRC-3768"]},
													indent(7), {'xn:siteLatitude', ["65.3754"]},
													indent(7), {'xn:siteLongitude', ["-22.3862"]},
													indent(7), {'xn:siteDescription', [generate_identity(7)]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["Indoor"]},
													indent(7), {'xn:powerInterface', ["A3"]}, indent(6)]},
											indent(6), {'nn:gnbId', ["429496"]},
											indent(6), {'nn:gnbIdLength', ["28"]},
											indent(6), {'nn:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["129"]},
															indent(8), {'en:mnc', ["631"]}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_F1C', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBDUFunction=1,EP_F1C=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBDU-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_E1', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUUPFunction=1,EP_E1=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUUP-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_XnC', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=2,EP_XnC=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-2"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_X2C', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_X2C=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_NgC', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_NgC=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]},
															indent(5)]}] ++ NRCellCUs ++ [indent(4)]},
							indent(4), {'nn:GNBCUCPFunction', [{id, "2"}],
									[indent(5), {'nn:attributes', [],
											[indent(6), {'nn:userLabel', ["gnbcucp-2"]},
											indent(6), {'nn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]},
											indent(6), {'nn:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', ["KDH-3768"]},
													indent(7), {'xn:siteLatitude', ["55.2714"]},
													indent(7), {'xn:siteLongitude', ["-32.6852"]},
													indent(7), {'xn:siteDescription', [generate_identity(7)]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["Indoor"]},
													indent(7), {'xn:powerInterface', ["A3"]}, indent(6)]},
											indent(6), {'nn:gnbId', ["328496"]},
											indent(6), {'nn:gnbIdLength', ["26"]},
											indent(6), {'nn:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["367"]},
															indent(8), {'en:mnc', ["723"]}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_XnC', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=1,EP_XnC=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-1"]}, indent(6)]},
															indent(5)]},
									indent(5), {'nn:EP_XnC', [{id, "2"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_XnC=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]},
															indent(5)]}, indent(4)]},
							indent(4), {'nn:GNBCUUPFunction', [{id, "1"}],
									[indent(5), {'nn:attributes', [],
											[indent(6), {'nn:userLabel', ["gnbcuup-asquith"]},
											indent(6), {'nn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]},
											indent(6), {'nn:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', ["NAH-6318"]},
													indent(7), {'xn:siteLatitude', ["75.3784"]},
													indent(7), {'xn:siteLongitude', ["-42.3882"]},
													indent(7), {'xn:siteDescription', [generate_identity(7)]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["Indoor"]},
													indent(7), {'xn:powerInterface', ["A3"]}, indent(6)]},
											indent(6), {'nn:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["527"]},
															indent(8), {'en:mnc', ["8623"]}, indent(7)]}, indent(6)]},
											indent(6), {'nn:gnbId', ["429496729"]},
											indent(6), {'nn:gnbIdLength', ["30"]}, indent(5)]},
									indent(5), {'nn:EP_E1', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=1,EP_E1=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_F1U', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBDUFunction=1,EP_F1U=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBDU-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_XnU', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_XnU=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_NgU', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_NgU=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_X2U', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_X2U=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_S1U', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity', [generate_identity(7)]},
													indent(7), {'nn:userLabel', ["EP-S1U-1"]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=26"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2020-05-12T23:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	NrNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "nr.xml",
	file:write_file(XMLPath, NrNrmXML),
	Config;
init_per_testcase(bulk_cm_5gc, Config) ->
	Endpoint = fun (Name, Id, UserLabel, FarEndEntity) ->
			{Name, [{id, Id}],
					[indent(6), {'ngc:attributes', [],
							[indent(7), {'ngc:farEndEntity', [indent(8), FarEndEntity,
									indent(7)]},
							indent(7), {'ngc:userLabel', [UserLabel]},
									indent(6)]}, indent(5)]}
	end,
	AmfEpN2 = Endpoint('ngc:EP_N2', "1", "EP-N3IWF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,N3IWFFunction=1,EP_N2=1"),
	AmfEpN8 = Endpoint('ngc:EP_N8', "1", "EP-UDM-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UDMFunction=1,EP_N8=1"),
	AmfEpN11 = Endpoint('ngc:EP_N11', "1", "EP-SMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,SMFFunction=1,EP_N11=1"),
	AmfEpN12 = Endpoint('ngc:EP_N12', "1", "EP-AUSF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AUSFFunction=1,EP_N12=1"),
	AmfEpN14 = Endpoint('ngc:EP_N14', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=2,EP_N14=1"),
	AmfEpN15 = Endpoint('ngc:EP_N15', "1", "EP-PCF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,PCFFunction=1,EP_N15=1"),
	AmfEpN17 = Endpoint('ngc:EP_N17', "1", "EP-NGEIR-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,NGEIRFunction=1,EP_N17=1"),
	AmfEpN20 = Endpoint('ngc:EP_N20', "1", "EP-SMSF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,SMSFFunction=1,EP_N20=1"),
	AmfEpN22 = Endpoint('ngc:EP_N22', "1", "EP-NSSF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,NSSFFunction=1,EP_N22=1"),
	AmfEpN26 = Endpoint('ngc:EP_N26', "1", "EP-MME-1", "DC=sigscale.net,"
			"SubNetwork=4,ManagedElement=1,MMEFunction=1,EP_N26=1"),
	AmfEpNls = Endpoint('ngc:EP_NLS', "1", "EP-LMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,LMFFunction=1,EP_NLS=1"),
	AmfEpNlg = Endpoint('ngc:EP_NLG', "1", "EP-Gmlc-1", "DC=sigscale.net,"
			"SubNetwork=2,ManagedElement=1,GmlcFunction=1"),
	AmfEpSbiX = Endpoint('ngc:EP_SBI_X', "1", "EP-NRF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,NRFFunction=1,EP_SBI_X=1"),
	SmfEpN4 = Endpoint('ngc:EP_N4', "1", "EP-UPF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UPFFunction=1,EP_N4=1"),
	SmfEpN7 = Endpoint('ngc:EP_N7', "1", "EP-PCF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,PCFFunction=1,EP_N7=1"),
	SmfEpN10 = Endpoint('ngc:EP_N10', "1", "EP-UDM-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UDMFunction=1,EP_N10=1"),
	SmfEpN11 = Endpoint('ngc:EP_N11', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=1,EP_N11=1"),
	SmfEpN16 = Endpoint('ngc:EP_N16', "1", "EP-SMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,SMFFunction=2,EP_N16=1"),
	SmfEpS5c = Endpoint('ngc:EP_S5C', "1", "EP-ServingGW-1", "DC=sigscale.net,"
			"SubNetwork=4,ManagedElement=1,ServingGWFunction=1,EP_S5C=1"),
	SmfEpSbiX = Endpoint('ngc:EP_SBI_X', "1", "EP-UDR-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UDRFunction=1,EP_SBI_X=1"),
	UpfEpN3 = Endpoint('ngc:EP_N3', "1", "EP-ENB-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,N3IWFFunction=1,EP_N3=1"),
	UpfEpN4 = Endpoint('ngc:EP_N4', "1", "EP-SMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,SMFFunction=1,EP_N4=1"),
	UpfEpN6 = Endpoint('ngc:EP_N6', "1", "EP-DN-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,DNFunction=1,EP_N6=1"),
	UpfEpN9 = Endpoint('ngc:EP_N9', "1", "EP-UPF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UPFFunction=2,EP_N9=1"),
	UpfEpS5u = Endpoint('ngc:EP_S5U', "1", "EP-ServingGW-1", "DC=sigscale.net,"
			"SubNetwork=4,ManagedElement=1,ServingGWFunction=1,EP_S5U=1"),
	UpfEpSbiX = Endpoint('ngc:EP_SBI_X', "1", "EP-UDSF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UDSFFunction=1,EP_SBI_X=1"),
	N3iwfEpN2 = Endpoint('ngc:EP_N2', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=1,EP_N2=1"),
	N3iwfEpN3 = Endpoint('ngc:EP_N3', "1", "EP-ENB-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UPFFunction=1,EP_N3=1"),
	PcfEpN5 = Endpoint('ngc:EP_N5', "1", "EP-AF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AFFunction=1,EP_N5=1"),
	PcfEpN7 = Endpoint('ngc:EP_N7', "1", "EP-SMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,SMFFunction=1,EP_N7=1"),
	PcfEpN15 = Endpoint('ngc:EP_N15', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=1,EP_N15=1"),
	PcfEpN16 = Endpoint('ngc:EP_N16', "1", "EP-PCF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,PCFFunction=2,EP_N16=1"),
	PcfEpRx = Endpoint('ngc:EP_Rx', "1", "EP-AF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AFFunction=1,EP_Rx=1"),
	PcfEpSbiX = Endpoint('ngc:EP_SBI_X', "1", "EP-NWDAF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,NWDAFFunction=1,EP_SBI_X=1"),
	AusfEpN12 = Endpoint('ngc:EP_N12', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=1,EP_N12=1"),
	AusfEpN13 = Endpoint('ngc:EP_N13', "1", "EP-UDM-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UDMFunction=1,EP_N13=1"),
	AusfEpSbiX = Endpoint('ngc:EP_SBI_X', "1", "EP-UDSF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UDSFFunction=1,EP_SBI_X=1"),
	UdmEpN8 = Endpoint('ngc:EP_N8', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=1,EP_N8=1"),
	UdmEpN10 = Endpoint('ngc:EP_N10', "1", "EP-SMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,SMFFunction=1,EP_N10=1"),
	UdmEpN13 = Endpoint('ngc:EP_N13', "1", "EP-AUSF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AUSFFunction=1,EP_N13=1"),
	UdmEpSbiX = Endpoint('ngc:EP_SBI_X', "1", "EP-NWDAF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,NWDAFFunction=1,EP_SBI_X=1"),
	UdrEpSbiX1 = Endpoint('ngc:EP_SBI_X', "1", "EP-SMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,SMFFunction=1,EP_SBI_X=1"),
	UdrEpSbiX2 = Endpoint('ngc:EP_SBI_X', "2", "EP-NSSF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,NSSFFunction=1,EP_SBI_X=1"),
	UdsfEpSbiX = Endpoint('ngc:EP_SBI_X', "1", "EP-UPF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UPFFunction=1,EP_SBI_X=1"),
	NrfEpN27 = Endpoint('ngc:EP_N27', "1", "EP-NSSF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,NSSFFunction=1,EP_N27=1"),
	NrfEpSbiX = Endpoint('ngc:EP_SBI_X', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=1,EP_SBI_X=1"),
	NssfEpN22 = Endpoint('ngc:EP_N22', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=1,EP_N22=1"),
	NssfEpN27 = Endpoint('ngc:EP_N27', "1", "EP-NRF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,NRFFunction=1,EP_N27=1"),
	NssfEpN31 = Endpoint('ngc:EP_N31', "1", "EP-N31", "EP-N31-DN"),
	NssfEpSbiX = Endpoint('ngc:EP_SBI_X', "1", "EP-UDR-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UDRFunction=1,EP_SBI_X=2"),
	SmsEpN20 = Endpoint('ngc:EP_N20', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=1,EP_N20=1"),
	SmsEpN21 = Endpoint('ngc:EP_N21', "1", "EP-UDM-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UDMFunction=1,EP_N21=1"),
	SmsEpMapSmsc = Endpoint('ngc:EP_MAP_SMSC', "1", "EP-MAP-SMSC-1", "EP-MAP-SMSC-DN"),
	LmfEpNls = Endpoint('ngc:EP_NLS', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=1,EP_NLS=1"),
	NgeirEpN17 = Endpoint('ngc:EP_N17', "1", "EP-AMF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,AMFFunction=1,EP_N17=1"),
	SeppEpN32 = Endpoint('ngc:EP_N32', "1", "EP-SEPP-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,SEPPFunction=2,EP_N32=1"),
	SeppEpSbiIpx = Endpoint('ngc:EP_SBI_IPX', "1", "EP-SBI-IPX-1", "EP-SBI-IPX-DN"),
	NwdafEpSbiX1 = Endpoint('ngc:EP_SBI_X', "1", "EP-PCF-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,PCFFunction=1,EP_SBI_X=1"),
	NwdafEpSbiX2 = Endpoint('ngc:EP_SBI_X', "2", "EP-UDM-1", "DC=sigscale.net,"
			"SubNetwork=12,ManagedElement=1,UDMFunction=1,EP_SBI_X=1"),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:en', "http://www.3gpp.org/ftp/specs/archive/28_series/28.659#eutranNrm"},
			{'xmlns:nn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.541#nrNrm"},
			{'xmlns:ngc', "http://www.3gpp.org/ftp/specs/archive/28_series/28.541#ngcNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=12,ManagementNode=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "12"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', ["sn-12"]},
							indent(4), {'xn:userDefinedNetworkType', ["5GC"]},
							indent(4), {'xn:setOfMcc', ["852"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', ["ems-5gc-1"]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["DC=sigscale.net,SubNetwork=12,ManagedElement=1"]},
													indent(5)]},
									indent(5), {'xn:swVersion', ["1.1"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["AMF"]},
											indent(6), {'xn:managedElementType', ["SMF"]},
											indent(6), {'xn:managedElementType', ["UPF"]},
											indent(6), {'xn:managedElementType', ["N3IWF"]},
											indent(6), {'xn:managedElementType', ["PCF"]},
											indent(6), {'xn:managedElementType', ["AUSF"]},
											indent(6), {'xn:managedElementType', ["UDM"]},
											indent(6), {'xn:managedElementType', ["UDR"]},
											indent(6), {'xn:managedElementType', ["UDSF"]},
											indent(6), {'xn:managedElementType', ["NRF"]},
											indent(6), {'xn:managedElementType', ["NSSF"]},
											indent(6), {'xn:managedElementType', ["SMSF"]},
											indent(6), {'xn:managedElementType', ["LMF"]},
											indent(6), {'xn:managedElementType', ["NGEIR"]},
											indent(6), {'xn:managedElementType', ["SEPP"]},
											indent(6), {'xn:managedElementType', ["NWDAF"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME 1" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.5.31"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["DC=sigscale.net,SubNetwork=12,ManagementNode=1"]},
													indent(5)]}, indent(4)]},
							indent(4), {'ngc:AMFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["amf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["291"]},
															indent(8), {'en:mnc', ["782"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:aMFIdentifier', [],
													[indent(7), {'ngc:amfRegionId', ["255"]},
													indent(7), {'ngc:amfSetId', ["1023"]},
													indent(7), {'ngc:amfPointer', ["63"]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:sBISerivceList', [],
													[indent(7), {'ngc:nfServices', [],
															[indent(8), {'ngc:serviceInstanceId', ["478514"]},
															indent(8), {'ngc:serviceName', ["service-15"]},
															indent(8), {'ngc:version', ["1.0.1"]},
															indent(8), {'ngc:schema', ["ngcNrm"]},
															indent(8), {'ngc:fqdn', [generate_identity(5)]},
															indent(8), {'ngc:interPlmnFqdn', [generate_identity(7)]},
															indent(8), {'ngc:ipEndPoints', [],
																	[indent(9), {'ngc:ipEndPoint', [],
																			[indent(10), {'nn:ipv4Address', ["69.89.31.226"]},
																			indent(10), {'nn:ipv6Address',
																					["2002:4559:1FE2:0:0:0:4559:1FE2"]},
																			indent(10), {'nn:ipv6Prefix', ["2002:4559:1FE2:0000::"]},
																			indent(10), {'nn:vlanId', ["3126"]}, indent(9)]},
																					indent(8)]},
															indent(8), {'ngc:apiPrefix', ["IM"]},
															indent(8), {'ngc:defaultNotificationSubscriptions', ["im-001"]},
															indent(8), {'ngc:allowedPlmns', [],
																	[indent(9), {'en:pLMNId', [],
																			[indent(10), {'en:mcc', ["292"]},
																			indent(10), {'en:mnc', ["783"]}, indent(9)]}, indent(8)]},
															indent(8), {'ngc:allowedNfTypes', [],
																	[indent(9), {'ngc:NFType', ["AMF"]}, indent(8)]},
															indent(8), {'ngc:allowedNssais', [],
																	[indent(9), {'ngc:sst', ["245"]},
																	indent(9), {'ngc:sd', ["65535"]}, indent(8)]},
															indent(8), {'ngc:capacity', ["high"]},
															indent(8), {'ngc:supportedFeatures', ["sf-1"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:weightFactor', ["85"]},
											indent(6), {'ngc:snssaiList', [],
													[indent(7), {'ngc:sNssai', [],
															[indent(8), {'ngc:sst', ["235"]},
															indent(8), {'ngc:sd', ["65432"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:aMFSet', ["85"]}, indent(5)]},
									indent(5), AmfEpN2, indent(5), AmfEpN8, indent(5), AmfEpN11, indent(5), AmfEpN12,
									indent(5), AmfEpN14, indent(5), AmfEpN15, indent(5), AmfEpN17, indent(5), AmfEpN20,
									indent(5), AmfEpN22, indent(5), AmfEpN26, indent(5), AmfEpNls, indent(5), AmfEpNlg,
									indent(5), AmfEpSbiX, indent(4)]},
							indent(4), {'ngc:SMFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["smf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["293"]},
															indent(8), {'en:mnc', ["784"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:nRTACList', [],
													[indent(7), {'ngc:tac', ["167"]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:sBISerivceList', [],
													[indent(7), {'ngc:nfServices', [],
															[indent(8), {'ngc:serviceInstanceId', ["478515"]},
															indent(8), {'ngc:serviceName', ["service-16"]},
															indent(8), {'ngc:version', ["1.0.2"]},
															indent(8), {'ngc:schema', ["ngcNrm"]},
															indent(8), {'ngc:fqdn', [generate_identity(5)]},
															indent(8), {'ngc:interPlmnFqdn', [generate_identity(7)]},
															indent(8), {'ngc:ipEndPoints', [],
																	[indent(9), {'ngc:ipEndPoint', [],
																			[indent(10), {'nn:ipv4Address', ["69.90.31.225"]},
																			indent(10), {'nn:ipv6Address',
																					["2012:4559:1FE2:0:0:0:4559:1FE2"]},
																			indent(10), {'nn:ipv6Prefix', ["2012:4559:1FE2:0000::"]},
																			indent(10), {'nn:vlanId', ["3125"]}, indent(9)]},
																					indent(8)]},
															indent(8), {'ngc:apiPrefix', ["IM"]},
															indent(8), {'ngc:defaultNotificationSubscriptions', ["im-002"]},
															indent(8), {'ngc:allowedPlmns', [],
																	[indent(9), {'en:pLMNId', [],
																			[indent(10), {'en:mcc', ["291"]},
																			indent(10), {'en:mnc', ["782"]}, indent(9)]}, indent(8)]},
															indent(8), {'ngc:allowedNfTypes', [],
																	[indent(9), {'ngc:NFType', ["SMF"]}, indent(8)]},
															indent(8), {'ngc:allowedNssais', [],
																	[indent(9), {'ngc:sst', ["244"]},
																	indent(9), {'ngc:sd', ["65534"]}, indent(8)]},
															indent(8), {'ngc:capacity', ["low"]},
															indent(8), {'ngc:supportedFeatures', [generate_identity(7)]},
																	indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), SmfEpN4, indent(5), SmfEpN7, indent(5), SmfEpN10, indent(5), SmfEpN11,
									indent(5), SmfEpN16, indent(5), SmfEpS5c, indent(5), SmfEpSbiX, indent(4)]},
							indent(4), {'ngc:UPFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["upf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["295"]},
															indent(8), {'en:mnc', ["786"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:nRTACList', [],
													[indent(7), {'ngc:tac', ["168"]}, indent(6)]}, indent(5)]},
									indent(5), UpfEpN3, indent(5), UpfEpN4, indent(5), UpfEpN6, indent(5), UpfEpN9,
									indent(5), UpfEpS5u, indent(5), UpfEpSbiX, indent(4)]},
							indent(4), {'ngc:N3IWFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["n3iwf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["296"]},
															indent(8), {'en:mnc', ["787"]}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), N3iwfEpN2, indent(5), N3iwfEpN3, indent(4)]},
							indent(4), {'ngc:PCFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["pcf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["291"]},
															indent(8), {'en:mnc', ["782"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:sBISerivceList', [],
													[indent(7), {'ngc:nfServices', [],
															[indent(8), {'ngc:serviceInstanceId', ["478516"]},
															indent(8), {'ngc:serviceName', ["service-17"]},
															indent(8), {'ngc:version', ["1.0.3"]},
															indent(8), {'ngc:schema', ["ngcNrm"]},
															indent(8), {'ngc:fqdn', [generate_identity(5)]},
															indent(8), {'ngc:interPlmnFqdn', [generate_identity(7)]},
															indent(8), {'ngc:ipEndPoints', [],
																	[indent(9), {'ngc:ipEndPoint', [],
																			[indent(10), {'nn:ipv4Address', ["70.91.31.225"]},
																			indent(10), {'nn:ipv6Address',
																					["2112:4569:1FE2:0:0:0:4559:1FE2"]},
																			indent(10), {'nn:ipv6Prefix', ["2112:4569:1FE2:0000::"]},
																			indent(10), {'nn:vlanId', ["3126"]}, indent(9)]},
																					indent(8)]},
															indent(8), {'ngc:apiPrefix', ["IM"]},
															indent(8), {'ngc:defaultNotificationSubscriptions', ["im-003"]},
															indent(8), {'ngc:allowedPlmns', [],
																	[indent(9), {'en:pLMNId', [],
																			[indent(10), {'en:mcc', ["290"]},
																			indent(10), {'en:mnc', ["781"]}, indent(9)]}, indent(8)]},
															indent(8), {'ngc:allowedNfTypes', [],
																	[indent(9), {'ngc:NFType', ["PCF"]}, indent(8)]},
															indent(8), {'ngc:allowedNssais', [],
																	[indent(9), {'ngc:sst', ["242"]},
																	indent(9), {'ngc:sd', ["65532"]}, indent(8)]},
															indent(8), {'ngc:capacity', ["high"]},
															indent(8), {'ngc:supportedFeatures', [generate_identity(7)]},
																	indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), PcfEpN5, indent(5), PcfEpN7, indent(5), PcfEpN15, indent(5), PcfEpN16,
									indent(5), PcfEpRx, indent(5), PcfEpSbiX, indent(4)]},
							indent(4), {'ngc:AUSFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["ausf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["289"]},
															indent(8), {'en:mnc', ["780"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:sBISerivceList', [],
													[indent(7), {'ngc:nfServices', [],
															[indent(8), {'ngc:serviceInstanceId', ["478517"]},
															indent(8), {'ngc:serviceName', ["service-18"]},
															indent(8), {'ngc:version', ["1.0.4"]},
															indent(8), {'ngc:schema', ["ngcNrm"]},
															indent(8), {'ngc:fqdn', [generate_identity(5)]},
															indent(8), {'ngc:interPlmnFqdn', [generate_identity(7)]},
															indent(8), {'ngc:ipEndPoints', [],
																	[indent(9), {'ngc:ipEndPoint', [],
																			[indent(10), {'nn:ipv4Address', ["71.92.31.225"]},
																			indent(10), {'nn:ipv6Address',
																					["2113:4570:1FE2:0:0:0:4559:1FE2"]},
																			indent(10), {'nn:ipv6Prefix', ["2113:4570:1FE2:0000::"]},
																			indent(10), {'nn:vlanId', ["3127"]}, indent(9)]},
																					indent(8)]},
															indent(8), {'ngc:apiPrefix', ["IM"]},
															indent(8), {'ngc:defaultNotificationSubscriptions', ["im-004"]},
															indent(8), {'ngc:allowedPlmns', [],
																	[indent(9), {'en:pLMNId', [],
																			[indent(10), {'en:mcc', ["288"]},
																			indent(10), {'en:mnc', ["779"]}, indent(9)]}, indent(8)]},
															indent(8), {'ngc:allowedNfTypes', [],
																	[indent(9), {'ngc:NFType', ["AUSF"]}, indent(8)]},
															indent(8), {'ngc:allowedNssais', [],
																	[indent(9), {'ngc:sst', ["240"]},
																	indent(9), {'ngc:sd', ["65530"]}, indent(8)]},
															indent(8), {'ngc:capacity', ["low"]},
															indent(8), {'ngc:supportedFeatures', [generate_identity(7)]},
																	indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), AusfEpN12, indent(5), AusfEpN13, indent(5), AusfEpSbiX, indent(4)]},
							indent(4), {'ngc:UDMFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["udm-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["287"]},
															indent(8), {'en:mnc', ["778"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:sBISerivceList', [],
													[indent(7), {'ngc:nfServices', [],
															[indent(8), {'ngc:serviceInstanceId', ["478518"]},
															indent(8), {'ngc:serviceName', ["service-19"]},
															indent(8), {'ngc:version', ["1.0.5"]},
															indent(8), {'ngc:schema', ["ngcNrm"]},
															indent(8), {'ngc:fqdn', [generate_identity(5)]},
															indent(8), {'ngc:interPlmnFqdn', [generate_identity(7)]},
															indent(8), {'ngc:ipEndPoints', [],
																	[indent(9), {'ngc:ipEndPoint', [],
																			[indent(10), {'nn:ipv4Address', ["72.92.32.225"]},
																			indent(10), {'nn:ipv6Address',
																					["2114:4571:1FE2:0:0:0:4559:1FE2"]},
																			indent(10), {'nn:ipv6Prefix', ["2114:4571:1FE2:0000::"]},
																			indent(10), {'nn:vlanId', ["3128"]}, indent(9)]},
																					indent(8)]},
															indent(8), {'ngc:apiPrefix', ["IM"]},
															indent(8), {'ngc:defaultNotificationSubscriptions', ["im-005"]},
															indent(8), {'ngc:allowedPlmns', [],
																	[indent(9), {'en:pLMNId', [],
																			[indent(10), {'en:mcc', ["286"]},
																			indent(10), {'en:mnc', ["777"]}, indent(9)]}, indent(8)]},
															indent(8), {'ngc:allowedNfTypes', [],
																	[indent(9), {'ngc:NFType', ["UDM"]}, indent(8)]},
															indent(8), {'ngc:allowedNssais', [],
																	[indent(9), {'ngc:sst', ["238"]},
																	indent(9), {'ngc:sd', ["65528"]}, indent(8)]},
															indent(8), {'ngc:capacity', ["high"]},
															indent(8), {'ngc:supportedFeatures', [generate_identity(7)]},
																	indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), UdmEpN8, indent(5), UdmEpN10, indent(5), UdmEpN13, 
									indent(5), UdmEpSbiX, indent(4)]},
							indent(4), {'ngc:UDRFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["udr-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["285"]},
															indent(8), {'en:mnc', ["776"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:sBISerivceList', [],
													[indent(7), {'ngc:nfServices', [],
															[indent(8), {'ngc:serviceInstanceId', ["478519"]},
															indent(8), {'ngc:serviceName', ["service-20"]},
															indent(8), {'ngc:version', ["1.0.6"]},
															indent(8), {'ngc:schema', ["ngcNrm"]},
															indent(8), {'ngc:fqdn', [generate_identity(5)]},
															indent(8), {'ngc:interPlmnFqdn', [generate_identity(7)]},
															indent(8), {'ngc:ipEndPoints', [],
																	[indent(9), {'ngc:ipEndPoint', [],
																			[indent(10), {'nn:ipv4Address', ["73.92.32.225"]},
																			indent(10), {'nn:ipv6Address',
																					["2115:4572:1FE2:0:0:0:4559:1FE2"]},
																			indent(10), {'nn:ipv6Prefix', ["2115:4572:1FE2:0000::"]},
																			indent(10), {'nn:vlanId', ["3129"]}, indent(9)]},
																					indent(8)]},
															indent(8), {'ngc:apiPrefix', ["IM"]},
															indent(8), {'ngc:defaultNotificationSubscriptions', ["im-006"]},
															indent(8), {'ngc:allowedPlmns', [],
																	[indent(9), {'en:pLMNId', [],
																			[indent(10), {'en:mcc', ["284"]},
																			indent(10), {'en:mnc', ["775"]}, indent(9)]}, indent(8)]},
															indent(8), {'ngc:allowedNfTypes', [],
																	[indent(9), {'ngc:NFType', ["UDR"]}, indent(8)]},
															indent(8), {'ngc:allowedNssais', [],
																	[indent(9), {'ngc:sst', ["236"]},
																	indent(9), {'ngc:sd', ["65526"]}, indent(8)]},
															indent(8), {'ngc:capacity', ["low"]},
															indent(8), {'ngc:supportedFeatures', [generate_identity(7)]},
																	indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), UdrEpSbiX1, indent(5), UdrEpSbiX2, indent(4)]},
							indent(4), {'ngc:UDSFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["udsf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["283"]},
															indent(8), {'en:mnc', ["774"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:sBISerivceList', [],
													[indent(7), {'ngc:nfServices', [],
															[indent(8), {'ngc:serviceInstanceId', ["478520"]},
															indent(8), {'ngc:serviceName', ["service-21"]},
															indent(8), {'ngc:version', ["1.0.7"]},
															indent(8), {'ngc:schema', ["ngcNrm"]},
															indent(8), {'ngc:fqdn', [generate_identity(5)]},
															indent(8), {'ngc:interPlmnFqdn', [generate_identity(7)]},
															indent(8), {'ngc:ipEndPoints', [],
																	[indent(9), {'ngc:ipEndPoint', [],
																			[indent(10), {'nn:ipv4Address', ["74.92.32.225"]},
																			indent(10), {'nn:ipv6Address',
																					["2125:4572:1FE2:0:0:0:4559:1FE2"]},
																			indent(10), {'nn:ipv6Prefix', ["2125:4572:1FE2:0000::"]},
																			indent(10), {'nn:vlanId', ["3130"]}, indent(9)]},
																					indent(8)]},
															indent(8), {'ngc:apiPrefix', ["IM"]},
															indent(8), {'ngc:defaultNotificationSubscriptions', ["im-007"]},
															indent(8), {'ngc:allowedPlmns', [],
																	[indent(9), {'en:pLMNId', [],
																			[indent(10), {'en:mcc', ["282"]},
																			indent(10), {'en:mnc', ["773"]}, indent(9)]}, indent(8)]},
															indent(8), {'ngc:allowedNfTypes', [],
																	[indent(9), {'ngc:NFType', ["UDSF"]}, indent(8)]},
															indent(8), {'ngc:allowedNssais', [],
																	[indent(9), {'ngc:sst', ["234"]},
																	indent(9), {'ngc:sd', ["65524"]}, indent(8)]},
															indent(8), {'ngc:capacity', ["high"]},
															indent(8), {'ngc:supportedFeatures', [generate_identity(7)]},
																	indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), UdsfEpSbiX, indent(4)]},
							indent(4), {'ngc:NRFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["nrf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["281"]},
															indent(8), {'en:mnc', ["772"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]}, indent(5)]},
									indent(5), NrfEpN27, indent(5), NrfEpSbiX, indent(4)]},
							indent(4), {'ngc:NSSFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["nssf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["280"]},
															indent(8), {'en:mnc', ["771"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:nSIIdList', ["105"]}, indent(5)]},
									indent(5), NssfEpN22, indent(5), NssfEpN27, indent(5), NssfEpN31,
									indent(5), NssfEpSbiX, indent(4)]},
							indent(4), {'ngc:SMSFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["smsf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["279"]},
															indent(8), {'en:mnc', ["770"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:sBISerivceList', [],
													[indent(7), {'ngc:nfServices', [],
															[indent(8), {'ngc:serviceInstanceId', ["478521"]},
															indent(8), {'ngc:serviceName', ["service-22"]},
															indent(8), {'ngc:version', ["1.0.8"]},
															indent(8), {'ngc:schema', ["ngcNrm"]},
															indent(8), {'ngc:fqdn', [generate_identity(5)]},
															indent(8), {'ngc:interPlmnFqdn', [generate_identity(7)]},
															indent(8), {'ngc:ipEndPoints', [],
																	[indent(9), {'ngc:ipEndPoint', [],
																			[indent(10), {'nn:ipv4Address', ["75.93.32.225"]},
																			indent(10), {'nn:ipv6Address',
																					["2126:4573:1FE2:0:0:0:4559:1FE2"]},
																			indent(10), {'nn:ipv6Prefix', ["2126:4573:1FE2:0000::"]},
																			indent(10), {'nn:vlanId', ["3131"]}, indent(9)]},
																					indent(8)]},
															indent(8), {'ngc:apiPrefix', ["IM"]},
															indent(8), {'ngc:defaultNotificationSubscriptions', ["im-008"]},
															indent(8), {'ngc:allowedPlmns', [],
																	[indent(9), {'en:pLMNId', [],
																			[indent(10), {'en:mcc', ["278"]},
																			indent(10), {'en:mnc', ["769"]}, indent(9)]}, indent(8)]},
															indent(8), {'ngc:allowedNfTypes', [],
																	[indent(9), {'ngc:NFType', ["SMSF"]}, indent(8)]},
															indent(8), {'ngc:allowedNssais', [],
																	[indent(9), {'ngc:sst', ["232"]},
																	indent(9), {'ngc:sd', ["65522"]}, indent(8)]},
															indent(8), {'ngc:capacity', ["low"]},
															indent(8), {'ngc:supportedFeatures', [generate_identity(7)]},
																	indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), SmsEpN20, indent(5), SmsEpN21, indent(5), SmsEpMapSmsc, indent(4)]},
							indent(4), {'ngc:LMFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["lmf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["277"]},
															indent(8), {'en:mnc', ["768"]}, indent(7)]},
																	indent(6)]}, indent(5)]},
									indent(5), LmfEpNls, indent(4)]},
							indent(4), {'ngc:NGEIRFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["ngeir-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["276"]},
															indent(8), {'en:mnc', ["767"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:sBISerivceList', [],
													[indent(7), {'ngc:nfServices', [],
															[indent(8), {'ngc:serviceInstanceId', ["478522"]},
															indent(8), {'ngc:serviceName', ["service-23"]},
															indent(8), {'ngc:version', ["1.0.9"]},
															indent(8), {'ngc:schema', ["ngcNrm"]},
															indent(8), {'ngc:fqdn', [generate_identity(5)]},
															indent(8), {'ngc:interPlmnFqdn', [generate_identity(7)]},
															indent(8), {'ngc:ipEndPoints', [],
																	[indent(9), {'ngc:ipEndPoint', [],
																			[indent(10), {'nn:ipv4Address', ["76.93.33.225"]},
																			indent(10), {'nn:ipv6Address',
																					["2146:4574:1FE2:0:0:0:4559:1FE2"]},
																			indent(10), {'nn:ipv6Prefix', ["2146:4574:1FE2:0000::"]},
																			indent(10), {'nn:vlanId', ["3132"]}, indent(9)]},
																					indent(8)]},
															indent(8), {'ngc:apiPrefix', ["IM"]},
															indent(8), {'ngc:defaultNotificationSubscriptions', ["im-009"]},
															indent(8), {'ngc:allowedPlmns', [],
																	[indent(9), {'en:pLMNId', [],
																			[indent(10), {'en:mcc', ["275"]},
																			indent(10), {'en:mnc', ["766"]}, indent(9)]}, indent(8)]},
															indent(8), {'ngc:allowedNfTypes', [],
																	[indent(9), {'ngc:NFType', ["5GEIR"]}, indent(8)]},
															indent(8), {'ngc:allowedNssais', [],
																	[indent(9), {'ngc:sst', ["230"]},
																	indent(9), {'ngc:sd', ["65520"]}, indent(8)]},
															indent(8), {'ngc:capacity', ["high"]},
															indent(8), {'ngc:supportedFeatures', [generate_identity(7)]},
																	indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), NgeirEpN17, indent(4)]},
							indent(4), {'ngc:SEPPFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["sepp-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["274"]},
															indent(8), {'en:mnc', ["765"]}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), SeppEpN32, indent(5), SeppEpSbiIpx, indent(4)]},
							indent(4), {'ngc:NWDAFFunction', [{id, "1"}],
									[indent(5), {'ngc:attributes', [],
											[indent(6), {'ngc:userLabel', ["nwdaf-asquith"]},
											indent(6), {'ngc:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["273"]},
															indent(8), {'en:mnc', ["764"]}, indent(7)]}, indent(6)]},
											indent(6), {'ngc:sBIFqdn', [generate_identity(7)]},
											indent(6), {'ngc:sBISerivceList', [],
													[indent(7), {'ngc:nfServices', [],
															[indent(8), {'ngc:serviceInstanceId', ["478523"]},
															indent(8), {'ngc:serviceName', ["service-24"]},
															indent(8), {'ngc:version', ["1.0.10"]},
															indent(8), {'ngc:schema', ["ngcNrm"]},
															indent(8), {'ngc:fqdn', [generate_identity(5)]},
															indent(8), {'ngc:interPlmnFqdn', [generate_identity(7)]},
															indent(8), {'ngc:ipEndPoints', [],
																	[indent(9), {'ngc:ipEndPoint', [],
																			[indent(10), {'nn:ipv4Address', ["77.94.33.225"]},
																			indent(10), {'nn:ipv6Address',
																					["2146:4584:1FE2:0:0:0:4559:1FE2"]},
																			indent(10), {'nn:ipv6Prefix', ["2146:4584:1FE2:0000::"]},
																			indent(10), {'nn:vlanId', ["3133"]}, indent(9)]},
																					indent(8)]},
															indent(8), {'ngc:apiPrefix', ["IM"]},
															indent(8), {'ngc:defaultNotificationSubscriptions', ["im-010"]},
															indent(8), {'ngc:allowedPlmns', [],
																	[indent(9), {'en:pLMNId', [],
																			[indent(10), {'en:mcc', ["272"]},
																			indent(10), {'en:mnc', ["766"]}, indent(9)]}, indent(8)]},
															indent(8), {'ngc:allowedNfTypes', [],
																	[indent(9), {'ngc:NFType', ["NEF"]}, indent(8)]},
															indent(8), {'ngc:allowedNssais', [],
																	[indent(9), {'ngc:sst', ["228"]},
																	indent(9), {'ngc:sd', ["65518"]}, indent(8)]},
															indent(8), {'ngc:capacity', ["low"]},
															indent(8), {'ngc:supportedFeatures', [generate_identity(7)]},
																	indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), NwdafEpSbiX1, indent(5), NwdafEpSbiX2, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=189"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2020-06-29T23:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	NrNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "5gc.xml",
	file:write_file(XMLPath, NrNrmXML),
	Config;
init_per_testcase(_TestCase, Config) ->
   Config.

-spec end_per_testcase(TestCase :: atom(), Config :: [tuple()]) -> any().
%% Cleanup after each test case.
%%
end_per_testcase(_TestCase, _Config) ->
	ok.

-spec sequences() -> Sequences :: [{SeqName :: atom(), Testcases :: [atom()]}].
%% Group test cases into a test sequence.
%%
sequences() ->
	[].

-spec all() -> TestCases :: [Case :: atom()].
%% Returns a list of all test cases in this test suite.
%%
all() ->
	[bulk_cm_geran, bulk_cm_utran, bulk_cm_eutran, bulk_cm_epc, bulk_cm_core,
			bulk_cm_ims, bulk_cm_pee, bulk_cm_epcn3ai, bulk_cm_inventory1,
			bulk_cm_inventory2, bulk_cm_nr, bulk_cm_5gc,
			add_rule, get_rule, get_rules, delete_rule, get_pee].

%%---------------------------------------------------------------------
%%  Test cases
%%---------------------------------------------------------------------

bulk_cm_geran() ->
	[{userdata, [{doc, "Import bulk CM for geran network resources"}]}].

bulk_cm_geran(Config) ->
	PrivDir = ?config(priv_dir, Config),
	GeranXML = PrivDir ++ "/" ++ "geran.xml",
	ok = im:import(GeranXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(GeranXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = BssContent,
			attributes = BssAttr} = lists:keyfind('gn:BssFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = BssId} = lists:keyfind(id,
			#xmlAttribute.name, BssAttr),
	BssName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",BssFunction=", BssId]),
	#xmlElement{content = BtsContent,
			attributes = BtsAttr} = lists:keyfind('gn:BtsSiteMgr',
			#xmlElement.name, BssContent),
	#xmlAttribute{value = BtsId} = lists:keyfind(id,
			#xmlAttribute.name, BtsAttr),
	BtsName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId,
			",BssFunction=", BssId, ",BtsSiteMgr=", BtsId]),
	#xmlElement{content = _Cell,
			attributes = CellAttr} = lists:keyfind('gn:GsmCell',
			#xmlElement.name, BtsContent),
	#xmlAttribute{value = CellId} = lists:keyfind(id,
			#xmlAttribute.name, CellAttr),
	CellName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",BssFunction=", BssId,
			",BtsSiteMgr=", BtsId, ",GsmCell=", CellId]),
	{ok, #resource{name = BssName}} = im:get_resource_name(BssName),
	{ok, #resource{name = BtsName}} = im:get_resource_name(BtsName),
	{ok, #resource{name = CellName}} = im:get_resource_name(CellName).

bulk_cm_utran() ->
	[{userdata, [{doc, "Import bulk CM for utran network resources"}]}].

bulk_cm_utran(Config) ->
	PrivDir = ?config(priv_dir, Config),
	UtranXML = PrivDir ++ "/" ++ "utran.xml",
	ok = im:import(UtranXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(UtranXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _NodeBContent,
			attributes = NodeBAttr} = lists:keyfind('un:NodeBFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = NodeBId} = lists:keyfind(id,
			#xmlAttribute.name, NodeBAttr),
	#xmlElement{content = RncContent,
			attributes = RncAttr} = lists:keyfind('un:RncFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = RncId} = lists:keyfind(id,
			#xmlAttribute.name, RncAttr),
	#xmlElement{content = _TddLcrContent,
			attributes = TddLcrAttr} = lists:keyfind('un:UtranCellTDDLcr',
			#xmlElement.name, RncContent),
	#xmlAttribute{value = TddLcrId} = lists:keyfind(id,
			#xmlAttribute.name, TddLcrAttr),
	#xmlElement{content = _TddHcrContent,
			attributes = TddHcrAttr} = lists:keyfind('un:UtranCellTDDHcr',
			#xmlElement.name, RncContent),
	#xmlAttribute{value = TddHcrId} = lists:keyfind(id,
			#xmlAttribute.name, TddHcrAttr),
	#xmlElement{content = _IubContent,
			attributes = IubAttr} = lists:keyfind('un:IubLink',
			#xmlElement.name, RncContent),
	#xmlAttribute{value = IubId} = lists:keyfind(id,
			#xmlAttribute.name, IubAttr),
	#xmlElement{content = _FddContent,
			attributes = FddAttr} = lists:keyfind('un:UtranCellFDD',
			#xmlElement.name, RncContent),
	#xmlAttribute{value = FddId} = lists:keyfind(id,
			#xmlAttribute.name, FddAttr),
	TddLcrName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId,
			",RncFunction=", RncId, ",UtranCellTDDLcr=", TddLcrId]),
	TddHcrName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId,
			",RncFunction=", RncId, ",UtranCellTDDHcr=", TddHcrId]),
	IubName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId,
			",RncFunction=", RncId, ",IubLink=", IubId]),
	NodeBName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NodeBFunction=", NodeBId]),
	RncName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",RncFunction=", RncId]),
	FddName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId,
			",RncFunction=", RncId, ",UtranCellFDD=", FddId]),
	{ok, #resource{name = TddLcrName}} = im:get_resource_name(TddLcrName),
	{ok, #resource{name = TddHcrName}} = im:get_resource_name(TddHcrName),
	{ok, #resource{name = IubName}} = im:get_resource_name(IubName),
	{ok, #resource{name = NodeBName}} = im:get_resource_name(NodeBName),
	{ok, #resource{name = RncName}} = im:get_resource_name(RncName),
	{ok, #resource{name = FddName}} = im:get_resource_name(FddName).

bulk_cm_eutran() ->
	[{userdata, [{doc, "Import bulk CM for eutran network resources"}]}].

bulk_cm_eutran(Config) ->
	PrivDir = ?config(priv_dir, Config),
	EutranXML = PrivDir ++ "/" ++ "eutran.xml",
	ok = im:import(EutranXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(EutranXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id, #xmlAttribute.name, MeAttr),
	#xmlElement{content = EnbContent,
			attributes = EnbAttr} = lists:keyfind('en:ENBFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = EnbId} = lists:keyfind(id,
			#xmlAttribute.name, EnbAttr),
	#xmlElement{content = _FddContent,
			attributes = FddAttr} = lists:keyfind('en:EUtranCellFDD',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = FddId} = lists:keyfind(id,
			#xmlAttribute.name, FddAttr),
	#xmlElement{content = _TddContent,
			attributes = TddAttr} = lists:keyfind('en:EUtranCellTDD',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = TddId} = lists:keyfind(id,
			#xmlAttribute.name, TddAttr),
	#xmlElement{content = _EpRpEpsContent,
			attributes = EpRpEpsAttr} = lists:keyfind('epc:EP_RP_EPS',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = EpRpEpsId} = lists:keyfind(id,
			#xmlAttribute.name, EpRpEpsAttr),
	#xmlElement{content = _EpX2cContent,
			attributes = EpX2cAttr} = lists:keyfind('nn:EP_X2C',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = EpX2cId} = lists:keyfind(id,
			#xmlAttribute.name, EpX2cAttr),
	#xmlElement{content = _EpX2uContent,
			attributes = EpX2uAttr} = lists:keyfind('nn:EP_X2U',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = EpX2uId} = lists:keyfind(id,
			#xmlAttribute.name, EpX2uAttr),
	#xmlElement{content = _EpNgcContent,
			attributes = EpNgcAttr} = lists:keyfind('nn:EP_NgC',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = EpNgcId} = lists:keyfind(id,
			#xmlAttribute.name, EpNgcAttr),
	#xmlElement{content = _EpNguContent,
			attributes = EpNguAttr} = lists:keyfind('nn:EP_NgU',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = EpNguId} = lists:keyfind(id,
			#xmlAttribute.name, EpNguAttr),
	#xmlElement{content = _EpXncContent,
			attributes = EpXncAttr} = lists:keyfind('nn:EP_XnC',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = EpXncId} = lists:keyfind(id,
			#xmlAttribute.name, EpXncAttr),
	#xmlElement{content = _EpXnuContent,
			attributes = EpXnuAttr} = lists:keyfind('nn:EP_XnU',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = EpXnuId} = lists:keyfind(id,
			#xmlAttribute.name, EpXnuAttr),
	EnbName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId]),
	FddName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EUtranCellFDD=", FddId]),
	TddName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EUtranCellTDD=", TddId]),
	EpRpEpsName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EP_RP_EPS=", EpRpEpsId]),
	EpX2cName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EP_X2C=", EpX2cId]),
	EpX2uName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EP_X2U=", EpX2uId]),
	EpNgcName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EP_NgC=", EpNgcId]),
	EpNguName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EP_NgU=", EpNguId]),
	EpXncName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EP_XnC=", EpXncId]),
	EpXnuName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EP_XnU=", EpXnuId]),
	{ok, #resource{name = EnbName}} = im:get_resource_name(EnbName),
	{ok, #resource{name = FddName}} = im:get_resource_name(FddName),
	{ok, #resource{name = TddName}} = im:get_resource_name(TddName),
	{ok, #resource{name = EpRpEpsName}} = im:get_resource_name(EpRpEpsName),
	{ok, #resource{name = EpX2cName}} = im:get_resource_name(EpX2cName),
	{ok, #resource{name = EpX2uName}} = im:get_resource_name(EpX2uName),
	{ok, #resource{name = EpNgcName}} = im:get_resource_name(EpNgcName),
	{ok, #resource{name = EpNguName}} = im:get_resource_name(EpNguName),
	{ok, #resource{name = EpXncName}} = im:get_resource_name(EpXncName),
	{ok, #resource{name = EpXnuName}} = im:get_resource_name(EpXnuName).

bulk_cm_epc() ->
	[{userdata, [{doc, "Import bulk CM for epc network resources"}]}].

bulk_cm_epc(Config) ->
	PrivDir = ?config(priv_dir, Config),
	EpcXML = PrivDir ++ "/" ++ "epc.xml",
	ok = im:import(EpcXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(EpcXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = EpdgContent,
			attributes = EpdgAttr} = lists:keyfind('epc:EPDGFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = EpdgId} = lists:keyfind(id,
			#xmlAttribute.name, EpdgAttr),
	#xmlElement{content = _EpdgEpContent,
			attributes = EpdgEpAttr} = lists:keyfind('epc:EP_RP_EPS',
			#xmlElement.name, EpdgContent),
	#xmlAttribute{value = EpdgEpId} = lists:keyfind(id,
			#xmlAttribute.name, EpdgEpAttr),
	#xmlElement{content = MmeContent,
			attributes = MmeAttr} = lists:keyfind('epc:MMEFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = MmeId} = lists:keyfind(id,
			#xmlAttribute.name, MmeAttr),
	#xmlElement{content = _MmeEpContent,
			attributes = MmeEpAttr} = lists:keyfind('epc:EP_RP_EPS',
			#xmlElement.name, MmeContent),
	#xmlAttribute{value = MmeEpId} = lists:keyfind(id,
			#xmlAttribute.name, MmeEpAttr),
	#xmlElement{content = PcrfContent,
			attributes = PcrfAttr} = lists:keyfind('epc:PCRFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = PcrfId} = lists:keyfind(id,
			#xmlAttribute.name, PcrfAttr),
	#xmlElement{content = _PcrfEpContent,
			attributes = PcrfEpAttr} = lists:keyfind('epc:EP_RP_EPS',
			#xmlElement.name, PcrfContent),
	#xmlAttribute{value = PcrfEpId} = lists:keyfind(id,
			#xmlAttribute.name, PcrfEpAttr),
	#xmlElement{content = PgwContent,
			attributes = PgwAttr} = lists:keyfind('epc:PGWFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = PgwId} = lists:keyfind(id,
			#xmlAttribute.name, PgwAttr),
	#xmlElement{content = _PgwEpContent,
			attributes = PgwEpAttr} = lists:keyfind('epc:EP_RP_EPS',
			#xmlElement.name, PgwContent),
	#xmlAttribute{value = PgwEpId} = lists:keyfind(id,
			#xmlAttribute.name, PgwEpAttr),
	#xmlElement{content = ServingGwContent,
			attributes = ServingGwAttr} = lists:keyfind('epc:ServingGWFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = ServingGwId} = lists:keyfind(id,
			#xmlAttribute.name, ServingGwAttr),
	#xmlElement{content = _SgwEpContent,
			attributes = SgwEpAttr} = lists:keyfind('epc:EP_RP_EPS',
			#xmlElement.name, ServingGwContent),
	#xmlAttribute{value = SgwEpId} = lists:keyfind(id,
			#xmlAttribute.name, SgwEpAttr),
	EpdgName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",EPDGFunction=", EpdgId]),
	EpdgEpName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",EPDGFunction=", EpdgId,
			",EP_RP_EPS=", EpdgEpId]),
	MmeName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",MMEFunction=", MmeId]),
	MmeEpName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",MMEFunction=", MmeId,
			",EP_RP_EPS=", MmeEpId]),
	PcrfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCRFFunction=", PcrfId]),
	PcrfEpName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCRFFunction=", PcrfId,
			",EP_RP_EPS=", PcrfEpId]),
	PgwName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PGWFunction=", PgwId]),
	PgwEpName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PGWFunction=", PgwId,
			",EP_RP_EPS=", PgwEpId]),
	SgwName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ServingGWFunction=", ServingGwId]),
	SgwEpName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ServingGWFunction=", ServingGwId,
			",EP_RP_EPS=", SgwEpId]),
	{ok, #resource{name = EpdgName}} = im:get_resource_name(EpdgName),
	{ok, #resource{name = EpdgEpName}} = im:get_resource_name(EpdgEpName),
	{ok, #resource{name = MmeName}} = im:get_resource_name(MmeName),
	{ok, #resource{name = MmeEpName}} = im:get_resource_name(MmeEpName),
	{ok, #resource{name = PcrfName}} = im:get_resource_name(PcrfName),
	{ok, #resource{name = PcrfEpName}} = im:get_resource_name(PcrfEpName),
	{ok, #resource{name = PgwName}} = im:get_resource_name(PgwName),
	{ok, #resource{name = PgwEpName}} = im:get_resource_name(PgwEpName),
	{ok, #resource{name = SgwName}} = im:get_resource_name(SgwName),
	{ok, #resource{name = SgwEpName}} = im:get_resource_name(SgwEpName).

bulk_cm_core() ->
	[{userdata, [{doc, "Import bulk CM for core network resources"}]}].

bulk_cm_core(Config) ->
	PrivDir = ?config(priv_dir, Config),
	CoreXML = PrivDir ++ "/" ++ "core.xml",
	ok = im:import(CoreXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(CoreXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = MscContent,
			attributes = MscAttr} = lists:keyfind('cn:MscServerFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = MscId} = lists:keyfind(id,
			#xmlAttribute.name, MscAttr),
	#xmlElement{content = _IucsContent,
			attributes = IucsAttr} = lists:keyfind('cn:IucsLink',
			#xmlElement.name, MscContent),
	#xmlAttribute{value = IucsId} = lists:keyfind(id,
			#xmlAttribute.name, IucsAttr),
	#xmlElement{content = _ALinkContent,
			attributes = ALinkAttr} = lists:keyfind('cn:ALink',
			#xmlElement.name, MscContent),
	#xmlAttribute{value = ALinkId} = lists:keyfind(id,
			#xmlAttribute.name, ALinkAttr),
	#xmlElement{content = _MgwContent,
			attributes = MgwAttr} = lists:keyfind('cn:CsMgwFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = MgwId} = lists:keyfind(id,
			#xmlAttribute.name, MgwAttr),
	#xmlElement{content = _GgsnContent,
			attributes = GgsnAttr} = lists:keyfind('cn:GgsnFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = GgsnId} = lists:keyfind(id,
			#xmlAttribute.name, GgsnAttr),
	#xmlElement{content = SgsnContent,
			attributes = SgsnAttr} = lists:keyfind('cn:SgsnFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = SgsnId} = lists:keyfind(id,
			#xmlAttribute.name, SgsnAttr),
	#xmlElement{content = _IupsContent,
			attributes = IupsAttr} = lists:keyfind('cn:IupsLink',
			#xmlElement.name, SgsnContent),
	#xmlAttribute{value = IupsId} = lists:keyfind(id,
			#xmlAttribute.name, IupsAttr),
	#xmlElement{content = _GbContent,
			attributes = GbAttr} = lists:keyfind('cn:GbLink',
			#xmlElement.name, SgsnContent),
	#xmlAttribute{value = GbId} = lists:keyfind(id,
			#xmlAttribute.name, GbAttr),
	#xmlElement{content = _AucContent,
			attributes = AucAttr} = lists:keyfind('cn:AucFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AucId} = lists:keyfind(id,
			#xmlAttribute.name, AucAttr),
	#xmlElement{content = _HlrContent,
			attributes = HlrAttr} = lists:keyfind('cn:HlrFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = HlrId} = lists:keyfind(id,
			#xmlAttribute.name, HlrAttr),
	#xmlElement{content = _EirContent,
			attributes = EirAttr} = lists:keyfind('cn:EirFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = EirId} = lists:keyfind(id,
			#xmlAttribute.name, EirAttr),
	#xmlElement{content = _MnpSrfContent,
			attributes = MnpSrfAttr} = lists:keyfind('cn:MnpSrfFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = MnpSrfId} = lists:keyfind(id,
			#xmlAttribute.name, MnpSrfAttr),
	#xmlElement{content = _CgfContent,
			attributes = CgfAttr} = lists:keyfind('cn:CgfFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = CgfId} = lists:keyfind(id,
			#xmlAttribute.name, CgfAttr),
	#xmlElement{content = _SgwContent,
			attributes = SgwAttr} = lists:keyfind('cn:SgwFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = SgwId} = lists:keyfind(id,
			#xmlAttribute.name, SgwAttr),
	#xmlElement{content = CbcContent,
			attributes = CbcAttr} = lists:keyfind('cn:CbcFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = CbcId} = lists:keyfind(id,
			#xmlAttribute.name, CbcAttr),
	#xmlElement{content = _IubcContent,
			attributes = IubcAttr} = lists:keyfind('cn:IubcLink',
			#xmlElement.name, CbcContent),
	#xmlAttribute{value = IubcId} = lists:keyfind(id,
			#xmlAttribute.name, IubcAttr),
	MscName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",MscServerFunction=", MscId]),
	IucsName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",MscServerFunction=", MscId,
			",IucsLink=", IucsId]),
	ALinkName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",MscServerFunction=", MscId,
			",ALink=", ALinkId]),
	MgwName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",CsMgwFunction=", MgwId]),
	GgsnName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GgsnFunction=", GgsnId]),
	SgsnName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SgsnFunction=", SgsnId]),
	GbName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SgsnFunction=", SgsnId,
			",GbLink=", GbId]),
	IupsName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SgsnFunction=", SgsnId,
			",IupsLink=", IupsId]),
	AucName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AucFunction=", AucId]),
	HlrName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",HlrFunction=", HlrId]),
	EirName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",EirFunction=", EirId]),
	MnpSrfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",MnpSrfFunction=", MnpSrfId]),
	CgfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",CgfFunction=", CgfId]),
	SgwName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SgwFunction=", SgwId]),
	CbcName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",CbcFunction=", CbcId]),
	IubcName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",CbcFunction=", CbcId,
			",IubcLink=", IubcId]),
	{ok, #resource{name = MscName}} = im:get_resource_name(MscName),
	{ok, #resource{name = IucsName}} = im:get_resource_name(IucsName),
	{ok, #resource{name = ALinkName}} = im:get_resource_name(ALinkName),
	{ok, #resource{name = MgwName}} = im:get_resource_name(MgwName),
	{ok, #resource{name = GgsnName}} = im:get_resource_name(GgsnName),
	{ok, #resource{name = SgsnName}} = im:get_resource_name(SgsnName),
	{ok, #resource{name = GbName}} = im:get_resource_name(GbName),
	{ok, #resource{name = IupsName}} = im:get_resource_name(IupsName),
	{ok, #resource{name = AucName}} = im:get_resource_name(AucName),
	{ok, #resource{name = HlrName}} = im:get_resource_name(HlrName),
	{ok, #resource{name = EirName}} = im:get_resource_name(EirName),
	{ok, #resource{name = MnpSrfName}} = im:get_resource_name(MnpSrfName),
	{ok, #resource{name = CgfName}} = im:get_resource_name(CgfName),
	{ok, #resource{name = SgwName}} = im:get_resource_name(SgwName),
	{ok, #resource{name = CbcName}} = im:get_resource_name(CbcName),
	{ok, #resource{name = IubcName}} = im:get_resource_name(IubcName).

bulk_cm_ims() ->
	[{userdata, [{doc, "Import bulk CM for ims network resources"}]}].

bulk_cm_ims(Config) ->
	PrivDir = ?config(priv_dir, Config),
	ImsXML = PrivDir ++ "/" ++ "ims.xml",
	ok = im:import(ImsXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(ImsXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _AsContent,
			attributes = AsAttr} = lists:keyfind('im:ASFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AsId} = lists:keyfind(id,
			#xmlAttribute.name, AsAttr),
	#xmlElement{content = _HssContent,
			attributes = HssAttr} = lists:keyfind('im:HSSFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = HssId} = lists:keyfind(id,
			#xmlAttribute.name, HssAttr),
	#xmlElement{content = _IcscfContent,
			attributes = IcscfAttr} = lists:keyfind('im:ICSCFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = IcscfId} = lists:keyfind(id,
			#xmlAttribute.name, IcscfAttr),
	#xmlElement{content = _PcscfContent,
			attributes = PcscfAttr} = lists:keyfind('im:PCSCFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = PcscfId} = lists:keyfind(id,
			#xmlAttribute.name, PcscfAttr),
	#xmlElement{content = _ScscfContent,
			attributes = ScscfAttr} = lists:keyfind('im:SCSCFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = ScscfId} = lists:keyfind(id,
			#xmlAttribute.name, ScscfAttr),
	AsName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ASFunction=", AsId]),
	HssName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",HSSFunction=", HssId]),
	IcscfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ICSCFFunction=", IcscfId]),
	PcscfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCSCFFunction=", PcscfId]),
	ScscfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SCSCFFunction=", ScscfId]),
	{ok, #resource{name = AsName}} = im:get_resource_name(AsName),
	{ok, #resource{name = HssName}} = im:get_resource_name(HssName),
	{ok, #resource{name = IcscfName}} = im:get_resource_name(IcscfName),
	{ok, #resource{name = PcscfName}} = im:get_resource_name(PcscfName),
	{ok, #resource{name = ScscfName}} = im:get_resource_name(ScscfName).

bulk_cm_pee() ->
	[{userdata, [{doc, "Import bulk CM for pee network resources"}]}].

bulk_cm_pee(Config) ->
	PrivDir = ?config(priv_dir, Config),
	PeeXML = PrivDir ++ "/" ++ "pee.xml",
	ok = im:import(PeeXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(PeeXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = PeeMeContent,
			attributes = _PeeMeAttr} = lists:keyfind('pee:PEEMonitoredEntity',
			#xmlElement.name, MeContent),
	#xmlElement{content = AttrContent,
			attributes = _Attr} = lists:keyfind('pee:attributes',
			#xmlElement.name, PeeMeContent),
	#xmlElement{content = [IdContent],
			attributes = _IdAttr} = lists:keyfind('pee:mEId',
			#xmlElement.name, AttrContent),
	Id = element(5, IdContent),
	PeeMeName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PEEMonitoredEntity.mEId=", Id]),
	{ok, #resource{name = PeeMeName}} = im:get_resource_name(PeeMeName).

bulk_cm_epcn3ai() ->
	[{userdata, [{doc, "Import bulk CM for epcn3ai network resources"}]}].

bulk_cm_epcn3ai(Config) ->
	PrivDir = ?config(priv_dir, Config),
	Epcn3aiXML = PrivDir ++ "/" ++ "epcn3ai.xml",
	ok = im:import(Epcn3aiXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(Epcn3aiXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _AaaServerContent,
			attributes = AaaServerAttr} = lists:keyfind('epcn3ai:3GPPAAAServerFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AaaServerId} = lists:keyfind(id,
			#xmlAttribute.name, AaaServerAttr),
	#xmlElement{content = _AaaProxyContent,
			attributes = AaaProxyAttr} = lists:keyfind('epcn3ai:3GPPAAAProxyFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AaaProxyId} = lists:keyfind(id,
			#xmlAttribute.name, AaaProxyAttr),
	AaaServerName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",3GPPAAAServerFunction=", AaaServerId]),
	AaaProxyName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",3GPPAAAProxyFunction=", AaaProxyId]),
	{ok, #resource{name = AaaServerName}} = im:get_resource_name(AaaServerName),
	{ok, #resource{name = AaaProxyName}} = im:get_resource_name(AaaProxyName).

bulk_cm_inventory1(Config) ->
	PrivDir = ?config(priv_dir, Config),
	InventoryXML = PrivDir ++ "/" ++ "inventory1.xml",
	ok = im:import(InventoryXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(InventoryXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _InventoryUnitContent,
			attributes = InventoryUnitAttr} = lists:keyfind('in:InventoryUnit',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = InventoryUnitId} = lists:keyfind(id,
			#xmlAttribute.name, InventoryUnitAttr),
	#xmlElement{content = _TmaIUContent,
			attributes = TmaIUAttr} = lists:keyfind('in:TmaInventoryUnit',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = TmaIUId} = lists:keyfind(id,
			#xmlAttribute.name, TmaIUAttr),
	#xmlElement{content = _AntennaIUContent,
			attributes = AntennaIUAttr} = lists:keyfind('in:AntennaInventoryUnit',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AntennaIUId} = lists:keyfind(id,
			#xmlAttribute.name, AntennaIUAttr),
	InventoryUnitName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",InventoryUnit=", InventoryUnitId]),
	TmaIUName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",TmaInventoryUnit=", TmaIUId]),
	AntennaIUName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AntennaInventoryUnit=", AntennaIUId]),
	{ok, #resource{name = InventoryUnitName}} = im:get_resource_name(InventoryUnitName),
	{ok, #resource{name = TmaIUName}} = im:get_resource_name(TmaIUName),
	{ok, #resource{name = AntennaIUName}} = im:get_resource_name(AntennaIUName).

bulk_cm_inventory2(Config) ->
	PrivDir = ?config(priv_dir, Config),
	InventoryXML = PrivDir ++ "/" ++ "inventory2.xml",
	ok = im:import(InventoryXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(InventoryXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _IUNEContent,
			attributes = IUNEAttr} = lists:keyfind('in:InventoryUnitNE',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = IUNEId} = lists:keyfind(id,
			#xmlAttribute.name, IUNEAttr),
	#xmlElement{content = IUHwContent1,
			attributes = IUHwAttr1} = lists:keyfind('in:InventoryUnitHw',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = IUHwId1} = lists:keyfind(id,
			#xmlAttribute.name, IUHwAttr1),
	#xmlElement{content = _IUHwContent2,
			attributes = IUHwAttr2} = lists:keyfind('in:InventoryUnitHw',
			#xmlElement.name, IUHwContent1),
	#xmlAttribute{value = IUHwId2} = lists:keyfind(id,
			#xmlAttribute.name, IUHwAttr2),
	#xmlElement{content = _IUSwContent,
			attributes = IUSwAttr} = lists:keyfind('in:InventoryUnitSw',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = IUSwId} = lists:keyfind(id,
			#xmlAttribute.name, IUSwAttr),
	IUNEName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",InventoryUnitNE=", IUNEId]),
	IUHwName1 = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",InventoryUnitHw=", IUHwId1]),
	IUHwName2 = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",InventoryUnitHw=", IUHwId1,
			",InventoryUnitHw=", IUHwId2]),
	IUSwName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AntennaInventoryUnit=", IUSwId]),
	{ok, #resource{name = IUNEName}} = im:get_resource_name(IUNEName),
	{ok, #resource{name = IUHwName1}} = im:get_resource_name(IUHwName1),
	{ok, #resource{name = IUHwName2}} = im:get_resource_name(IUHwName2),
	{ok, #resource{name = IUSwName}} = im:get_resource_name(IUSwName).

bulk_cm_nr() ->
	[{userdata, [{doc, "Import bulk CM for nr network resources"}]}].

bulk_cm_nr(Config) ->
	PrivDir = ?config(priv_dir, Config),
	NrXML = PrivDir ++ "/" ++ "nr.xml",
	ok = im:import(NrXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(NrXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = GNBDUContent,
			attributes = GNBDUAttr} = lists:keyfind('nn:GNBDUFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = GNBDUId} = lists:keyfind(id,
			#xmlAttribute.name, GNBDUAttr),
	#xmlElement{content = _NRCellDUContent,
			attributes = NRCellDUAttr} = lists:keyfind('nn:NRCellDU',
			#xmlElement.name, GNBDUContent),
	#xmlAttribute{value = NRCellDUId} = lists:keyfind(id,
			#xmlAttribute.name, NRCellDUAttr),
	#xmlElement{content = _NRSectorCarrierContent,
			attributes = NRSectorCarrierAttr} = lists:keyfind('nn:NRSectorCarrier',
			#xmlElement.name, GNBDUContent),
	#xmlAttribute{value = NRSectorCarrierId} = lists:keyfind(id,
			#xmlAttribute.name, NRSectorCarrierAttr),
	#xmlElement{content = _EpF1cContent,
			attributes = EpF1cAttr} = lists:keyfind('nn:EP_F1C',
			#xmlElement.name, GNBDUContent),
	#xmlAttribute{value = EpF1cId} = lists:keyfind(id,
			#xmlAttribute.name, EpF1cAttr),
	#xmlElement{content = _EpF1uContent,
			attributes = EpF1uAttr} = lists:keyfind('nn:EP_F1U',
			#xmlElement.name, GNBDUContent),
	#xmlAttribute{value = EpF1uId} = lists:keyfind(id,
			#xmlAttribute.name, EpF1uAttr),
	GNBDUName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBDUFunction=", GNBDUId]),
	NRCellDUName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBDUFunction=", GNBDUId,
			",NRCellDU=", NRCellDUId]),
	NRSectorCarrierName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBDUFunction=", GNBDUId,
			",NRSectorCarrier=", NRSectorCarrierId]),
	EpF1cName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBDUFunction=", GNBDUId,
			",EP_F1C=", EpF1cId]),
	EpF1uName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBDUFunction=", GNBDUId,
			",EP_F1U=", EpF1uId]),
	#xmlElement{content = GNBCUCPContent,
			attributes = GNBCUCPAttr} = lists:keyfind('nn:GNBCUCPFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = GNBCUCPId} = lists:keyfind(id,
			#xmlAttribute.name, GNBCUCPAttr),
	#xmlElement{content = _NRCellCUContent,
			attributes = NRCellCUAttr} = lists:keyfind('nn:NRCellCU',
			#xmlElement.name, GNBCUCPContent),
	#xmlAttribute{value = NRCellCUId} = lists:keyfind(id,
			#xmlAttribute.name, NRCellCUAttr),
	#xmlElement{content = _EpE1Content,
			attributes = EpE1Attr} = lists:keyfind('nn:EP_E1',
			#xmlElement.name, GNBCUCPContent),
	#xmlAttribute{value = EpE1Id} = lists:keyfind(id,
			#xmlAttribute.name, EpE1Attr),
	#xmlElement{content = _EpXncContent,
			attributes = EpXncAttr} = lists:keyfind('nn:EP_XnC',
			#xmlElement.name, GNBCUCPContent),
	#xmlAttribute{value = EpXncId} = lists:keyfind(id,
			#xmlAttribute.name, EpXncAttr),
	#xmlElement{content = _EpX2cContent,
			attributes = EpX2cAttr} = lists:keyfind('nn:EP_X2C',
			#xmlElement.name, GNBCUCPContent),
	#xmlAttribute{value = EpX2cId} = lists:keyfind(id,
			#xmlAttribute.name, EpX2cAttr),
	#xmlElement{content = _EpNgcContent,
			attributes = EpNgcAttr} = lists:keyfind('nn:EP_NgC',
			#xmlElement.name, GNBCUCPContent),
	#xmlAttribute{value = EpNgcId} = lists:keyfind(id,
			#xmlAttribute.name, EpNgcAttr),
	GNBCUCPName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId]),
	NRCellCUName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId,
			",NRCellCU=", NRCellCUId]),
	EpE1Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId,
			",EP_E1=", EpE1Id]),
	EpXncName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId,
			",EP_XnC=", EpXncId]),
	EpX2cName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId,
			",EP_X2C=", EpX2cId]),
	EpNgcName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId,
			",EP_NgC=", EpNgcId]),
	#xmlElement{content = GNBCUUPContent,
			attributes = GNBCUUPAttr} = lists:keyfind('nn:GNBCUUPFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = GNBCUUPId} = lists:keyfind(id,
			#xmlAttribute.name, GNBCUUPAttr),
	#xmlElement{content = _EpXnuContent,
			attributes = EpXnuAttr} = lists:keyfind('nn:EP_XnU',
			#xmlElement.name, GNBCUUPContent),
	#xmlAttribute{value = EpXnuId} = lists:keyfind(id,
			#xmlAttribute.name, EpXnuAttr),
	#xmlElement{content = _EpNguContent,
			attributes = EpNguAttr} = lists:keyfind('nn:EP_NgU',
			#xmlElement.name, GNBCUUPContent),
	#xmlAttribute{value = EpNguId} = lists:keyfind(id,
			#xmlAttribute.name, EpNguAttr),
	#xmlElement{content = _EpX2uContent,
			attributes = EpX2uAttr} = lists:keyfind('nn:EP_X2U',
			#xmlElement.name, GNBCUUPContent),
	#xmlAttribute{value = EpX2uId} = lists:keyfind(id,
			#xmlAttribute.name, EpX2uAttr),
	#xmlElement{content = _EpS1uContent,
			attributes = EpS1uAttr} = lists:keyfind('nn:EP_S1U',
			#xmlElement.name, GNBCUUPContent),
	#xmlAttribute{value = EpS1uId} = lists:keyfind(id,
			#xmlAttribute.name, EpS1uAttr),
	GNBCUUPName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUUPFunction=", GNBCUUPId]),
	EpXnuName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUUPFunction=", GNBCUUPId,
			",EP_XnU=", EpXnuId]),
	EpNguName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUUPFunction=", GNBCUUPId,
			",EP_NgU=", EpNguId]),
	EpX2uName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUUPFunction=", GNBCUUPId,
			",EP_X2U=", EpX2uId]),
	EpS1uName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUUPFunction=", GNBCUUPId,
			",EP_S1U=", EpS1uId]),
	{ok, #resource{name = GNBCUUPName}} = im:get_resource_name(GNBCUUPName),
	{ok, #resource{name = EpXnuName}} = im:get_resource_name(EpXnuName),
	{ok, #resource{name = EpNguName}} = im:get_resource_name(EpNguName),
	{ok, #resource{name = EpX2uName}} = im:get_resource_name(EpX2uName),
	{ok, #resource{name = EpS1uName}} = im:get_resource_name(EpS1uName),
%%%GNBDU
	{ok, #resource{name = GNBDUName}} = im:get_resource_name(GNBDUName),
	{ok, #resource{name = NRCellDUName}} = im:get_resource_name(NRCellDUName),
	{ok, #resource{name = NRSectorCarrierName}} = im:get_resource_name(NRSectorCarrierName),
	{ok, #resource{name = EpF1cName}} = im:get_resource_name(EpF1cName),
	{ok, #resource{name = EpF1uName}} = im:get_resource_name(EpF1uName),
%%%GNBCUCP
	{ok, #resource{name = GNBCUCPName}} = im:get_resource_name(GNBCUCPName),
	{ok, #resource{name = NRCellCUName}} = im:get_resource_name(NRCellCUName),
	{ok, #resource{name = EpE1Name}} = im:get_resource_name(EpE1Name),
	{ok, #resource{name = EpXncName}} = im:get_resource_name(EpXncName),
	{ok, #resource{name = EpX2cName}} = im:get_resource_name(EpX2cName),
	{ok, #resource{name = EpNgcName}} = im:get_resource_name(EpNgcName).

bulk_cm_5gc() ->
	[{userdata, [{doc, "Import bulk CM for 5gc network resources"}]}].

bulk_cm_5gc(Config) ->
	PrivDir = ?config(priv_dir, Config),
	NgcXML = PrivDir ++ "/" ++ "5gc.xml",
	ok = im:import(NgcXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(NgcXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = AmfContent,
			attributes = AmfAttr} = lists:keyfind('ngc:AMFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AmfId} = lists:keyfind(id,
			#xmlAttribute.name, AmfAttr),
	#xmlElement{content = _AmfEpN2Content,
			attributes = AmfEpN2Attr} = lists:keyfind('ngc:EP_N2',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpN2Id} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpN2Attr),
	#xmlElement{content = _AmfEpN8Content,
			attributes = AmfEpN8Attr} = lists:keyfind('ngc:EP_N8',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpN8Id} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpN8Attr),
	#xmlElement{content = _AmfEpN11Content,
			attributes = AmfEpN11Attr} = lists:keyfind('ngc:EP_N11',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpN11Id} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpN11Attr),
	#xmlElement{content = _AmfEpN12Content,
			attributes = AmfEpN12Attr} = lists:keyfind('ngc:EP_N12',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpN12Id} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpN12Attr),
	#xmlElement{content = _AmfEpN14Content,
			attributes = AmfEpN14Attr} = lists:keyfind('ngc:EP_N14',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpN14Id} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpN14Attr),
	#xmlElement{content = _AmfEpN15Content,
			attributes = AmfEpN15Attr} = lists:keyfind('ngc:EP_N15',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpN15Id} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpN15Attr),
	#xmlElement{content = _AmfEpN17Content,
			attributes = AmfEpN17Attr} = lists:keyfind('ngc:EP_N17',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpN17Id} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpN17Attr),
	#xmlElement{content = _AmfEpN20Content,
			attributes = AmfEpN20Attr} = lists:keyfind('ngc:EP_N20',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpN20Id} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpN20Attr),
	#xmlElement{content = _AmfEpN22Content,
			attributes = AmfEpN22Attr} = lists:keyfind('ngc:EP_N22',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpN22Id} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpN22Attr),
	#xmlElement{content = _AmfEpN26Content,
			attributes = AmfEpN26Attr} = lists:keyfind('ngc:EP_N26',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpN26Id} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpN26Attr),
	#xmlElement{content = _AmfEpNlsContent,
			attributes = AmfEpNlsAttr} = lists:keyfind('ngc:EP_NLS',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpNlsId} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpNlsAttr),
	#xmlElement{content = _AmfEpNlgContent,
			attributes = AmfEpNlgAttr} = lists:keyfind('ngc:EP_NLG',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpNlgId} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpNlgAttr),
	#xmlElement{content = _AmfEpSbiXContent,
			attributes = AmfEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, AmfContent),
	#xmlAttribute{value = AmfEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, AmfEpSbiXAttr),
	AmfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId]),
	AmfEpN2Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_N2=", AmfEpN2Id]),
	AmfEpN8Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_N8=", AmfEpN8Id]),
	AmfEpN11Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_N11=", AmfEpN11Id]),
	AmfEpN12Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_N12=", AmfEpN12Id]),
	AmfEpN14Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_N14=", AmfEpN14Id]),
	AmfEpN15Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_N15=", AmfEpN15Id]),
	AmfEpN17Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_N17=", AmfEpN17Id]),
	AmfEpN20Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_N20=", AmfEpN20Id]),
	AmfEpN22Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_N22=", AmfEpN22Id]),
	AmfEpN26Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_N26=", AmfEpN26Id]),
	AmfEpNlsName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_NLS=", AmfEpNlsId]),
	AmfEpNlgName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_NLG=", AmfEpNlgId]),
	AmfEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AMFFunction=", AmfId,
			",EP_SBI_X=", AmfEpSbiXId]),
	{ok, #resource{name = AmfName}} = im:get_resource_name(AmfName),
	{ok, #resource{name = AmfEpN2Name}} = im:get_resource_name(AmfEpN2Name),
	{ok, #resource{name = AmfEpN8Name}} = im:get_resource_name(AmfEpN8Name),
	{ok, #resource{name = AmfEpN11Name}} = im:get_resource_name(AmfEpN11Name),
	{ok, #resource{name = AmfEpN12Name}} = im:get_resource_name(AmfEpN12Name),
	{ok, #resource{name = AmfEpN14Name}} = im:get_resource_name(AmfEpN14Name),
	{ok, #resource{name = AmfEpN15Name}} = im:get_resource_name(AmfEpN15Name),
	{ok, #resource{name = AmfEpN17Name}} = im:get_resource_name(AmfEpN17Name),
	{ok, #resource{name = AmfEpN20Name}} = im:get_resource_name(AmfEpN20Name),
	{ok, #resource{name = AmfEpN22Name}} = im:get_resource_name(AmfEpN22Name),
	{ok, #resource{name = AmfEpN26Name}} = im:get_resource_name(AmfEpN26Name),
	{ok, #resource{name = AmfEpNlsName}} = im:get_resource_name(AmfEpNlsName),
	{ok, #resource{name = AmfEpNlgName}} = im:get_resource_name(AmfEpNlgName),
	{ok, #resource{name = AmfEpSbiXName}} = im:get_resource_name(AmfEpSbiXName),
	#xmlElement{content = SmfContent,
			attributes = SmfAttr} = lists:keyfind('ngc:SMFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = SmfId} = lists:keyfind(id,
			#xmlAttribute.name, SmfAttr),
	#xmlElement{content = _SmfEpN4Content,
			attributes = SmfEpN4Attr} = lists:keyfind('ngc:EP_N4',
			#xmlElement.name, SmfContent),
	#xmlAttribute{value = SmfEpN4Id} = lists:keyfind(id,
			#xmlAttribute.name, SmfEpN4Attr),
	#xmlElement{content = _SmfEpN7Content,
			attributes = SmfEpN7Attr} = lists:keyfind('ngc:EP_N7',
			#xmlElement.name, SmfContent),
	#xmlAttribute{value = SmfEpN7Id} = lists:keyfind(id,
			#xmlAttribute.name, SmfEpN7Attr),
	#xmlElement{content = _SmfEpN10Content,
			attributes = SmfEpN10Attr} = lists:keyfind('ngc:EP_N10',
			#xmlElement.name, SmfContent),
	#xmlAttribute{value = SmfEpN10Id} = lists:keyfind(id,
			#xmlAttribute.name, SmfEpN10Attr),
	#xmlElement{content = _SmfEpN11Content,
			attributes = SmfEpN11Attr} = lists:keyfind('ngc:EP_N11',
			#xmlElement.name, SmfContent),
	#xmlAttribute{value = SmfEpN11Id} = lists:keyfind(id,
			#xmlAttribute.name, SmfEpN11Attr),
	#xmlElement{content = _SmfEpN16Content,
			attributes = SmfEpN16Attr} = lists:keyfind('ngc:EP_N16',
			#xmlElement.name, SmfContent),
	#xmlAttribute{value = SmfEpN16Id} = lists:keyfind(id,
			#xmlAttribute.name, SmfEpN16Attr),
	#xmlElement{content = _SmfEpS5cContent,
			attributes = SmfEpS5cAttr} = lists:keyfind('ngc:EP_S5C',
			#xmlElement.name, SmfContent),
	#xmlAttribute{value = SmfEpS5cId} = lists:keyfind(id,
			#xmlAttribute.name, SmfEpS5cAttr),
	#xmlElement{content = _SmfEpSbiXContent,
			attributes = SmfEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, SmfContent),
	#xmlAttribute{value = SmfEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, SmfEpSbiXAttr),
	SmfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMFFunction=", SmfId]),
	SmfEpN4Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMFFunction=", SmfId,
			",EP_N4=", SmfEpN4Id]),
	SmfEpN7Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMFFunction=", SmfId,
			",EP_N7=", SmfEpN7Id]),
	SmfEpN10Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMFFunction=", SmfId,
			",EP_N10=", SmfEpN10Id]),
	SmfEpN11Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMFFunction=", SmfId,
			",EP_N11=", SmfEpN11Id]),
	SmfEpN16Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMFFunction=", SmfId,
			",EP_N16=", SmfEpN16Id]),
	SmfEpS5cName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMFFunction=", SmfId,
			",EP_S5C=", SmfEpS5cId]),
	SmfEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMFFunction=", SmfId,
			",EP_SBI_X=", SmfEpSbiXId]),
	{ok, #resource{name = SmfName}} = im:get_resource_name(SmfName),
	{ok, #resource{name = SmfEpN4Name}} = im:get_resource_name(SmfEpN4Name),
	{ok, #resource{name = SmfEpN7Name}} = im:get_resource_name(SmfEpN7Name),
	{ok, #resource{name = SmfEpN10Name}} = im:get_resource_name(SmfEpN10Name),
	{ok, #resource{name = SmfEpN11Name}} = im:get_resource_name(SmfEpN11Name),
	{ok, #resource{name = SmfEpN16Name}} = im:get_resource_name(SmfEpN16Name),
	{ok, #resource{name = SmfEpS5cName}} = im:get_resource_name(SmfEpS5cName),
	{ok, #resource{name = SmfEpSbiXName}} = im:get_resource_name(SmfEpSbiXName),
	#xmlElement{content = UpfContent,
			attributes = UpfAttr} = lists:keyfind('ngc:UPFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = UpfId} = lists:keyfind(id,
			#xmlAttribute.name, UpfAttr),
	#xmlElement{content = _UpfEpN3Content,
			attributes = UpfEpN3Attr} = lists:keyfind('ngc:EP_N3',
			#xmlElement.name, UpfContent),
	#xmlAttribute{value = UpfEpN3Id} = lists:keyfind(id,
			#xmlAttribute.name, UpfEpN3Attr),
	#xmlElement{content = _UpfEpN4Content,
			attributes = UpfEpN4Attr} = lists:keyfind('ngc:EP_N4',
			#xmlElement.name, UpfContent),
	#xmlAttribute{value = UpfEpN4Id} = lists:keyfind(id,
			#xmlAttribute.name, UpfEpN4Attr),
	#xmlElement{content = _UpfEpN6Content,
			attributes = UpfEpN6Attr} = lists:keyfind('ngc:EP_N6',
			#xmlElement.name, UpfContent),
	#xmlAttribute{value = UpfEpN6Id} = lists:keyfind(id,
			#xmlAttribute.name, UpfEpN6Attr),
	#xmlElement{content = _UpfEpN9Content,
			attributes = UpfEpN9Attr} = lists:keyfind('ngc:EP_N9',
			#xmlElement.name, UpfContent),
	#xmlAttribute{value = UpfEpN9Id} = lists:keyfind(id,
			#xmlAttribute.name, UpfEpN9Attr),
	#xmlElement{content = _UpfEpS5uContent,
			attributes = UpfEpS5uAttr} = lists:keyfind('ngc:EP_S5U',
			#xmlElement.name, UpfContent),
	#xmlAttribute{value = UpfEpS5uId} = lists:keyfind(id,
			#xmlAttribute.name, UpfEpS5uAttr),
	#xmlElement{content = _UpfEpSbiXContent,
			attributes = UpfEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, UpfContent),
	#xmlAttribute{value = UpfEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, UpfEpSbiXAttr),
	UpfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UPFFunction=", UpfId]),
	UpfEpN3Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UPFFunction=", UpfId,
			",EP_N3=", UpfEpN3Id]),
	UpfEpN4Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UPFFunction=", UpfId,
			",EP_N4=", UpfEpN4Id]),
	UpfEpN6Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UPFFunction=", UpfId,
			",EP_N6=", UpfEpN6Id]),
	UpfEpN9Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UPFFunction=", UpfId,
			",EP_N9=", UpfEpN9Id]),
	UpfEpS5uName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UPFFunction=", UpfId,
			",EP_S5U=", UpfEpS5uId]),
	UpfEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UPFFunction=", UpfId,
			",EP_SBI_X=", UpfEpSbiXId]),
	{ok, #resource{name = UpfName}} = im:get_resource_name(UpfName),
	{ok, #resource{name = UpfEpN3Name}} = im:get_resource_name(UpfEpN3Name),
	{ok, #resource{name = UpfEpN4Name}} = im:get_resource_name(UpfEpN4Name),
	{ok, #resource{name = UpfEpN6Name}} = im:get_resource_name(UpfEpN6Name),
	{ok, #resource{name = UpfEpN9Name}} = im:get_resource_name(UpfEpN9Name),
	{ok, #resource{name = UpfEpS5uName}} = im:get_resource_name(UpfEpS5uName),
	{ok, #resource{name = UpfEpSbiXName}} = im:get_resource_name(UpfEpSbiXName),
	#xmlElement{content = N3iwfContent,
			attributes = N3iwfAttr} = lists:keyfind('ngc:N3IWFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = N3iwfId} = lists:keyfind(id,
			#xmlAttribute.name, N3iwfAttr),
	#xmlElement{content = _N3iwfEpN2Content,
			attributes = N3iwfEpN2Attr} = lists:keyfind('ngc:EP_N2',
			#xmlElement.name, N3iwfContent),
	#xmlAttribute{value = N3iwfEpN2Id} = lists:keyfind(id,
			#xmlAttribute.name, N3iwfEpN2Attr),
	#xmlElement{content = _N3iwfEpN3Content,
			attributes = N3iwfEpN3Attr} = lists:keyfind('ngc:EP_N3',
			#xmlElement.name, N3iwfContent),
	#xmlAttribute{value = N3iwfEpN3Id} = lists:keyfind(id,
			#xmlAttribute.name, N3iwfEpN3Attr),
	N3iwfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",N3IWFFunction=", N3iwfId]),
	N3iwfEpN2Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",N3IWFFunction=", N3iwfId,
			",EP_N2=", N3iwfEpN2Id]),
	N3iwfEpN3Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",N3IWFFunction=", N3iwfId,
			",EP_N3=", N3iwfEpN3Id]),
	{ok, #resource{name = N3iwfName}} = im:get_resource_name(N3iwfName),
	{ok, #resource{name = N3iwfEpN2Name}} = im:get_resource_name(N3iwfEpN2Name),
	{ok, #resource{name = N3iwfEpN3Name}} = im:get_resource_name(N3iwfEpN3Name),
	#xmlElement{content = PcfContent,
			attributes = PcfAttr} = lists:keyfind('ngc:PCFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = PcfId} = lists:keyfind(id,
			#xmlAttribute.name, PcfAttr),
	#xmlElement{content = _PcfEpN5Content,
			attributes = PcfEpN5Attr} = lists:keyfind('ngc:EP_N5',
			#xmlElement.name, PcfContent),
	#xmlAttribute{value = PcfEpN5Id} = lists:keyfind(id,
			#xmlAttribute.name, PcfEpN5Attr),
	#xmlElement{content = _PcfEpN7Content,
			attributes = PcfEpN7Attr} = lists:keyfind('ngc:EP_N7',
			#xmlElement.name, PcfContent),
	#xmlAttribute{value = PcfEpN7Id} = lists:keyfind(id,
			#xmlAttribute.name, PcfEpN7Attr),
	#xmlElement{content = _PcfEpN15Content,
			attributes = PcfEpN15Attr} = lists:keyfind('ngc:EP_N15',
			#xmlElement.name, PcfContent),
	#xmlAttribute{value = PcfEpN15Id} = lists:keyfind(id,
			#xmlAttribute.name, PcfEpN15Attr),
	#xmlElement{content = _PcfEpN16Content,
			attributes = PcfEpN16Attr} = lists:keyfind('ngc:EP_N16',
			#xmlElement.name, PcfContent),
	#xmlAttribute{value = PcfEpN16Id} = lists:keyfind(id,
			#xmlAttribute.name, PcfEpN16Attr),
	#xmlElement{content = _PcfEpRxContent,
			attributes = PcfEpRxAttr} = lists:keyfind('ngc:EP_Rx',
			#xmlElement.name, PcfContent),
	#xmlAttribute{value = PcfEpRxId} = lists:keyfind(id,
			#xmlAttribute.name, PcfEpRxAttr),
	#xmlElement{content = _PcfEpSbiXContent,
			attributes = PcfEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, PcfContent),
	#xmlAttribute{value = PcfEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, PcfEpSbiXAttr),
	PcfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCFFunction=", PcfId]),
	PcfEpN5Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCFFunction=", PcfId,
			",EP_N5=", PcfEpN5Id]),
	PcfEpN7Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCFFunction=", PcfId,
			",EP_N7=", PcfEpN7Id]),
	PcfEpN15Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCFFunction=", PcfId,
			",EP_N15=", PcfEpN15Id]),
	PcfEpN16Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCFFunction=", PcfId,
			",EP_N16=", PcfEpN16Id]),
	PcfEpRxName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCFFunction=", PcfId,
			",EP_Rx=", PcfEpRxId]),
	PcfEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCFFunction=", PcfId,
			",EP_SBI_X=", PcfEpSbiXId]),
	{ok, #resource{name = PcfName}} = im:get_resource_name(PcfName),
	{ok, #resource{name = PcfEpN5Name}} = im:get_resource_name(PcfEpN5Name),
	{ok, #resource{name = PcfEpN7Name}} = im:get_resource_name(PcfEpN7Name),
	{ok, #resource{name = PcfEpN15Name}} = im:get_resource_name(PcfEpN15Name),
	{ok, #resource{name = PcfEpN16Name}} = im:get_resource_name(PcfEpN16Name),
	{ok, #resource{name = PcfEpRxName}} = im:get_resource_name(PcfEpRxName),
	{ok, #resource{name = PcfEpSbiXName}} = im:get_resource_name(PcfEpSbiXName),
	#xmlElement{content = AusfContent,
			attributes = AusfAttr} = lists:keyfind('ngc:AUSFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AusfId} = lists:keyfind(id,
			#xmlAttribute.name, AusfAttr),
	#xmlElement{content = _AusfEpN12Content,
			attributes = AusfEpN12Attr} = lists:keyfind('ngc:EP_N12',
			#xmlElement.name, AusfContent),
	#xmlAttribute{value = AusfEpN12Id} = lists:keyfind(id,
			#xmlAttribute.name, AusfEpN12Attr),
	#xmlElement{content = _AusfEpN13Content,
			attributes = AusfEpN13Attr} = lists:keyfind('ngc:EP_N13',
			#xmlElement.name, AusfContent),
	#xmlAttribute{value = AusfEpN13Id} = lists:keyfind(id,
			#xmlAttribute.name, AusfEpN13Attr),
	#xmlElement{content = _AusfEpSbiXContent,
			attributes = AusfEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, AusfContent),
	#xmlAttribute{value = AusfEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, AusfEpSbiXAttr),
	AusfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AUSFFunction=", AusfId]),
	AusfEpN12Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AUSFFunction=", AusfId,
			",EP_N12=", AusfEpN12Id]),
	AusfEpN13Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AUSFFunction=", AusfId,
			",EP_N13=", AusfEpN13Id]),
	AusfEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AUSFFunction=", AusfId,
			",EP_SBI_X=", AusfEpSbiXId]),
	{ok, #resource{name = AusfName}} = im:get_resource_name(AusfName),
	{ok, #resource{name = AusfEpN12Name}} = im:get_resource_name(AusfEpN12Name),
	{ok, #resource{name = AusfEpN13Name}} = im:get_resource_name(AusfEpN13Name),
	{ok, #resource{name = AusfEpSbiXName}} = im:get_resource_name(AusfEpSbiXName),
	#xmlElement{content = UdmContent,
			attributes = UdmAttr} = lists:keyfind('ngc:UDMFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = UdmId} = lists:keyfind(id,
			#xmlAttribute.name, UdmAttr),
	#xmlElement{content = _UdmEpN8Content,
			attributes = UdmEpN8Attr} = lists:keyfind('ngc:EP_N8',
			#xmlElement.name, UdmContent),
	#xmlAttribute{value = UdmEpN8Id} = lists:keyfind(id,
			#xmlAttribute.name, UdmEpN8Attr),
	#xmlElement{content = _UdmEpN10Content,
			attributes = UdmEpN10Attr} = lists:keyfind('ngc:EP_N10',
			#xmlElement.name, UdmContent),
	#xmlAttribute{value = UdmEpN10Id} = lists:keyfind(id,
			#xmlAttribute.name, UdmEpN10Attr),
	#xmlElement{content = _UdmEpN13Content,
			attributes = UdmEpN13Attr} = lists:keyfind('ngc:EP_N13',
			#xmlElement.name, UdmContent),
	#xmlAttribute{value = UdmEpN13Id} = lists:keyfind(id,
			#xmlAttribute.name, UdmEpN13Attr),
	#xmlElement{content = _UdmEpSbiXContent,
			attributes = UdmEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, UdmContent),
	#xmlAttribute{value = UdmEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, UdmEpSbiXAttr),
	UdmName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UDMFunction=", UdmId]),
	UdmEpN8Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UDMFunction=", UdmId,
			",EP_N8=", UdmEpN8Id]),
	UdmEpN10Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UDMFunction=", UdmId,
			",EP_N10=", UdmEpN10Id]),
	UdmEpN13Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UDMFunction=", UdmId,
			",EP_N13=", UdmEpN13Id]),
	UdmEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UDMFunction=", UdmId,
			",EP_SBI_X=", UdmEpSbiXId]),
	{ok, #resource{name = UdmName}} = im:get_resource_name(UdmName),
	{ok, #resource{name = UdmEpN8Name}} = im:get_resource_name(UdmEpN8Name),
	{ok, #resource{name = UdmEpN10Name}} = im:get_resource_name(UdmEpN10Name),
	{ok, #resource{name = UdmEpN13Name}} = im:get_resource_name(UdmEpN13Name),
	{ok, #resource{name = UdmEpSbiXName}} = im:get_resource_name(UdmEpSbiXName),
	#xmlElement{content = UdrContent,
			attributes = UdrAttr} = lists:keyfind('ngc:UDRFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = UdrId} = lists:keyfind(id,
			#xmlAttribute.name, UdrAttr),
	#xmlElement{content = _UdrEpSbiXContent,
			attributes = UdrEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, UdrContent),
	#xmlAttribute{value = UdrEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, UdrEpSbiXAttr),
	UdrName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UDRFunction=", UdrId]),
	UdrEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UDRFunction=", UdrId,
			",EP_SBI_X=", UdrEpSbiXId]),
	{ok, #resource{name = UdrName}} = im:get_resource_name(UdrName),
	{ok, #resource{name = UdrEpSbiXName}} = im:get_resource_name(UdrEpSbiXName),
	#xmlElement{content = UdsfContent,
			attributes = UdsfAttr} = lists:keyfind('ngc:UDSFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = UdsfId} = lists:keyfind(id,
			#xmlAttribute.name, UdsfAttr),
	#xmlElement{content = _UdsfEpSbiXContent,
			attributes = UdsfEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, UdsfContent),
	#xmlAttribute{value = UdsfEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, UdsfEpSbiXAttr),
	UdsfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UDSFFunction=", UdsfId]),
	UdsfEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",UDSFFunction=", UdsfId,
			",EP_SBI_X=", UdsfEpSbiXId]),
	{ok, #resource{name = UdsfName}} = im:get_resource_name(UdsfName),
	{ok, #resource{name = UdsfEpSbiXName}} = im:get_resource_name(UdsfEpSbiXName),
	#xmlElement{content = NrfContent,
			attributes = NrfAttr} = lists:keyfind('ngc:NRFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = NrfId} = lists:keyfind(id,
			#xmlAttribute.name, NrfAttr),
	#xmlElement{content = _NrfEpN27Content,
			attributes = NrfEpN27Attr} = lists:keyfind('ngc:EP_N27',
			#xmlElement.name, NrfContent),
	#xmlAttribute{value = NrfEpN27Id} = lists:keyfind(id,
			#xmlAttribute.name, NrfEpN27Attr),
	#xmlElement{content = _NrfEpSbiXContent,
			attributes = NrfEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, NrfContent),
	#xmlAttribute{value = NrfEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, NrfEpSbiXAttr),
	NrfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NRFFunction=", NrfId]),
	NrfEpN27Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NRFFunction=", NrfId,
			",EP_N27=", NrfEpN27Id]),
	NrfEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NRFFunction=", NrfId,
			",EP_SBI_X=", NrfEpSbiXId]),
	{ok, #resource{name = NrfName}} = im:get_resource_name(NrfName),
	{ok, #resource{name = NrfEpN27Name}} = im:get_resource_name(NrfEpN27Name),
	{ok, #resource{name = NrfEpSbiXName}} = im:get_resource_name(NrfEpSbiXName),
	#xmlElement{content = NssfContent,
			attributes = NssfAttr} = lists:keyfind('ngc:NSSFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = NssfId} = lists:keyfind(id,
			#xmlAttribute.name, NssfAttr),
	#xmlElement{content = _NssfEpN22Content,
			attributes = NssfEpN22Attr} = lists:keyfind('ngc:EP_N22',
			#xmlElement.name, NssfContent),
	#xmlAttribute{value = NssfEpN22Id} = lists:keyfind(id,
			#xmlAttribute.name, NssfEpN22Attr),
	#xmlElement{content = _NssfEpN27Content,
			attributes = NssfEpN27Attr} = lists:keyfind('ngc:EP_N27',
			#xmlElement.name, NssfContent),
	#xmlAttribute{value = NssfEpN27Id} = lists:keyfind(id,
			#xmlAttribute.name, NssfEpN27Attr),
	#xmlElement{content = _NssfEpN31Content,
			attributes = NssfEpN31Attr} = lists:keyfind('ngc:EP_N31',
			#xmlElement.name, NssfContent),
	#xmlAttribute{value = NssfEpN31Id} = lists:keyfind(id,
			#xmlAttribute.name, NssfEpN31Attr),
	#xmlElement{content = _NssfEpSbiXContent,
			attributes = NssfEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, NssfContent),
	#xmlAttribute{value = NssfEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, NssfEpSbiXAttr),
	NssfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NSSFFunction=", NssfId]),
	NssfEpN22Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NSSFFunction=", NssfId,
			",EP_N22=", NssfEpN22Id]),
	NssfEpN27Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NSSFFunction=", NssfId,
			",EP_N27=", NssfEpN27Id]),
	NssfEpN31Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NSSFFunction=", NssfId,
			",EP_N31=", NssfEpN31Id]),
	NssfEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NSSFFunction=", NssfId,
			",EP_SBI_X=", NssfEpSbiXId]),
	{ok, #resource{name = NssfName}} = im:get_resource_name(NssfName),
	{ok, #resource{name = NssfEpN22Name}} = im:get_resource_name(NssfEpN22Name),
	{ok, #resource{name = NssfEpN27Name}} = im:get_resource_name(NssfEpN27Name),
	{ok, #resource{name = NssfEpN31Name}} = im:get_resource_name(NssfEpN31Name),
	{ok, #resource{name = NssfEpSbiXName}} = im:get_resource_name(NssfEpSbiXName),
	#xmlElement{content = SmsfContent,
			attributes = SmsfAttr} = lists:keyfind('ngc:SMSFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = SmsfId} = lists:keyfind(id,
			#xmlAttribute.name, SmsfAttr),
	#xmlElement{content = _SmsfEpN20Content,
			attributes = SmsfEpN20Attr} = lists:keyfind('ngc:EP_N20',
			#xmlElement.name, SmsfContent),
	#xmlAttribute{value = SmsfEpN20Id} = lists:keyfind(id,
			#xmlAttribute.name, SmsfEpN20Attr),
	#xmlElement{content = _SmsfEpN21Content,
			attributes = SmsfEpN21Attr} = lists:keyfind('ngc:EP_N21',
			#xmlElement.name, SmsfContent),
	#xmlAttribute{value = SmsfEpN21Id} = lists:keyfind(id,
			#xmlAttribute.name, SmsfEpN21Attr),
	#xmlElement{content = _SmsfEpMapSmscContent,
			attributes = SmsfEpMapSmscAttr} = lists:keyfind('ngc:EP_MAP_SMSC',
			#xmlElement.name, SmsfContent),
	#xmlAttribute{value = SmsfEpMapSmscId} = lists:keyfind(id,
			#xmlAttribute.name, SmsfEpMapSmscAttr),
	SmsfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMSFunction=", SmsfId]),
	SmsfEpN20Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMSFunction=", SmsfId,
			",EP_N20=", SmsfEpN20Id]),
	SmsfEpN21Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMSFunction=", SmsfId,
			",EP_N21=", SmsfEpN21Id]),
	SmsfEpMapSmscName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SMSFunction=", SmsfId,
			",EP_MAP_SMSC=", SmsfEpMapSmscId]),
	{ok, #resource{name = SmsfName}} = im:get_resource_name(SmsfName),
	{ok, #resource{name = SmsfEpN20Name}} = im:get_resource_name(SmsfEpN20Name),
	{ok, #resource{name = SmsfEpN21Name}} = im:get_resource_name(SmsfEpN21Name),
	{ok, #resource{name = SmsfEpMapSmscName}} = im:get_resource_name(SmsfEpMapSmscName),
	#xmlElement{content = LmfContent,
			attributes = LmfAttr} = lists:keyfind('ngc:LMFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = LmfId} = lists:keyfind(id,
			#xmlAttribute.name, LmfAttr),
	#xmlElement{content = _LmfEpNlsContent,
			attributes = LmfEpNlsAttr} = lists:keyfind('ngc:EP_NLS',
			#xmlElement.name, LmfContent),
	#xmlAttribute{value = LmfEpNlsId} = lists:keyfind(id,
			#xmlAttribute.name, LmfEpNlsAttr),
	LmfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",LMFFunction=", LmfId]),
	LmfEpNlsName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",LMFFunction=", LmfId,
			",EP_NLS=", LmfEpNlsId]),
	{ok, #resource{name = LmfName}} = im:get_resource_name(LmfName),
	{ok, #resource{name = LmfEpNlsName}} = im:get_resource_name(LmfEpNlsName),
	#xmlElement{content = NgeirContent,
			attributes = NgeirAttr} = lists:keyfind('ngc:NGEIRFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = NgeirId} = lists:keyfind(id,
			#xmlAttribute.name, NgeirAttr),
	#xmlElement{content = _NgeirEpN17Content,
			attributes = NgeirEpN17Attr} = lists:keyfind('ngc:EP_N17',
			#xmlElement.name, NgeirContent),
	#xmlAttribute{value = NgeirEpN17Id} = lists:keyfind(id,
			#xmlAttribute.name, NgeirEpN17Attr),
	NgeirName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NGEIRFunction=", NgeirId]),
	NgeirEpN17Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NGEIRFunction=", NgeirId,
			",EP_N17=", NgeirEpN17Id]),
	{ok, #resource{name = NgeirName}} = im:get_resource_name(NgeirName),
	{ok, #resource{name = NgeirEpN17Name}} = im:get_resource_name(NgeirEpN17Name),
	#xmlElement{content = SeppContent,
			attributes = SeppAttr} = lists:keyfind('ngc:SEPPFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = SeppId} = lists:keyfind(id,
			#xmlAttribute.name, SeppAttr),
	#xmlElement{content = _SeppEpN32Content,
			attributes = SeppEpN32Attr} = lists:keyfind('ngc:EP_N32',
			#xmlElement.name, SeppContent),
	#xmlAttribute{value = SeppEpN32Id} = lists:keyfind(id,
			#xmlAttribute.name, SeppEpN32Attr),
	#xmlElement{content = _SeppEpSbiIpxContent,
			attributes = SeppEpSbiIpxAttr} = lists:keyfind('ngc:EP_SBI_IPX',
			#xmlElement.name, SeppContent),
	#xmlAttribute{value = SeppEpSbiIpxId} = lists:keyfind(id,
			#xmlAttribute.name, SeppEpSbiIpxAttr),
	SeppName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SEPPFunction=", SeppId]),
	SeppEpN32Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SEPPFunction=", SeppId,
			",EP_N32=", SeppEpN32Id]),
	SeppEpSbiIpxName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SEPPFunction=", SeppId,
			",EP_SBI_IPX=", SeppEpSbiIpxId]),
	{ok, #resource{name = SeppName}} = im:get_resource_name(SeppName),
	{ok, #resource{name = SeppEpN32Name}} = im:get_resource_name(SeppEpN32Name),
	{ok, #resource{name = SeppEpSbiIpxName}}
			= im:get_resource_name(SeppEpSbiIpxName),
	#xmlElement{content = NwdafContent,
			attributes = NwdafAttr} = lists:keyfind('ngc:NWDAFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = NwdafId} = lists:keyfind(id,
			#xmlAttribute.name, NwdafAttr),
	#xmlElement{content = _NwdafEpSbiXContent,
			attributes = NwdafEpSbiXAttr} = lists:keyfind('ngc:EP_SBI_X',
			#xmlElement.name, NwdafContent),
	#xmlAttribute{value = NwdafEpSbiXId} = lists:keyfind(id,
			#xmlAttribute.name, NwdafEpSbiXAttr),
	NwdafName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NWDAFFunction=", NwdafId]),
	NwdafEpSbiXName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NWDAFFunction=", NwdafId,
			",EP_SBI_X=", NwdafEpSbiXId]),
	{ok, #resource{name = NwdafName}} = im:get_resource_name(NwdafName),
	{ok, #resource{name = NwdafEpSbiXName}} = im:get_resource_name(NwdafEpSbiXName).

add_rule() ->
	[{userdata, [{doc, "Add PEE matching rules"}]}].

add_rule(_Config) ->
	Rule = fun(DN1) ->
			[{DN1, [], ['$_']}]
	end,
	{ok, #pee_rule{}} = im:add_rule(Rule, "testing").

get_rule() ->
	[{userdata, [{doc, "Get a specific rule"}]}].

get_rule(_Config) ->
	Rule = fun(DN) ->
				[{DN, [], ['$_']}]
	end,
	{ok, #pee_rule{id = Id} = PeeRule} = im:add_rule(Rule, "testing"),
	{ok, PeeRule} = im:get_rule(Id).

get_rules() ->
	[{userdata, [{doc, "Get all the rules"}]}].

get_rules(_Config) ->
	Rule = fun(DN) ->
				[{DN, [], ['$_']}]
	end,
	{ok, #pee_rule{}} = im:add_rule(Rule, "testing"),
	PeeRuleIds = im:get_rule(),
	PeeRules = [im:get_rule(Id) || Id <- PeeRuleIds],
	F = fun({ok, #pee_rule{}}) ->
				true;
			(_P) ->
				false
	end,
	true = lists:all(F, PeeRules).

delete_rule() ->
	[{userdata, [{doc, "Delete a specific rule"}]}].

delete_rule(_Config) ->
	Rule = fun(DN) ->
				[{DN, [], ['$_']}]
	end,
	{ok, #pee_rule{id = Id}} = im:add_rule(Rule, "testing"),
	ok = im:delete_rule(Id),
	{error, not_found} = im:get_rule(Id).

get_pee() ->
	[{userdata, [{doc, "Get matching PEE CMON entity(s) for a given Distinguished Name"}]}].

get_pee(_Config) ->
	SiteId = generate_identity(7),
	DomainComponent = "DC=sigscale.net,SubNetwork=1,ManagedElement=1,PEEMonitoredEntity.mEId=",
	ok = fill_resource(10),
	PeeResource = #resource{name = DomainComponent ++ SiteId,
			category = "PEE", class_type = "PEEMonitoredEntity", base_type = "ResourceFunction",
			characteristic = [#resource_char{name = "mEId", class_type = undefined, schema = undefined, value = SiteId},
			#resource_char{name = "peeMeDescription", class_type = "PEEMEDescription",
			schema = "/resourceCatalogManagement/v3/schema/peeCmonNrm#/definitions/PEEMEDescription",
			value = #{"environmentType" => "hut",
			"equipmentType" => "9G", "powerInterface" => "petrol", "sensorDescription" => "SensorPack-3",
			"siteDescription" => "Fullerton Falls", "siteIdentification" => SiteId, "siteLatitude" => "23.54294",
			"siteLongitude" => "90.60755", "vSRmsDescription" => "Sunken", "xcuDguDescription" => "DGUv1"}},
			#resource_char{name = "peeMeConfiguration", class_type = "PEEMEConfiguration",
			schema = "/resourceCatalogManagement/v3/schema/peeCmonNrm#/definitions/PEEMEConfiguration",
			value = #{"currentMaxThreshold" => "35", "currentMinThreshold" => "15", "humidityMaxThreshold" => "66",
			"humidityMinThreshold" => "6", "powerMaxThreshold" => "2500", "powerMinThreshold" => "500",
			"temperatureMaxThreshold" => "15", "temperatureMinThreshold" => "15", "voltageMaxThreshold" => "245",
			"voltageMinThreshold" => "202"}}]},
	{ok, #resource{}} = im:add_resource(PeeResource),
	Rule = fun(DN) ->
			SubList = string:tokens(DN, ","),
			Fid = fun(F, [H | T], Acc) ->
					case string:tokens(H, "=") of
						["ID", Id] ->
							[Id | Acc];
						_ ->
							F(F, T, Acc)
					end;
				(_F, [], Acc) ->
					Acc
			end,
			[SID] = Fid(Fid, SubList, []),
			PeeMeDN = "DC=sigscale.net,SubNetwork=1,ManagedElement=1,PEEMonitoredEntity.mEId=" ++ SID,
			[{#resource{name = '$1', _ = '_'}, [{'==', '$1', PeeMeDN}], ['$_']}]
	end,
	{ok, #pee_rule{id = Id}} = im:add_rule(Rule, "testing"),
	NodeBDN = "DC=sigscale.net,SubNetwork=1,ManagedElement=1,NodeBFunction=1,ID=" ++ SiteId,
	{ok, [#resource{class_type = "PEEMonitoredEntity", characteristic = Chars}]} = im:get_pee(Id, NodeBDN),
	F = fun(#resource_char{name = "peeMeDescription"}) ->
				true;
			(_) ->
				false
	end,
	[#resource_char{value = #{"siteIdentification" := SId}}] = lists:filter(F, Chars),
	SId == SiteId.

%%---------------------------------------------------------------------
%%  Internal functions
%%---------------------------------------------------------------------

generate_identity(Length) when Length > 0 ->
	Charset = charset(),
	NumChars = length(Charset),
	Random = crypto:strong_rand_bytes(Length),
	generate_identity(Random, Charset, NumChars,[]).
%% @hidden
generate_identity(<<N, Rest/binary>>, Charset, NumChars, Acc) ->
	CharNum = (N rem NumChars) + 1,
	NewAcc = [lists:nth(CharNum, Charset) | Acc],
	generate_identity(Rest, Charset, NumChars, NewAcc);
generate_identity(<<>>, _Charset, _NumChars, Acc) ->
	Acc.

%% @hidden
cell_allocation() ->
	cell_allocation(rand:uniform(12) + 6, []).
%% @hidden
cell_allocation(N, Acc) when N > 0 ->
	cell_allocation(N - 1, [rand:uniform(124) | Acc]);
cell_allocation(0, Acc) ->
	cell_allocation1(lists:reverse(lists:sort(Acc)), []).
%% @hidden
cell_allocation1([H], Acc) ->
	[integer_to_list(H) | Acc];
cell_allocation1([H | T], Acc) ->
	cell_allocation1(T, [" " ++ integer_to_list(H) | Acc]).

%% @hidden
charset() ->
	C1 = lists:seq($A, $D),
	C2 = lists:seq($f, $h),
	C3 = lists:seq($j, $k),
	C4 = lists:seq($m, $n),
	C5 = lists:seq($P, $T),
	C6 = lists:seq($w, $z),
	C7 = lists:seq($ , $ ),
	lists:append([C1, C2, C3, C4, C5, C6, C7]).

%% @hidden
fill_resource(0) ->
	ok;
fill_resource(N) ->
	Resource = #resource{name = "DC=sigscale.net,SubNetwork=1,ManagedElement=1,BssFunction=1,BtsSiteMgr=" ++
			integer_to_list(N), description = "GSM Base Transceiver Station (BTS)", category = "RAN",
			class_type = "BtsSiteMgr", base_type = "ResourceFunction",
			schema = "/resourceInventoryManagement/v3/schema/BtsSiteMgr",
			specification = #specification_ref{id = "149672829752946", name = "BtsSiteMgr", version = "1.0"}},
	{ok, #resource{}} = im:add_resource(Resource),
	fill_resource(N - 1).

%% @hidden
indent(N) ->
	Tabs = lists:duplicate(N, $\t),
	#xmlText{value = "\n" ++ Tabs, type = text}.
