%%% im_api_SUITE.erl
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% @copyright 2018-2019 SigScale Global Inc.
%%% @end
%%% Licensed under the Apache License, Version 2.0 (the "License");
%%% you may not use this file except in compliance with the License.
%%% You may obtain a copy of the License at
%%%
%%%     http://www.apache.org/licenses/LICENSE-2.0
%%%
%%% Unless required by applicable law or agreed to in writing, software
%%% distributed under the License is distributed on an "AS IS" BASIS,
%%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%% See the License for the specific language governing permissions and
%%% limitations under the License.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Test suite for the public API of the
%%% {@link //sigscale_im. sigscale_im} application.
%%%
-module(im_api_SUITE).
-copyright('Copyright (c) 2018-2019 SigScale Global Inc.').

%% common_test required callbacks
-export([suite/0, sequences/0, all/0]).
-export([init_per_suite/1, end_per_suite/1]).
-export([init_per_testcase/2, end_per_testcase/2]).

-compile(export_all).

-include("im.hrl").
-include_lib("xmerl/include/xmerl.hrl").
-include_lib("common_test/include/ct.hrl").
-include_lib("inets/include/mod_auth.hrl").

%%---------------------------------------------------------------------
%%  Test server callback functions
%%---------------------------------------------------------------------

-spec suite() -> DefaultData :: [tuple()].
%% Require variables and set default values for the suite.
%%
suite() ->
	[{timetrap, {minutes, 1}}].

-spec init_per_suite(Config :: [tuple()]) -> Config :: [tuple()].
%% Initiation before the whole suite.
%%
init_per_suite(Config) ->
	PrivDir = ?config(priv_dir, Config),
	ok = application:set_env(mnesia, dir, PrivDir),
	ok = im_test_lib:initialize_db(),
	ok = im_test_lib:start(),
	Config.

-spec end_per_suite(Config :: [tuple()]) -> any().
%% Cleanup after the whole suite.
%%
end_per_suite(_Config) ->
	ok = application:stop(sigscale_im),
	ok = application:stop(mnesia).

-spec init_per_testcase(TestCase :: atom(), Config :: [tuple()]) -> Config :: [tuple()].
%% Initiation before each test case.
%%
init_per_testcase(bulk_cm_geran, Config) ->
	NCC = integer_to_list(rand:uniform(8) - 1),
	BCC = integer_to_list(rand:uniform(8) - 1),
	LAC = integer_to_list(rand:uniform(65533)),
	MCC = integer_to_list(rand:uniform(999)),
	MNC = integer_to_list(rand:uniform(999)),
	RAC = integer_to_list(rand:uniform(256) - 1),
	RACC = integer_to_list(rand:uniform(8) - 1),
	F1 = fun F1(0, Acc) ->
				Acc;
			F1(N, Acc) ->
				GsmCell = {'gn:GsmCell', [{id, integer_to_list(N)}],
						[indent(7), {'gn:attributes', [],
								[indent(8), {'gn:userLabel', ["Cell " ++ generate_identity(5)]},
								indent(8), {'gn:cellIdentity', [integer_to_list(rand:uniform(65535))]},
								indent(8), {'gn:cellAllocation', [cell_allocation()]},
								indent(8), {'gn:ncc', [NCC]},
								indent(8), {'gn:bcc', [BCC]},
								indent(8), {'gn:lac', [LAC]},
								indent(8), {'gn:mcc', [MCC]},
								indent(8), {'gn:mnc', [MNC]},
								indent(8), {'gn:rac', [RAC]},
								indent(8), {'gn:racc', [RACC]},
								indent(8), {'gn:tsc', [BCC]},
								indent(8), {'gn:rxLevAccessMin', [integer_to_list(rand:uniform(64) - 1)]},
								indent(8), {'gn:msTxPwrMaxCCH', [integer_to_list(rand:uniform(32) - 1)]},
								indent(8), {'gn:rfHoppingEnabled', ["false"]},
								indent(8), {'gn:hoppingSequenceList', [],
								[indent(9), {'gn:hoppingSequence', [],
								[indent(10), {'gn:hsn', [], ["0"]}, indent(9)]}, indent(8)]},
								indent(8), {'gn:plmnPermitted', [NCC]}, indent(7)]},
								indent(7), {'gn:GsmRelation', [{id, "1"}],
								[indent(8), {'gn:attributes', [],
								[indent(9), {'gn:adjacentCell', ["SubNetwork="
								++ integer_to_list(rand:uniform(8)) ++ ",BssFunction="
								++ integer_to_list(rand:uniform(8)) ++ ",BtsSiteMgr="
								++ integer_to_list(rand:uniform(32)) ++ ",GsmCell="
								++ integer_to_list(rand:uniform(128))]},
								indent(8)]}, indent(7)]}, indent(6)]},
				F1(N - 1, [indent(6), GsmCell | Acc])
	end,
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				Latitude = "43." ++ integer_to_list(rand:uniform(9999)),
				Longitude = "-79." ++ integer_to_list(rand:uniform(9999)),
				SiteManager = {'gn:BtsSiteMgr', [{id, integer_to_list(N)}],
						[indent(6), {'gn:attributes', [],
						[indent(7), {'gn:userLabel', ["BTS " ++ integer_to_list(N)]},
						indent(7), {'gn:latitude', [Latitude]},
						indent(7), {'gn:longitude', [Longitude]},
						indent(7), {'gn:operationalState', ["enabled"]}, indent(6)]}]
						++ F1(3, []) ++ [indent(6), {'xn:VsDataContainer', [{id, "1"}],
						[indent(7), {'xn:attributes', [],
						[indent(8), {'xn:vsDataType', ["DataType " ++ integer_to_list(N)]},
						indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
						indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F(N - 1, [indent(5), SiteManager | Acc])
	end,
	SiteManager = F(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:gn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.656#geranNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC-sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["GSM"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,BssFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["BSS"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["BSC " ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'gn:BssFunction', [{id, "1"}],
									[indent(5), {'gn:attributes', [],
											[indent(6), {'gn:userLabel', ["BSC " ++ generate_identity(5)]},
													indent(5)]} | SiteManager] ++ [indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=9"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2018-12-26T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	GeranNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "geran.xml",
	file:write_file(XMLPath, GeranNrmXML),
	Config;
init_per_testcase(bulk_cm_utran, Config) ->
	F1 = fun F1(0, Acc) ->
				Acc;
			F1(N, Acc) ->
				Relation = {'un:UtranRelation', [{id, integer_to_list(N)}],
						[indent(7), {'un:attributes', [],
								[indent(8), {'un:adjacentCell', ["SubNetwork=1,UtranCellFDD=1,UtranRelation=2"]},
										indent(7)]},
						indent(7), {'xn:VsDataContainer', [{id, "1"}],
								[indent(8), {'xn:attributes', [],
										[indent(9), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(9), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(9), {'xn:vsData', []}, indent(8)]}, indent(7)]}, indent(6)]},
				F1(N - 1, [indent(6), Relation | Acc])
	end,
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				CellFDD = {'un:UtranCellFDD', [{id, integer_to_list(N)}],
						[indent(6), {'un:attributes', [],
								[indent(7), {'un:userLabel', [generate_identity(7)]},
								indent(7), {'un:localCellId', [integer_to_list(rand:uniform(268435455))]},
								indent(7), {'un:cellMode', ["FDDMode"]},
								indent(7), {'un:fachPower', [integer_to_list(rand:uniform(500) - 350)]},
								indent(7), {'un:relatedAntennaList', [],
										[indent(8), {'xn:dn', ["RncFunction=1,UtranCellFDD=1"]},
										indent(8), {'xn:dn', ["RncFunction=1,UtranCellFDD=2"]}, indent(7)]},
								indent(7), {'un:operationalState', ["enabled"]},
								indent(7), {'un:numOfHspdschs', [integer_to_list(rand:uniform(96) - 1)]}, indent(6)]}] ++ F1(3, []) ++
						[indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F(N - 1, [indent(5), CellFDD | Acc])
	end,
	CellFDD = F(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:un', "http://www.3gpp.org/ftp/specs/archive/28_series/28.653#utranNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["UMTS"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,NodeBFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["RNC"]},
											indent(6), {'xn:managedElementType', ["NodeB"]},
											indent(6), {'xn:managedElementType', ["IubLink"]},
											indent(6), {'xn:managedElementType', ["UtranCellTDDLcr"]},
											indent(6), {'xn:managedElementType', ["UtranCellTDDHcr"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["RNC" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'un:NodeBFunction', [{id, "1"}],
									[indent(5), {'un:attributes', [],
											[indent(6), {'un:userLabel', ["NodeB" ++ generate_identity(5)]},
											indent(6), {'un:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]},
											indent(6), {'un:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', [generate_identity(7)]},
													indent(7), {'xn:siteLatitude', ["23.5429"]},
													indent(7), {'xn:siteLongitude', ["95.6075"]},
													indent(7), {'xn:siteDescription', ["Fullerton Falls"]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["hut"]},
													indent(7), {'xn:powerInterface', ["battery+deisel"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=7"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'un:RncFunction', [{id, "1"}],
									[indent(5), {'un:attributes', [],
											[indent(6), {'un:userLabel', ["RNC " ++ generate_identity(5)]},
											indent(6), {'un:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]},
											indent(6), {'un:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', [generate_identity(7)]},
													indent(7), {'xn:siteLatitude', ["27.5429"]},
													indent(7), {'xn:siteLongitude', ["99.6075"]},
													indent(7), {'xn:siteDescription', ["Fullerton Falls"]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["hut"]},
													indent(7), {'xn:powerInterface', ["petrol"]}, indent(6)]},
											indent(6), {'un:mcc', ["999"]},
											indent(6), {'un:rncId', ["777"]}, indent(5)]},
									indent(5), {'un:EP_IuCS', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:farEndEntity', [generate_identity(5)]},
													indent(7), {'un:userLabel', ["IuCS " ++ generate_identity(5)]},
													indent(7), {'un:connMscNumber', ["3254"]}, indent(6)]}, indent(5)]},
									indent(5), {'un:EP_IuPS', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:farEndEntity', [generate_identity(5)]},
													indent(7), {'un:userLabel', ["IuPS " ++ generate_identity(5)]},
													indent(7), {'un:connSgsnNumber', ["9842"]}, indent(6)]}, indent(5)]},
									indent(5), {'un:EP_Iur', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:farEndEntity', [generate_identity(5)]},
													indent(7), {'un:userLabel', ["Iur " ++ generate_identity(5)]},
													indent(7), {'un:connectedRncId', [generate_identity(7)]},
															indent(6)]}, indent(5)]},
									indent(5), {'un:IubLink', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:userLabel', ["Iub " ++ generate_identity(5)]},
													indent(7), {'un:iubLinkUtranCell', [],
															[indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=1"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=2"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=3"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=4"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=5"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=6"]}, indent(7)]},
													indent(7), {'un:aEnd', [generate_identity(5)]},
													indent(7), {'un:zEnd', [generate_identity(5)]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=8"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'un:IubLink', [{id, "2"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:userLabel', ["Iub " ++ generate_identity(5)]},
													indent(7), {'un:iubLinkUtranCell', [],
															[indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellTDDLcr=1"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellTDDHcr=1"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=7"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=8"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=9"]},
															indent(8), {'xn:dn', ["DC=sigscale.net,SubNetwork=1,ManagedElement=1,RncFunction=1,UtranCellFDD=10"]}, indent(7)]},
													indent(7), {'un:aEnd', [generate_identity(5)]},
													indent(7), {'un:zEnd', [generate_identity(5)]}, indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=8"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'un:UtranCellTDDLcr', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:userLabel', ["TDDLcr " ++ generate_identity(5)]},
													indent(7), {'un:cId', ["3545"]},
													indent(7), {'un:pichPower', ["2.9"]},
													indent(7), {'un:relatedAntennaList', [],
															[indent(8), {'xn:dn', [generate_identity(7)]}, indent(7)]},
													indent(7), {'un:uarfcn', ["6874"]},
													indent(7), {'un:tstdIndicator', ["inactive"]}, indent(5)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=10"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'un:UtranCellTDDHcr', [{id, "1"}],
											[indent(6), {'un:attributes', [],
													[indent(7), {'un:userLabel', ["TDDHcr" ++ generate_identity(5)]},
													indent(7), {'un:cId', ["6871"]},
													indent(7), {'un:pichPower', ["1.5"]},
													indent(7), {'un:relatedAntennaList', [],
															[indent(8), {'xn:dn', [generate_identity(7)]}, indent(7)]},
													indent(7), {'un:uarfcn', ["3451"]},
													indent(7), {'un:tstdIndicator', ["SCH and PCCPCH allocated in a single TS"]},
															indent(6)]},
											indent(6), {'xn:VsDataContainer', [{id, "1"}],
													[indent(7), {'xn:attributes', [],
															[indent(8), {'xn:vsDataType', ["DataType=11"]},
															indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
															indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]}] ++ CellFDD ++
						[indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["RncHandOver"]},
										indent(8), {'xn:vsDataFormatVersion', ["NNRncHandOver.1.1"]},
										indent(8), {'vsRHO11:vsDataRHO', [],
												[indent(9), {'vsRHO11:abcMin', ["12"]},
												indent(9), {'vsRHO11:abcMax', ["34"]}, indent(8)]}, indent(7)]}, indent(6)]}, indent(5)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2018-12-27T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	UtranNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "utran.xml",
	file:write_file(XMLPath, UtranNrmXML),
	Config;
init_per_testcase(bulk_cm_eutran, Config) ->
	F1 = fun F1(0, Acc) ->
				Acc;
			F1(N, Acc) ->
				Relation = {'en:EUtranRelation', [{id, integer_to_list(N)}],
						[indent(7), {'en:attributes', [],
								[indent(8), {'en:adjacentCell', ["SubNetwork=1,ENBFunction=1,EUtranCellTDD=2"]},
										indent(7)]},
						indent(7), {'xn:VsDataContainer', [{id, "1"}],
								[indent(8), {'xn:attributes', [],
										[indent(9), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(9), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(9), {'xn:vsData', []}, indent(8)]}, indent(7)]}, indent(6)]},
				F1(N - 1, [indent(6), Relation | Acc])
	end,
	F2 = fun F2(0, Acc) ->
				Acc;
			F2(N, Acc) ->
				CellTDD = {'en:EUtranCellFDD', [{id, integer_to_list(N)}],
						[indent(6), {'en:attributes', [],
								[indent(7), {'en:userLabel', [generate_identity(10)]},
								indent(7), {'en:cellLocalId', ["251"]},
								indent(7), {'en:cellSize', ["medium"]},
								indent(7), {'en:pLMNIdList', [],
									[indent(8), {'en:pLMNId', [],
											[indent(9), {'en:mcc', ["959"]},
											indent(9), {'en:mnc', ["356"]}, indent(8)]}, indent(7)]},
								indent(7), {'en:cellAccessInfoList', [],
									[indent(8), {'en:cellAccessInfo', [],
											[indent(9), {'en:plmnId', [],
													[indent(10), {'en:mcc', ["199"]},
													indent(10), {'en:mnc', ["346"]}, indent(9)]},
											indent(9), {'en:tac', ["791642365"]},
											indent(9), {'en:cellId', ["65382131"]}, indent(8)]}, indent(7)]},
								indent(7), {'en:tac', ["964213205"]},
								indent(7), {'en:pci', ["420"]},
								indent(7), {'en:maximumTransmissionPower', ["635"]},
								indent(7), {'en:referenceSignalPower', ["237"]},
								indent(7), {'en:pb', ["196"]},
								indent(7), {'en:allowedAccessClasses', [],
									[indent(8), {'en:allowedAccessClassesElement', ["EmergencyCall"]}, indent(7)]},
								indent(7), {'en:earfcnDl', ["832"]},
								indent(7), {'en:earfcnUl', ["391"]}, indent(6)]}] ++ F1(3, []) ++
						[indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F2(N - 1, [indent(5), CellTDD | Acc])
	end,
	CellFDD = F2(10, []),
	F3 = fun F3(0, Acc) ->
				Acc;
			F3(N, Acc) ->
				CellTDD = {'en:EUtranCellTDD', [{id, integer_to_list(N)}],
						[indent(6), {'en:attributes', [],
								[indent(7), {'en:userLabel', [generate_identity(10)]},
								indent(7), {'en:cellLocalId', ["211"]},
								indent(7), {'en:cellSize', ["verysmall"]},
								indent(7), {'en:pLMNIdList', [],
									[indent(8), {'en:pLMNId', [],
											[indent(9), {'en:mcc', ["999"]},
											indent(9), {'en:mnc', ["456"]}, indent(8)]}, indent(7)]},
								indent(7), {'en:cellAccessInfoList', [],
									[indent(8), {'en:cellAccessInfo', [],
											[indent(9), {'en:plmnId', [],
													[indent(10), {'en:mcc', ["999"]},
													indent(10), {'en:mnc', ["446"]}, indent(9)]},
											indent(9), {'en:tac', ["795645365"]},
											indent(9), {'en:cellId', ["65987134"]}, indent(8)]}, indent(7)]},
								indent(7), {'en:tac', ["965213215"]},
								indent(7), {'en:pci', ["450"]},
								indent(7), {'en:maximumTransmissionPower', ["685"]},
								indent(7), {'en:referenceSignalPower', ["267"]},
								indent(7), {'en:pb', ["198"]},
								indent(7), {'en:allowedAccessClasses', [],
									[indent(8), {'en:allowedAccessClassesElement', ["SecurityServices"]}, indent(7)]},
								indent(7), {'en:earfcn', ["852"]},
								indent(7), {'en:sfAssignment', ["635"]},
								indent(7), {'en:specialSfPatterns', ["753"]}, indent(6)]}] ++ F1(3, []) ++
						[indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F3(N - 1, [indent(5), CellTDD | Acc])
	end,
	CellTDD = F3(10, []),
	EpRpEps = [indent(5), {'epc:EP_RP_EPS', [{id, 1}],
			[indent(6), {'epc:attributes', [],
					[indent(7), {'epc:farEndEntity', ["DC=sigscale.net,SubNetwork=4,"
							"ManagedEntity=1,MMEFunction=1,EP_RP_EPS=4"]},
					indent(7), {'epc:userLabel', ["EP-MME-1"]}, indent(6)]},
			indent(6), {'xn:VsDataContainer', [{id, "1"}],
					[indent(7), {'xn:attributes', [],
							[indent(8), {'xn:vsDataType', ["DataType=2"]},
							indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
							indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]}, indent(4)],
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:epc', "http://www.3gpp.org/ftp/specs/archive/28_series/28.709#epcNrm"},
			{'xmlns:en', "http://www.3gpp.org/ftp/specs/archive/28_series/28.659#eutranNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["GSM"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ENBFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["ENB"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'en:ENBFunction', [{id, "1"}],
									[indent(5), {'en:attributes', [],
											[indent(6), {'en:userLabel', ["France SN1"]},
											indent(6), {'en:iRATANRSwitch', ["true"]},
											indent(6), {'en:x2BlackList', [],
												[indent(7), {'xn:dn', ["ENBFunction=1,x2BlackList"]}, indent(6)]},
											indent(6), {'en:x2HOBlackList', [],
												[indent(7), {'xn:dn', ["ENBFunction=1,x2HOBlackList"]}, indent(6)]},
											indent(6), {'en:tceIDMappingInfoList', [],
												[indent(7), {'en:tceIDMappingInfo', []}, indent(6)]}, indent(5)]}] ++ CellFDD ++ CellTDD ++ EpRpEps},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2018-12-27T18:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	EutranNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "eutran.xml",
	file:write_file(XMLPath, EutranNrmXML),
	Config;
init_per_testcase(bulk_cm_epc, Config) ->
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				Eps = {'epc:EP_RP_EPS', [{id, integer_to_list(N)}],
						[indent(6), {'epc:attributes', [],
								[indent(7), {'epc:farEndEntity', ["FEE"]},
								indent(7), {'epc:userLabel', ["EP RP EPS " ++ integer_to_list(N)]}, indent(6)]},
						indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F(N - 1, [indent(5), Eps | Acc])
	end,
	Eps = F(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:epc', "http://www.3gpp.org/ftp/specs/archive/28_series/28.709#epcNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["EPC"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,EPDGFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["EPDG"]},
											indent(6), {'xn:managedElementType', ["MME"]},
											indent(6), {'xn:managedElementType', ["PGW"]},
											indent(6), {'xn:managedElementType', ["ServingGW"]},
											indent(6), {'xn:managedElementType', ["PCRF"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME 1" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'epc:EPDGFunction', [{id, "1"}],
									[indent(5), {'epc:attributes', [],
											[indent(6), {'epc:userLabel', ["EPDG 1"]},
											indent(6), {'epc:vnfParametersList', [],
												[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
												indent(7), {'xn:autoScalable', ["false"]}, indent(6)]}, indent(5)]} | Eps] ++ [indent(4)]},
							indent(4), {'epc:MMEFunction', [{id, "1"}],
									[indent(5), {'epc:attributes', [],
											[indent(6), {'epc:userLabel', ["MME 1"]},
											indent(6), {'epc:vnfParametersList', [],
												[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
												indent(7), {'xn:autoScalable', ["true"]}, indent(6)]},
											indent(6), {'epc:mMEC', ["89426"]}, indent(5)]} | Eps]},
							indent(4), {'epc:PCRFFunction', [{id, "1"}],
									[indent(5), {'epc:attributes', [],
											[indent(6), {'epc:userLabel', ["PCRF 1"]},
											indent(6), {'epc:linkList', [],
												[indent(7), {'xn:dn', [generate_identity(7)]}, indent(6)]}, indent(5)]} | Eps]},
							indent(4), {'epc:PGWFunction', [{id, "1"}],
									[indent(5), {'epc:attributes', [],
											[indent(6), {'epc:userLabel', ["PGW 1"]},
											indent(6), {'epc:vnfParametersList', [],
												[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
												indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]} | Eps]},
							indent(4), {'epc:ServingGWFunction', [{id, "1"}],
									[indent(5), {'epc:attributes', [],
											[indent(6), {'epc:userLabel', ["ServingGW 1"]},
											indent(6), {'epc:tACList', [],
												[indent(7), {'epc:tAC', ["568912"]}, indent(6)]}, indent(5)]} | Eps]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2018-12-27T23:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	EpcNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "epc.xml",
	file:write_file(XMLPath, EpcNrmXML),
	Config;
init_per_testcase(bulk_cm_core, Config) ->
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				Iucs = {'cn:IucsLink', [{id, integer_to_list(N)}],
						[indent(6), {'cn:attributes', [],
								[indent(7), {'cn:userLabel', [generate_identity(7)]},
								indent(7), {'cn:vnfParametersList', [],
										[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
										indent(8), {'xn:autoScalable', ["true"]}, indent(7)]},
								indent(7), {'cn:numOfHspdschs', ["0"]}, indent(6)]}] ++
						[indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F(N - 1, [indent(5), Iucs | Acc])
	end,
	IucsLink = F(10, []),
	F1 = fun F1(0, Acc) ->
				Acc;
			F1(N, Acc) ->
				Iups = {'cn:IupsLink', [{id, integer_to_list(N)}],
						[indent(6), {'cn:attributes', [],
								[indent(7), {'cn:userLabel', ["IuPS " ++ integer_to_list(N)]},
								indent(7), {'cn:vnfParametersList', [],
										[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
										indent(8), {'xn:autoScalable', ["true"]}, indent(7)]},
								indent(7), {'cn:connectedHNBGW', [generate_identity(5)]}, indent(6)]}] ++
						[indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F1(N - 1, [indent(5), Iups | Acc])
	end,
	IupsLink = F1(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:cn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.703#coreNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=2,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "2"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["Core"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=2,MscFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["MscServer"]},
											indent(6), {'xn:managedElementType', ["CsMgw"]},
											indent(6), {'xn:managedElementType', ["Ggsn"]},
											indent(6), {'xn:managedElementType', ["Sgsn"]},
											indent(6), {'xn:managedElementType', ["Auc"]},
											indent(6), {'xn:managedElementType', ["Hlr"]},
											indent(6), {'xn:managedElementType', ["Eir"]},
											indent(6), {'xn:managedElementType', ["MnpSrf"]},
											indent(6), {'xn:managedElementType', ["Cgcf"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME " ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=2,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'cn:MscServerFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["MSC" ++ generate_identity(5)]},
											indent(6), {'cn:mccList', [],
													[indent(7), {'cn:em', ["8564132"]}, indent(6)]},
											indent(6), {'cn:mncList', [],
													[indent(7), {'cn:em', ["9365425"]}, indent(6)]},
											indent(6), {'cn:lacList', [],
													[indent(7), {'cn:em', ["518567"]}, indent(6)]},
											indent(6), {'cn:sacList', [],
													[indent(7), {'cn:em', ["3879476"]}, indent(6)]},
											indent(6), {'cn:mscId', ["9613247"]},
											indent(6), {'cn:mscServerFunctionGsmCell', [],
													[indent(7), {'xn:dn', ["ENBFunction=1,mscServerFunctionGsmCell"]},
															indent(6)]},
											indent(6), {'cn:mscServerFunctionExternalGsmCell', [],
													[indent(7), {'xn:dn', ["ENBFunction=1,mscServerFunctionExternalGsmCell"]},
															indent(6)]},
											indent(6), {'cn:mscServerFunctionCsMgwFunction', [],
													[indent(7), {'xn:dn', ["ENBFunction=1,mscServerFunctionCsMgwFunction"]},
															indent(6)]},
											indent(6), {'cn:nriList', [],
													[indent(7), {'cn:em', ["1565372"]}]}, indent(5)]} | IucsLink]},
							indent(4), {'cn:CsMgwFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["CSMGW" ++ generate_identity(5)]},
											indent(6), {'cn:csMgwFunctionMscServerFunction', [generate_identity(7)]},
											indent(6), {'cn:csMgwFunctionIucsLink', [],
													[indent(7), {'xn:dn', ["CsMgwFunction=1,csMgwFunctionIucsLink"]},
															indent(6)]},
											indent(6), {'cn:csMgwFunctionALink', [],
													[indent(7), {'xn:dn', ["ManagedElement=1,csMgwFunctionALink"]},
															indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=2"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}]},
							indent(4), {'cn:GgsnFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["GGSN" ++ generate_identity(5)]},
											indent(6), {'cn:proceduralStatus', [],
													[indent(7), {'sm:proceduralStatusElement', ["initializing"]},
															indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=2"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}]},
							indent(4), {'cn:SgsnFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["SGSN" ++ generate_identity(5)]},
											indent(6), {'cn:mccList', [],
													[indent(7), {'cn:em', ["8725634"]}, indent(6)]},
											indent(6), {'cn:mncList', [],
													[indent(7), {'cn:em', ["365874"]}, indent(6)]},
											indent(6), {'cn:lacList', [],
													[indent(7), {'cn:em', ["879425"]}, indent(6)]},
											indent(6), {'cn:racList', [],
													[indent(7), {'cn:em', ["795346"]}, indent(6)]},
											indent(6), {'cn:sacList', [],
													[indent(7), {'cn:em', ["3859426"]}, indent(6)]},
											indent(6), {'cn:sgsnId', ["9613641"]},
											indent(6), {'cn:sgsnFunctionGsmCell', [],
													[indent(7), {'xn:dn', ["ManagedElement=1,SgsnFunction=1"]},
															indent(6)]},
											indent(6), {'cn:sgsnFunctionExternalGsmCell', [],
													[indent(7), {'xn:dn', ["ManagedElement=1,sgsnFunctionExternalGsmCell"]},
															indent(6)]},
											indent(6), {'cn:sgsnFunctionSgsnPool', ["sgsnfsgnspool"]},
											indent(6), {'cn:nriList', [],
													[indent(7), {'cn:em', ["1585374"]}]},
											indent(6), {'cn:proceduralStatus', [],
													[indent(7), {'sm:proceduralStatusElement', ["reporting"]}, indent(6)]},
															 indent(5)]} | IupsLink]},
							indent(4), {'cn:AucFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["AUC" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=3"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}]},
							indent(4), {'cn:HlrFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["HLR" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=4"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}]},
							indent(4), {'cn:EirFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["EIR" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=5"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}]},
							indent(4), {'cn:MnpSrfFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["MNP_SRF" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=6"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}]},
							indent(4), {'cn:CgfFunction', [{id, "1"}],
									[indent(5), {'cn:attributes', [],
											[indent(6), {'cn:userLabel', ["CGF" ++ generate_identity(5)]},
											indent(6), {'cn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=7"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2019-01-05T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	CoreNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "core.xml",
	file:write_file(XMLPath, CoreNrmXML),
	Config;
init_per_testcase(bulk_cm_ims, Config) ->
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:im', "http://www.3gpp.org/ftp/specs/archive/28_series/28.706#imsNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["IMS"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,AsFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["AS"]},
											indent(6), {'xn:managedElementType', ["HSS"]},
											indent(6), {'xn:managedElementType', ["ICSCF"]},
											indent(6), {'xn:managedElementType', ["PCSCF"]},
											indent(6), {'xn:managedElementType', ["SCSCF"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME " ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]},
													indent(5)]}, indent(4)]},
							indent(4), {'im:ASFunction', [{id, "1"}],
									[indent(5), {'im:attributes', [],
											[indent(6), {'im:userLabel', ["AS " ++ generate_identity(5)]},
											indent(6), {'im:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=1"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'im:HSSFunction', [{id, "1"}],
									[indent(5), {'im:attributes', [],
											[indent(6), {'im:userLabel', ["HSS " ++ generate_identity(5)]},
											indent(6), {'im:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=2"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'im:ICSCFFunction', [{id, "1"}],
									[indent(5), {'im:attributes', [],
											[indent(6), {'im:userLabel', ["ICSCF " ++ generate_identity(5)]},
											indent(6), {'im:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=3"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'im:PCSCFFunction', [{id, "1"}],
									[indent(5), {'im:attributes', [],
											[indent(6), {'im:userLabel', ["PCSCF " ++ generate_identity(5)]},
											indent(6), {'im:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=4"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'im:SCSCFFunction', [{id, "1"}],
									[indent(5), {'im:attributes', [],
											[indent(6), {'im:userLabel', ["SCSCF " ++ generate_identity(5)]},
											indent(6), {'im:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=5"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]}, indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2019-01-05T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	ImsNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "ims.xml",
	file:write_file(XMLPath, ImsNrmXML),
	Config;
init_per_testcase(bulk_cm_pee, Config) ->
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				MonitoredEntity = {'pee:PEEMonitoredEntity', [{id, integer_to_list(N)}],
						[indent(5), {'pee:attributes', [],
								[indent(6), {'pee:mEId', ["ME" ++ generate_identity(5)]}, indent(5)]},
						indent(5), {'pee:PEEMEDescription', [],
								[indent(6), {'pee:siteIdentification', [generate_identity(7)]},
								indent(6), {'pee:siteLatitude', ["23.54294"]},
								indent(6), {'pee:siteLongitude', ["90.60755"]},
								indent(6), {'pee:siteDescription', ["Fullerton Falls"]},
								indent(6), {'pee:equipmentType', ["5G"]},
								indent(6), {'pee:environmentType', ["hut"]},
								indent(6), {'pee:powerInterface', ["battery+deisel"]},
								indent(6), {'pee:xcuDguDescription', ["DGUv1"]},
								indent(6), {'pee:sensorDescription', ["SensorPack-3"]},
								indent(6), {'pee:vSRmsDescription', ["Acme"]}, indent(5)]},
						indent(5), {'pee:PEEConfigInformation', [],
								[indent(6), {'pee:powerMinThreshold', ["500"]},
								indent(6), {'pee:powerMaxThreshold', ["2500"]},
								indent(6), {'pee:temperatureMinThreshold', [integer_to_list(N)]},
								indent(6), {'pee:temperatureMaxThreshold', ["26"]},
								indent(6), {'pee:voltageMinThreshold', ["202"]},
								indent(6), {'pee:voltageMaxThreshold', ["245"]},
								indent(6), {'pee:currentMinThreshold', ["15"]},
								indent(6), {'pee:currentMaxThreshold', ["35"]},
								indent(6), {'pee:humidityMinThreshold', [integer_to_list(N)]},
								indent(6), {'pee:humidityMaxThreshold', ["79"]}, indent(5)]}, indent(4)]},
				F(N - 1, [indent(4), MonitoredEntity | Acc])
	end,
	PeeME = F(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:im', "http://www.3gpp.org/ftp/specs/archive/28_series/28.706#imsNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["Sites"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,PEEMonitoredEntity=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["PEEMonitoredEntity"]}, indent(5)]},
									indent(5), {'xn:userLabel', [generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]},
													indent(5)]}, indent(4)]}] ++ PeeME ++ [indent(3)]}, indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2019-01-05T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	PeeNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "pee.xml",
	file:write_file(XMLPath, PeeNrmXML),
	Config;
init_per_testcase(bulk_cm_epcn3ai, Config) ->
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:epcn3ai', "http://www.3gpp.org/ftp/specs/archive/28_series/28.616#epcn3aiNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["EPCN3AI"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,3GPPAAAServerFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["3GPPAAAServer"]},
											indent(6), {'xn:managedElementType', ["3GPPAAAProxy"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME 1" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.0"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'epcn3ai:3GPPAAAServerFunction', [{id, "1"}],
									[indent(5), {'epcn3ai:attributes', [],
											[indent(6), {'epcn3ai:userLabel', ["3GPPAAAServer 1"]},
											indent(6), {'epcn3ai:vnfParametersList', [],
												[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
												indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=1"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'epcn3ai:3GPPAAAProxyFunction', [{id, "1"}],
									[indent(5), {'epcn3ai:attributes', [],
											[indent(6), {'epcn3ai:userLabel', ["3GPPAAAProxy 1"]},
											indent(6), {'epcn3ai:vnfParametersList', [],
												[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
												indent(7), {'xn:autoScalable', ["true"]}, indent(6)]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=2"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=3"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2019-08-19T23:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	EpcNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "epcn3ai.xml",
	file:write_file(XMLPath, EpcNrmXML),
	Config;
init_per_testcase(bulk_cm_inventory1, Config) ->
	F = fun F(0, Acc) ->
				Acc;
			F(N, Acc) ->
				InventoryUnit = {'in:InventoryUnit', [{id, integer_to_list(N)}],
						[indent(5), {'in:attributes', [],
								[indent(6), {'in:inventoryUnitType', ["Shelf"]},
								indent(6), {'in:vendorUnitFamilyType', ["Card"]},
								indent(6), {'in:vendorUnitTypeNumber', [integer_to_list(rand:uniform(500))]},
								indent(6), {'in:versionNumber', [integer_to_list(rand:uniform(500))]},
								indent(6), {'in:vendorName', ["Acme"]},
								indent(6), {'in:serialNumber', [generate_identity(7)]},
								indent(6), {'in:dateOfManufacture', ["2018-10-04"]},
								indent(6), {'in:dateOfLastService', ["2019-08-14"]},
								indent(6), {'in:unitPosition', ["Rack=" ++ integer_to_list(N)]}, indent(6)]},
						indent(5), {'xn:VsDataContainer', [{id, "1"}],
								[indent(6), {'xn:attributes', [],
										[indent(7), {'xn:vsDataType', ["DataType=" ++ integer_to_list(N)]},
										indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
										indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
				F(N - 1, [indent(4), InventoryUnit | Acc])
	end,
	InventoryUnits = F(10, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:in', "http://www.3gpp.org/ftp/specs/archive/28_series/28.633#inventoryNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["UMTS"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', [generate_identity(7)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', ["Asquith"]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
											indent(6), {'xn:dn', ["SubNetwork=1,ManagedElement=1,NodeBFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.1"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["NodeB"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["nodeb-bay-bloor"]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', ["Bay and Bloor"]},
									indent(5), {'xn:swVersion', ["13.0.4"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]}]
							++ InventoryUnits ++
							[indent(4), {'in:TmaInventoryUnit', [{id, "1"}],
									[indent(5), {'in:attributes', [],
											[indent(6), {'in:inventoryUnitType', ["Amplifier"]},
											indent(6), {'in:vendorUnitFamilyType', ["TMA"]},
											indent(6), {'in:vendorUnitTypeNumber', ["099"]},
											indent(6), {'in:versionNumber', ["101"]},
											indent(6), {'in:vendorName', ["Acme"]},
											indent(6), {'in:serialNumber', ["1900054793"]},
											indent(6), {'in:dateOfManufacture', ["2017-02-21"]},
											indent(6), {'in:dateOfLastService', ["2019-08-14"]},
											indent(6), {'in:unitPosition', ["Rack=2,Shelf=1"]},
											indent(6), {'in:tmaNumberOfNonLinearGainValues', ["10"]},
											indent(6), {'in:tmaNonLinearGainValue', ["16"]},
											indent(6), {'in:tmaAntennaModelNumber', ["777"]},
											indent(6), {'in:tmaInstallersId', ["00534"]}, indent(5)]},
									indent(5), {'xn:VsDataContainer', [{id, "1"}],
											[indent(6), {'xn:attributes', [],
													[indent(7), {'xn:vsDataType', ["DataType=7"]},
													indent(7), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
													indent(7), {'xn:vsData', []}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'in:AntennaInventoryUnit', [{id, "1"}],
									[indent(5), {'in:attributes', [],
											[indent(6), {'in:inventoryUnitType', ["Sector"]},
											indent(6), {'in:vendorUnitFamilyType', ["Antenna"]},
											indent(6), {'in:versionNumber', ["230"]},
											indent(6), {'in:vendorName', ["Acme"]},
											indent(6), {'in:serialNumber', ["4683660231"]},
											indent(6), {'in:dateOfManufacture', ["2015-01-04"]},
											indent(6), {'in:dateOfLastService', ["2019-02-28"]},
											indent(6), {'in:mechanicalOffset', ["10"]},
											indent(6), {'in:baseElevation', ["126"]},
											indent(6), {'in:minTiltValue', ["0"]},
											indent(6), {'in:maxTiltValue', ["150"]},
											indent(6), {'in:latitude', ["43.6697"]}, indent(5)]}, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=6"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]}, indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2019-09-20T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	InventoryNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "inventory1.xml",
	file:write_file(XMLPath, InventoryNrmXML),
	Config;
init_per_testcase(bulk_cm_inventory2, Config) ->
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:in', "http://www.3gpp.org/ftp/specs/archive/28_series/28.633#inventoryNrmAlt2"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "1"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', [generate_identity(7)]},
							indent(4), {'xn:userDefinedNetworkType', ["UMTS"]},
							indent(4), {'xn:setOfMcc', ["999"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', ["ems-umts-1"]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
											indent(6), {'xn:dn', ["SubNetwork=1,ManagedElement=2,NodeBFunction=1"]}, indent(5)]},
									indent(5), {'xn:swVersion', ["1.0"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', ["SubNetwork=1,ManagedElement=1"]},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["RNC"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["rnc" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.5.31"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["SubNetwork=1,ManagementNode=1"]}, indent(5)]}, indent(4)]},
							indent(4), {'in:InventoryUnitNE', [{id, "1"}],
									[indent(5), {'in:attributes', [],
											[indent(6), {'in:neId', ["TitanRNC"]},
											indent(6), {'in:productName', ["Titan Radio Network Controller"]},
											indent(6), {'in:customerIdentifier', ["SigScale"]},
											indent(6), {'in:vendorName', ["Acme"]},
											indent(6), {'in:productType', ["VNF"]},
											indent(6), {'in:salesUniqueId', ["TRNC001"]},
											indent(6), {'in:operatorUniqueName', ["rnc-asquith-a"]},
											indent(6), {'in:siteId', ["1"]},
											indent(6), {'in:additionalInformation', ["BA:3,CF:77"]},
											indent(6), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
											indent(6), {'in:hWList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitHw=1"]},
													indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitHw=1,InventoryUnitHw=1"]},
													indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitHw=1,InventoryUnitHw=1,InventoryUnitHw=1"]},
													indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitHw=1,InventoryUnitHw=1,InventoryUnitHw=2"]}, indent(6)]},
											indent(6), {'in:sWList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitSw=1"]}, indent(6)]},
											indent(6), {'in:lICList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitLic=1"]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'in:InventoryUnitHw', [{id, "1"}],
									[indent(5), {'in:attributes', [],
											[indent(6), {'in:hwId', [generate_identity(5)]},
											indent(6), {'in:hwType', ["Chassis"]},
											indent(6), {'in:hwName', ["CAB787"]},
											indent(6), {'in:hwVersion', ["47B.1"]},
											indent(6), {'in:vendorName', ["Acme"]},
											indent(6), {'in:salesUniqueId', ["PN104562"]},
											indent(6), {'in:hwUnitLocation', ["Rack=1"]},
											indent(6), {'in:model', ["NA"]},
											indent(6), {'in:modificationDate', ["2019-02-14"]},
											indent(6), {'in:additionalInformation', ["CD:0,BF:3,EH:16"]},
											indent(6), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
											indent(6), {'in:nEList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitNE=1"]}, indent(6)]},
											indent(6), {'in:sWList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitSw=1"]}, indent(6)]}, indent(5)]},
									indent(5), {'in:InventoryUnitHw', [{id, "1"}],
											[indent(6), {'in:attributes', [],
													[indent(7), {'in:hwId', [generate_identity(5)]},
													indent(7), {'in:hwType', ["ATCA"]},
													indent(7), {'in:hwName', ["CG009"]},
													indent(7), {'in:hwVersion', ["12C"]},
													indent(7), {'in:vendorName', ["Acme"]},
													indent(7), {'in:salesUniqueId', ["PN101132"]},
													indent(7), {'in:hwUnitLocation', ["Rack=1,Shelf=1"]},
													indent(7), {'in:model', ["ATCA10"]},
													indent(7), {'in:modificationDate', ["2019-04-11"]},
													indent(7), {'in:additionalInformation', ["AA:00"]},
													indent(7), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
													indent(7), {'in:nEList', [],
															[indent(8), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitNE=1"]}, indent(7)]},
													indent(7), {'in:sWList', [],
															[indent(8), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitSw=1"]}, indent(7)]}, indent(6)]},
											indent(6), {'in:InventoryUnitHw', [{id, "1"}],
													[indent(7), {'in:attributes', [],
															[indent(8), {'in:hwId', [generate_identity(5)]},
															indent(8), {'in:hwType', ["Processor"]},
															indent(8), {'in:hwName', ["PC234"]},
															indent(8), {'in:hwVersion', ["672.65"]},
															indent(8), {'in:vendorName', ["Acme"]},
															indent(8), {'in:salesUniqueId', ["PN108067"]},
															indent(8), {'in:hwUnitLocation', ["Rack=1,Shelf=1,Slot=1"]},
															indent(8), {'in:model', ["ETH110"]},
															indent(8), {'in:modificationDate', ["2019-03-07"]},
															indent(8), {'in:manualDataEntry', ["active"]},
															indent(8), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
															indent(8), {'in:nEList', [],
																	[indent(9), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitNE=1"]}, indent(8)]},
															indent(8), {'in:sWList', [],
																	[indent(9), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitSw=1"]}, indent(8)]}, indent(7)]}, indent(6)]},
											indent(6), {'in:InventoryUnitHw', [{id, "2"}],
													[indent(7), {'in:attributes', [],
															[indent(8), {'in:hwId', [generate_identity(5)]},
															indent(8), {'in:hwType', ["Ethernet"]},
															indent(8), {'in:hwName', ["NC100"]},
															indent(8), {'in:hwVersion', ["47A.2"]},
															indent(8), {'in:vendorName', ["Acme"]},
															indent(8), {'in:salesUniqueId', ["PN103905"]},
															indent(8), {'in:hwUnitLocation', ["Rack=1,Shelf=1,Slot=5"]},
															indent(8), {'in:model', ["ETH110"]},
															indent(8), {'in:modificationDate', ["2019-04-13"]},
															indent(8), {'in:manualDataEntry', ["active"]},
															indent(8), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
															indent(8), {'in:nEList', [],
																	[indent(9), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitNE=1"]}, indent(8)]},
															indent(8), {'in:sWList', [],
																	[indent(9), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitSw=1"]}, indent(8)]}, indent(7)]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'in:InventoryUnitSw', [{id, "1"}],
									[indent(5), {'in:attributes', [],
											[indent(6), {'in:swId', ["848cd544-8317-4cc2-abed-e4a6b93fa81b"]},
											indent(6), {'in:swName', ["UMTS RNC Base"]},
											indent(6), {'in:swVersion', ["32.2.41"]},
											indent(6), {'in:vendorName', ["Acme"]},
											indent(6), {'in:salesUniqueId', ["SW009215"]},
											indent(6), {'in:classification', ["R45p1"]},
											indent(6), {'in:swStatus', ["primary"]},
											indent(6), {'in:swInstallationTime', ["2019-04-13T02:13:45.345Z"]},
											indent(6), {'in:mFunction', ["SubNetwork=1,ManagedElement=1,RncFunction=1"]},
											indent(6), {'in:nEList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitNE=1"]},
															indent(6)]},
											indent(6), {'in:hWList', [],
													[indent(7), {'xn:dn',["SubNetwork=1,ManagedElement=1,InventoryUnitHw=1,InventoryUnitHw=1,InventoryUnitHw=1"]}, indent(6)]},
											indent(6), {'in:lICList', [],
													[indent(7), {'xn:dn', ["SubNetwork=1,ManagedElement=1,InventoryUnitLic=1"]},
															indent(6)]}, indent(5)]}, indent(4)]}, indent(3)]}, indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2018-12-27T12:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
         [indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	InventoryNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "inventory2.xml",
	file:write_file(XMLPath, InventoryNrmXML),
	Config;
init_per_testcase(bulk_cm_nr, Config) ->
	F1 = fun F1(0, Acc) ->
				Acc;
			F1(N, Acc) ->
				NRCellDU = {'nn:NRCellDU', [{id, integer_to_list(N)}],
						[indent(6), {'nn:attributes', [],
								[indent(7), {'nn:userLabel', ["nr-cell-du-" ++ integer_to_list(N)]},
								indent(7), {'nn:vnfParametersList', [],
										[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
										indent(8), {'xn:autoScalable', ["false"]}, indent(7)]},
								indent(7), {'nn:operationalState', ["enabled"]},
								indent(7), {'nn:cellState', ["IDLE"]},
								indent(7), {'nn:pLMNIdList', [],
										[indent(8), {'en:pLMNId', [],
												[indent(9), {'en:mcc', [integer_to_list(167 + N)]},
												indent(9), {'en:mnc', [integer_to_list(772 + N)]},
														indent(8)]}, indent(7)]},
								indent(7), {'nn:nRpci', [integer_to_list(500 + N)]},
								indent(7), {'nn:nRTac', [integer_to_list(167772 + N)]},
								indent(7), {'nn:arfcnDL', [integer_to_list(5 + N)]},
								indent(7), {'nn:bSChannelBwDL', [integer_to_list(-15 + N)]},
								indent(7), {'nn:bSChannelBwSUL', [integer_to_list(2 + N)]}, indent(6)]},
						indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["NRCDUHandOver=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F1(N - 1, [indent(5), NRCellDU | Acc])
	end,
	NRCellDUs = F1(5, []),
	F2 = fun F2(0, Acc) ->
				Acc;
			F2(N, Acc) ->
				NRSectorCarrier = {'nn:NRSectorCarrier', [{id, integer_to_list(N)}],
						[indent(6), {'nn:attributes', [],
								[indent(7), {'nn:userLabel', ["nr-sector-carrier-" ++ integer_to_list(N)]},
								indent(7), {'nn:vnfParametersList', [],
										[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
										indent(8), {'xn:autoScalable', ["true"]}, indent(7)]},
								indent(7), {'nn:txDirection', ["DL and UL"]},
								indent(7), {'nn:configuredMaxTxPower', [integer_to_list(95 + N)]},
								indent(7), {'nn:arfcnUL', [integer_to_list(5 + N)]},
								indent(7), {'nn:bSChannelBwDL', [integer_to_list(-135 + N)]},
								indent(7), {'nn:bSChannelBwUL', [integer_to_list(693 + N)]}, indent(6)]},
						indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["NRSCHandOver=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F2(N - 1, [indent(5), NRSectorCarrier | Acc])
	end,
	NRSectorCarriers = F2(5, []),
	F3 = fun F3(0, Acc) ->
				Acc;
			F3(N, Acc) ->
				NRCellCU = {'nn:NRCellCU', [{id, integer_to_list(N)}],
						[indent(6), {'nn:attributes', [],
								[indent(7), {'nn:userLabel', ["nr-cell-cu-" ++ integer_to_list(N)]},
								indent(7), {'nn:vnfParametersList', [],
										[indent(8), {'xn:vnfInstanceId', [generate_identity(7)]},
										indent(8), {'xn:autoScalable', ["true"]}, indent(7)]},
								indent(7), {'nn:nCGI', [integer_to_list(687194767 - N)]},
								indent(7), {'nn:pLMNIdList', [],
										[indent(8), {'en:pLMNId', [],
												[indent(9), {'en:mcc', [integer_to_list(137 + N)]},
												indent(9), {'en:mnc', [integer_to_list(752 + N)]}, indent(8)]}, indent(7)]},
								indent(7), {'nn:rRMPolicyNSSIId',
										["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=1,NRCellCU=1"]},
								indent(7), {'nn:rRMPolicyRatio', [integer_to_list(1672 + N)]},
								indent(7), {'nn:rRMPolicy', [generate_identity(5)]}, indent(6)]},
						indent(6), {'xn:VsDataContainer', [{id, "1"}],
								[indent(7), {'xn:attributes', [],
										[indent(8), {'xn:vsDataType', ["NRCellCUHandOver=" ++ integer_to_list(N)]},
										indent(8), {'xn:vsDataFormatVersion', [generate_identity(5)]},
										indent(8), {'xn:vsData', []}, indent(7)]}, indent(6)]}, indent(5)]},
				F3(N - 1, [indent(5), NRCellCU | Acc])
	end,
	NRCellCUs = F3(7, []),
	FileAttributes = [{xmlns, "http://www.3gpp.org/ftp/specs/archive/32_series/32.616#configData"},
			{'xmlns:xn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.623#genericNrm"},
			{'xmlns:en', "http://www.3gpp.org/ftp/specs/archive/28_series/28.659#eutranNrm"},
			{'xmlns:nn', "http://www.3gpp.org/ftp/specs/archive/28_series/28.541#nrNrm"}],
	FileHeader = {fileHeader, [{fileFormatVersion, "32.616 V15.0"},
			{senderName, "DC=sigscale.net,SubNetwork=8,ManagementNode=1,IRPAgent=1"},
			{vendorName, "Acme"}], []},
	ConfigData = {configData, [{dnPrefix, "DC=sigscale.net"}],
			[indent(2), {'xn:SubNetwork', [{id, "8"}],
					[indent(3), {'xn:attributes', [],
							[indent(4), {'xn:userLabel', ["sn-8"]},
							indent(4), {'xn:userDefinedNetworkType', ["NR"]},
							indent(4), {'xn:setOfMcc', ["582"]}, indent(3)]},
					indent(3), {'xn:ManagementNode', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:userLabel', ["ems-nr-1"]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:managedElements', [],
											[indent(6), {'xn:dn', ["DC=sigscale.net,SubNetwork=8,ManagedElement=1"]},
													indent(5)]},
									indent(5), {'xn:swVersion', ["1.1"]}, indent(4)]}, indent(3)]},
					indent(3), {'xn:ManagedElement', [{id, "1"}],
							[indent(4), {'xn:attributes', [],
									[indent(5), {'xn:dnPrefix', []},
									indent(5), {'xn:managedElementTypeList', [],
											[indent(6), {'xn:managedElementType', ["GNBDU"]},
											indent(6), {'xn:managedElementType', ["GNBCUCP"]},
											indent(6), {'xn:managedElementType', ["GNBCUUP"]}, indent(5)]},
									indent(5), {'xn:userLabel', ["ME 1" ++ generate_identity(5)]},
									indent(5), {'xn:vendorName', [generate_identity(7)]},
									indent(5), {'xn:userDefinedState', ["commercial"]},
									indent(5), {'xn:locationName', [generate_identity(7)]},
									indent(5), {'xn:swVersion', ["1.5.31"]},
									indent(5), {'xn:managedBy', [],
											[indent(6), {'xn:dn', ["DC=sigscale.net,SubNetwork=8,ManagementNode=1"]},
													indent(5)]}, indent(4)]},
							indent(4), {'nn:GNBDUFunction', [{id, "1"}],
									[indent(5), {'nn:attributes', [],
											[indent(6), {'nn:userLabel', ["gnbdu-asquith"]},
											indent(6), {'nn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]},
											indent(6), {'nn:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', ["ABC-3768"]},
													indent(7), {'xn:siteLatitude', ["59.6714"]},
													indent(7), {'xn:siteLongitude', ["-62.3862"]},
													indent(7), {'xn:siteDescription', [generate_identity(7)]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["Indoor"]},
													indent(7), {'xn:powerInterface', ["A3"]}, indent(6)]},
											indent(6), {'nn:gnbId', ["4294967"]},
											indent(6), {'nn:gnbIdLength', ["25"]},
											indent(6), {'nn:gnbDuId', ["68719476"]}, indent(5)]},
									indent(5), {'nn:EP_F1C', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=1,EP_F1C=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_F1U', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUUPFunction=1,EP_F1U=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUUP-1"]}, indent(6)]},
															indent(5)]}] ++ NRCellDUs ++ NRSectorCarriers ++ [indent(4)]},
							indent(4), {'nn:GNBCUCPFunction', [{id, "1"}],
									[indent(5), {'nn:attributes', [],
											[indent(6), {'nn:userLabel', ["gnbcucp-asquith"]},
											indent(6), {'nn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["false"]}, indent(6)]},
											indent(6), {'nn:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', ["KRC-3768"]},
													indent(7), {'xn:siteLatitude', ["65.3754"]},
													indent(7), {'xn:siteLongitude', ["-22.3862"]},
													indent(7), {'xn:siteDescription', [generate_identity(7)]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["Indoor"]},
													indent(7), {'xn:powerInterface', ["A3"]}, indent(6)]},
											indent(6), {'nn:gnbId', ["429496"]},
											indent(6), {'nn:gnbIdLength', ["28"]},
											indent(6), {'nn:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["129"]},
															indent(8), {'en:mnc', ["631"]}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_F1C', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBDUFunction=1,EP_F1C=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBDU-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_E1', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUUPFunction=1,EP_E1=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUUP-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_XnC', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=2,EP_XnC=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-2"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_X2C', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_X2C=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_NgC', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_NgC=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]},
															indent(5)]}] ++ NRCellCUs ++ [indent(4)]},
							indent(4), {'nn:GNBCUCPFunction', [{id, "2"}],
									[indent(5), {'nn:attributes', [],
											[indent(6), {'nn:userLabel', ["gnbcucp-2"]},
											indent(6), {'nn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]},
											indent(6), {'nn:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', ["KDH-3768"]},
													indent(7), {'xn:siteLatitude', ["55.2714"]},
													indent(7), {'xn:siteLongitude', ["-32.6852"]},
													indent(7), {'xn:siteDescription', [generate_identity(7)]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["Indoor"]},
													indent(7), {'xn:powerInterface', ["A3"]}, indent(6)]},
											indent(6), {'nn:gnbId', ["328496"]},
											indent(6), {'nn:gnbIdLength', ["26"]},
											indent(6), {'nn:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["367"]},
															indent(8), {'en:mnc', ["723"]}, indent(7)]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_XnC', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=1,EP_XnC=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-1"]}, indent(6)]},
															indent(5)]}, indent(4)]},
							indent(4), {'nn:GNBCUUPFunction', [{id, "1"}],
									[indent(5), {'nn:attributes', [],
											[indent(6), {'nn:userLabel', ["gnbcuup-asquith"]},
											indent(6), {'nn:vnfParametersList', [],
													[indent(7), {'xn:vnfInstanceId', [generate_identity(7)]},
													indent(7), {'xn:autoScalable', ["true"]}, indent(6)]},
											indent(6), {'nn:peeParametersList', [],
													[indent(7), {'xn:siteIdentification', ["NAH-6318"]},
													indent(7), {'xn:siteLatitude', ["75.3784"]},
													indent(7), {'xn:siteLongitude', ["-42.3882"]},
													indent(7), {'xn:siteDescription', [generate_identity(7)]},
													indent(7), {'xn:equipmentType', ["3G"]},
													indent(7), {'xn:environmentType', ["Indoor"]},
													indent(7), {'xn:powerInterface', ["A3"]}, indent(6)]},
											indent(6), {'nn:pLMNIdList', [],
													[indent(7), {'en:pLMNId', [],
															[indent(8), {'en:mcc', ["527"]},
															indent(8), {'en:mnc', ["8623"]}, indent(7)]}, indent(6)]},
											indent(6), {'nn:gnbId', ["429496729"]},
											indent(6), {'nn:gnbIdLength', ["30"]}, indent(5)]},
									indent(5), {'nn:EP_E1', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBCUCPFunction=1,EP_E1=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBCUCP-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_F1U', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=8,ManagedElement=1,GNBDUFunction=1,EP_F1U=1"]},
													indent(7), {'nn:userLabel', ["EP-GNBDU-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_XnU', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_XnU=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_NgU', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_NgU=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_X2U', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity',
															["DC=sigscale.net,SubNetwork=6,ManagedElement=1,ENBFunction=1,EP_X2U=1"]},
													indent(7), {'nn:userLabel', ["EP-ENB-1"]}, indent(6)]}, indent(5)]},
									indent(5), {'nn:EP_S1U', [{id, "1"}],
											[indent(6), {'nn:attributes', [],
													[indent(7), {'nn:farEndEntity', [generate_identity(7)]},
													indent(7), {'nn:userLabel', ["EP-S1U-1"]}, indent(6)]}, indent(5)]}, indent(4)]},
							indent(4), {'xn:VsDataContainer', [{id, "1"}],
									[indent(5), {'xn:attributes', [],
											[indent(6), {'xn:vsDataType', ["DataType=26"]},
											indent(6), {'xn:vsDataFormatVersion', [generate_identity(5) ++ ".1.1"]},
											indent(6), {'xn:vsData', []}, indent(5)]}, indent(4)]}, indent(3)]},
													indent(2)]}, indent(1)]},
	FileFooter = {fileFooter, [{dateTime, "2020-05-12T23:00:00Z"}], []},
	Simple = [indent(0), {bulkCmConfigDataFile, FileAttributes,
			[indent(1), FileHeader, indent(1), ConfigData, indent(1), FileFooter, indent(0)]}],
	NrNrmXML = lists:flatten(xmerl:export_simple(Simple, xmerl_xml, [])),
	PrivDir = ?config(priv_dir, Config),
	XMLPath = PrivDir ++ "/" ++ "nr.xml",
	file:write_file(XMLPath, NrNrmXML),
	Config;
init_per_testcase(_TestCase, Config) ->
   Config.

-spec end_per_testcase(TestCase :: atom(), Config :: [tuple()]) -> any().
%% Cleanup after each test case.
%%
end_per_testcase(_TestCase, _Config) ->
	ok.

-spec sequences() -> Sequences :: [{SeqName :: atom(), Testcases :: [atom()]}].
%% Group test cases into a test sequence.
%%
sequences() ->
	[].

-spec all() -> TestCases :: [Case :: atom()].
%% Returns a list of all test cases in this test suite.
%%
all() ->
	[bulk_cm_geran, bulk_cm_utran, bulk_cm_eutran, bulk_cm_epc, bulk_cm_core,
			bulk_cm_ims, bulk_cm_pee, bulk_cm_epcn3ai, bulk_cm_inventory1,
			bulk_cm_inventory2, bulk_cm_nr,
			add_rule, get_rule, get_rules, delete_rule, get_pee].

%%---------------------------------------------------------------------
%%  Test cases
%%---------------------------------------------------------------------

bulk_cm_geran() ->
	[{userdata, [{doc, "Import bulk CM for geran network resources"}]}].

bulk_cm_geran(Config) ->
	PrivDir = ?config(priv_dir, Config),
	GeranXML = PrivDir ++ "/" ++ "geran.xml",
	ok = im:import(GeranXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(GeranXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = BssContent,
			attributes = BssAttr} = lists:keyfind('gn:BssFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = BssId} = lists:keyfind(id,
			#xmlAttribute.name, BssAttr),
	BssName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",BssFunction=", BssId]),
	#xmlElement{content = BtsContent,
			attributes = BtsAttr} = lists:keyfind('gn:BtsSiteMgr',
			#xmlElement.name, BssContent),
	#xmlAttribute{value = BtsId} = lists:keyfind(id,
			#xmlAttribute.name, BtsAttr),
	BtsName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId,
			",BssFunction=", BssId, ",BtsSiteMgr=", BtsId]),
	#xmlElement{content = _Cell,
			attributes = CellAttr} = lists:keyfind('gn:GsmCell',
			#xmlElement.name, BtsContent),
	#xmlAttribute{value = CellId} = lists:keyfind(id,
			#xmlAttribute.name, CellAttr),
	CellName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",BssFunction=", BssId,
			",BtsSiteMgr=", BtsId, ",GsmCell=", CellId]),
	{ok, #resource{name = BssName}} = im:get_resource_name(BssName),
	{ok, #resource{name = BtsName}} = im:get_resource_name(BtsName),
	{ok, #resource{name = CellName}} = im:get_resource_name(CellName).

bulk_cm_utran() ->
	[{userdata, [{doc, "Import bulk CM for utran network resources"}]}].

bulk_cm_utran(Config) ->
	PrivDir = ?config(priv_dir, Config),
	UtranXML = PrivDir ++ "/" ++ "utran.xml",
	ok = im:import(UtranXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(UtranXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _NodeBContent,
			attributes = NodeBAttr} = lists:keyfind('un:NodeBFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = NodeBId} = lists:keyfind(id,
			#xmlAttribute.name, NodeBAttr),
	#xmlElement{content = RncContent,
			attributes = RncAttr} = lists:keyfind('un:RncFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = RncId} = lists:keyfind(id,
			#xmlAttribute.name, RncAttr),
	#xmlElement{content = _TddLcrContent,
			attributes = TddLcrAttr} = lists:keyfind('un:UtranCellTDDLcr',
			#xmlElement.name, RncContent),
	#xmlAttribute{value = TddLcrId} = lists:keyfind(id,
			#xmlAttribute.name, TddLcrAttr),
	#xmlElement{content = _TddHcrContent,
			attributes = TddHcrAttr} = lists:keyfind('un:UtranCellTDDHcr',
			#xmlElement.name, RncContent),
	#xmlAttribute{value = TddHcrId} = lists:keyfind(id,
			#xmlAttribute.name, TddHcrAttr),
	#xmlElement{content = _IubContent,
			attributes = IubAttr} = lists:keyfind('un:IubLink',
			#xmlElement.name, RncContent),
	#xmlAttribute{value = IubId} = lists:keyfind(id,
			#xmlAttribute.name, IubAttr),
	#xmlElement{content = _FddContent,
			attributes = FddAttr} = lists:keyfind('un:UtranCellFDD',
			#xmlElement.name, RncContent),
	#xmlAttribute{value = FddId} = lists:keyfind(id,
			#xmlAttribute.name, FddAttr),
	TddLcrName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId,
			",RncFunction=", RncId, ",UtranCellTDDLcr=", TddLcrId]),
	TddHcrName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId,
			",RncFunction=", RncId, ",UtranCellTDDHcr=", TddHcrId]),
	IubName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId,
			",RncFunction=", RncId, ",IubLink=", IubId]),
	NodeBName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",NodeBFunction=", NodeBId]),
	RncName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",RncFunction=", RncId]),
	FddName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId,
			",RncFunction=", RncId, ",UtranCellFDD=", FddId]),
	{ok, #resource{name = TddLcrName}} = im:get_resource_name(TddLcrName),
	{ok, #resource{name = TddHcrName}} = im:get_resource_name(TddHcrName),
	{ok, #resource{name = IubName}} = im:get_resource_name(IubName),
	{ok, #resource{name = NodeBName}} = im:get_resource_name(NodeBName),
	{ok, #resource{name = RncName}} = im:get_resource_name(RncName),
	{ok, #resource{name = FddName}} = im:get_resource_name(FddName).

bulk_cm_eutran() ->
	[{userdata, [{doc, "Import bulk CM for eutran network resources"}]}].

bulk_cm_eutran(Config) ->
	PrivDir = ?config(priv_dir, Config),
	EutranXML = PrivDir ++ "/" ++ "eutran.xml",
	ok = im:import(EutranXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(EutranXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id, #xmlAttribute.name, MeAttr),
	#xmlElement{content = EnbContent,
			attributes = EnbAttr} = lists:keyfind('en:ENBFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = EnbId} = lists:keyfind(id,
			#xmlAttribute.name, EnbAttr),
	#xmlElement{content = _FddContent,
			attributes = FddAttr} = lists:keyfind('en:EUtranCellFDD',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = FddId} = lists:keyfind(id,
			#xmlAttribute.name, FddAttr),
	#xmlElement{content = _TddContent,
			attributes = TddAttr} = lists:keyfind('en:EUtranCellTDD',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = TddId} = lists:keyfind(id,
			#xmlAttribute.name, TddAttr),
	#xmlElement{content = _EpRpEpsContent,
			attributes = EpRpEpsAttr} = lists:keyfind('epc:EP_RP_EPS',
			#xmlElement.name, EnbContent),
	#xmlAttribute{value = EpRpEpsId} = lists:keyfind(id,
			#xmlAttribute.name, EpRpEpsAttr),
	EnbName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId]),
	FddName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EUtranCellFDD=", FddId]),
	TddName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EUtranCellTDD=", TddId]),
	EpRpEpsName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ENBFunction=", EnbId,
			",EP_RP_EPS=", EpRpEpsId]),
	{ok, #resource{name = EnbName}} = im:get_resource_name(EnbName),
	{ok, #resource{name = FddName}} = im:get_resource_name(FddName),
	{ok, #resource{name = TddName}} = im:get_resource_name(TddName),
	{ok, #resource{name = EpRpEpsName}} = im:get_resource_name(EpRpEpsName).

bulk_cm_epc() ->
	[{userdata, [{doc, "Import bulk CM for epc network resources"}]}].

bulk_cm_epc(Config) ->
	PrivDir = ?config(priv_dir, Config),
	EpcXML = PrivDir ++ "/" ++ "epc.xml",
	ok = im:import(EpcXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(EpcXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _EpdgContent,
			attributes = EpdgAttr} = lists:keyfind('epc:EPDGFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = EpdgId} = lists:keyfind(id,
			#xmlAttribute.name, EpdgAttr),
	#xmlElement{content = _MmeContent,
			attributes = MmeAttr} = lists:keyfind('epc:MMEFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = MmeId} = lists:keyfind(id,
			#xmlAttribute.name, MmeAttr),
	#xmlElement{content = _PcrfContent,
			attributes = PcrfAttr} = lists:keyfind('epc:PCRFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = PcrfId} = lists:keyfind(id,
			#xmlAttribute.name, PcrfAttr),
	#xmlElement{content = _PgwContent,
			attributes = PgwAttr} = lists:keyfind('epc:PGWFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = PgwId} = lists:keyfind(id,
			#xmlAttribute.name, PgwAttr),
	#xmlElement{content = _ServingGwContent,
			attributes = ServingGwAttr} = lists:keyfind('epc:ServingGWFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = ServingGwId} = lists:keyfind(id,
			#xmlAttribute.name, ServingGwAttr),
	EpdgName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",EPDGFunction=", EpdgId]),
	MmeName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",MMEFunction=", MmeId]),
	PcrfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCRFFunction=", PcrfId]),
	PgwName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PGWFunction=", PgwId]),
	ServingGwName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ServingGWFunction=", ServingGwId]),
	{ok, #resource{name = EpdgName}} = im:get_resource_name(EpdgName),
	{ok, #resource{name = MmeName}} = im:get_resource_name(MmeName),
	{ok, #resource{name = PcrfName}} = im:get_resource_name(PcrfName),
	{ok, #resource{name = PgwName}} = im:get_resource_name(PgwName),
	{ok, #resource{name = ServingGwName}} = im:get_resource_name(ServingGwName).

bulk_cm_core() ->
	[{userdata, [{doc, "Import bulk CM for core network resources"}]}].

bulk_cm_core(Config) ->
	PrivDir = ?config(priv_dir, Config),
	CoreXML = PrivDir ++ "/" ++ "core.xml",
	ok = im:import(CoreXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(CoreXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _MscContent,
			attributes = MscAttr} = lists:keyfind('cn:MscServerFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = MscId} = lists:keyfind(id,
			#xmlAttribute.name, MscAttr),
	#xmlElement{content = _MgwContent,
			attributes = MgwAttr} = lists:keyfind('cn:CsMgwFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = MgwId} = lists:keyfind(id,
			#xmlAttribute.name, MgwAttr),
	#xmlElement{content = _GgsnContent,
			attributes = GgsnAttr} = lists:keyfind('cn:GgsnFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = GgsnId} = lists:keyfind(id,
			#xmlAttribute.name, GgsnAttr),
	#xmlElement{content = _SgsnContent,
			attributes = SgsnAttr} = lists:keyfind('cn:SgsnFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = SgsnId} = lists:keyfind(id,
			#xmlAttribute.name, SgsnAttr),
	#xmlElement{content = _AucContent,
			attributes = AucAttr} = lists:keyfind('cn:AucFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AucId} = lists:keyfind(id,
			#xmlAttribute.name, AucAttr),
	#xmlElement{content = _HlrContent,
			attributes = HlrAttr} = lists:keyfind('cn:HlrFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = HlrId} = lists:keyfind(id,
			#xmlAttribute.name, HlrAttr),
	#xmlElement{content = _EirContent,
			attributes = EirAttr} = lists:keyfind('cn:EirFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = EirId} = lists:keyfind(id,
			#xmlAttribute.name, EirAttr),
	#xmlElement{content = _MnpSrfContent,
			attributes = MnpSrfAttr} = lists:keyfind('cn:MnpSrfFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = MnpSrfId} = lists:keyfind(id,
			#xmlAttribute.name, MnpSrfAttr),
	#xmlElement{content = _CgfContent,
			attributes = CgfAttr} = lists:keyfind('cn:CgfFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = CgfId} = lists:keyfind(id,
			#xmlAttribute.name, CgfAttr),
	MscName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",MscServerFunction=", MscId]),
	MgwName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",CsMgwFunction=", MgwId]),
	GgsnName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GgsnFunction=", GgsnId]),
	SgsnName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SgsnFunction=", SgsnId]),
	AucName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AucFunction=", AucId]),
	HlrName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",HlrFunction=", HlrId]),
	EirName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",EirFunction=", EirId]),
	MnpSrfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",MnpSrfFunction=", MnpSrfId]),
	CgfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",CgfFunction=", CgfId]),
	{ok, #resource{name = MscName}} = im:get_resource_name(MscName),
	{ok, #resource{name = MgwName}} = im:get_resource_name(MgwName),
	{ok, #resource{name = GgsnName}} = im:get_resource_name(GgsnName),
	{ok, #resource{name = SgsnName}} = im:get_resource_name(SgsnName),
	{ok, #resource{name = AucName}} = im:get_resource_name(AucName),
	{ok, #resource{name = HlrName}} = im:get_resource_name(HlrName),
	{ok, #resource{name = EirName}} = im:get_resource_name(EirName),
	{ok, #resource{name = MnpSrfName}} = im:get_resource_name(MnpSrfName),
	{ok, #resource{name = CgfName}} = im:get_resource_name(CgfName).

bulk_cm_ims() ->
	[{userdata, [{doc, "Import bulk CM for ims network resources"}]}].

bulk_cm_ims(Config) ->
	PrivDir = ?config(priv_dir, Config),
	ImsXML = PrivDir ++ "/" ++ "ims.xml",
	ok = im:import(ImsXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(ImsXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _AsContent,
			attributes = AsAttr} = lists:keyfind('im:ASFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AsId} = lists:keyfind(id,
			#xmlAttribute.name, AsAttr),
	#xmlElement{content = _HssContent,
			attributes = HssAttr} = lists:keyfind('im:HSSFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = HssId} = lists:keyfind(id,
			#xmlAttribute.name, HssAttr),
	#xmlElement{content = _IcscfContent,
			attributes = IcscfAttr} = lists:keyfind('im:ICSCFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = IcscfId} = lists:keyfind(id,
			#xmlAttribute.name, IcscfAttr),
	#xmlElement{content = _PcscfContent,
			attributes = PcscfAttr} = lists:keyfind('im:PCSCFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = PcscfId} = lists:keyfind(id,
			#xmlAttribute.name, PcscfAttr),
	#xmlElement{content = _ScscfContent,
			attributes = ScscfAttr} = lists:keyfind('im:SCSCFFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = ScscfId} = lists:keyfind(id,
			#xmlAttribute.name, ScscfAttr),
	AsName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ASFunction=", AsId]),
	HssName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",HSSFunction=", HssId]),
	IcscfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",ICSCFFunction=", IcscfId]),
	PcscfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PCSCFFunction=", PcscfId]),
	ScscfName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",SCSCFFunction=", ScscfId]),
	{ok, #resource{name = AsName}} = im:get_resource_name(AsName),
	{ok, #resource{name = HssName}} = im:get_resource_name(HssName),
	{ok, #resource{name = IcscfName}} = im:get_resource_name(IcscfName),
	{ok, #resource{name = PcscfName}} = im:get_resource_name(PcscfName),
	{ok, #resource{name = ScscfName}} = im:get_resource_name(ScscfName).

bulk_cm_pee() ->
	[{userdata, [{doc, "Import bulk CM for pee network resources"}]}].

bulk_cm_pee(Config) ->
	PrivDir = ?config(priv_dir, Config),
	PeeXML = PrivDir ++ "/" ++ "pee.xml",
	ok = im:import(PeeXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(PeeXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = PeeMeContent,
			attributes = _PeeMeAttr} = lists:keyfind('pee:PEEMonitoredEntity',
			#xmlElement.name, MeContent),
	#xmlElement{content = AttrContent,
			attributes = _Attr} = lists:keyfind('pee:attributes',
			#xmlElement.name, PeeMeContent),
	#xmlElement{content = [IdContent],
			attributes = _IdAttr} = lists:keyfind('pee:mEId',
			#xmlElement.name, AttrContent),
	Id = element(5, IdContent),
	PeeMeName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",PEEMonitoredEntity.mEId=", Id]),
	{ok, #resource{name = PeeMeName}} = im:get_resource_name(PeeMeName).

bulk_cm_epcn3ai() ->
	[{userdata, [{doc, "Import bulk CM for epcn3ai network resources"}]}].

bulk_cm_epcn3ai(Config) ->
	PrivDir = ?config(priv_dir, Config),
	Epcn3aiXML = PrivDir ++ "/" ++ "epcn3ai.xml",
	ok = im:import(Epcn3aiXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(Epcn3aiXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _AaaServerContent,
			attributes = AaaServerAttr} = lists:keyfind('epcn3ai:3GPPAAAServerFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AaaServerId} = lists:keyfind(id,
			#xmlAttribute.name, AaaServerAttr),
	#xmlElement{content = _AaaProxyContent,
			attributes = AaaProxyAttr} = lists:keyfind('epcn3ai:3GPPAAAProxyFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AaaProxyId} = lists:keyfind(id,
			#xmlAttribute.name, AaaProxyAttr),
	AaaServerName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",3GPPAAAServerFunction=", AaaServerId]),
	AaaProxyName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",3GPPAAAProxyFunction=", AaaProxyId]),
	{ok, #resource{name = AaaServerName}} = im:get_resource_name(AaaServerName),
	{ok, #resource{name = AaaProxyName}} = im:get_resource_name(AaaProxyName).

bulk_cm_inventory1(Config) ->
	PrivDir = ?config(priv_dir, Config),
	InventoryXML = PrivDir ++ "/" ++ "inventory1.xml",
	ok = im:import(InventoryXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(InventoryXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _InventoryUnitContent,
			attributes = InventoryUnitAttr} = lists:keyfind('in:InventoryUnit',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = InventoryUnitId} = lists:keyfind(id,
			#xmlAttribute.name, InventoryUnitAttr),
	#xmlElement{content = _TmaIUContent,
			attributes = TmaIUAttr} = lists:keyfind('in:TmaInventoryUnit',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = TmaIUId} = lists:keyfind(id,
			#xmlAttribute.name, TmaIUAttr),
	#xmlElement{content = _AntennaIUContent,
			attributes = AntennaIUAttr} = lists:keyfind('in:AntennaInventoryUnit',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = AntennaIUId} = lists:keyfind(id,
			#xmlAttribute.name, AntennaIUAttr),
	InventoryUnitName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",InventoryUnit=", InventoryUnitId]),
	TmaIUName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",TmaInventoryUnit=", TmaIUId]),
	AntennaIUName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AntennaInventoryUnit=", AntennaIUId]),
	{ok, #resource{name = InventoryUnitName}} = im:get_resource_name(InventoryUnitName),
	{ok, #resource{name = TmaIUName}} = im:get_resource_name(TmaIUName),
	{ok, #resource{name = AntennaIUName}} = im:get_resource_name(AntennaIUName).

bulk_cm_inventory2(Config) ->
	PrivDir = ?config(priv_dir, Config),
	InventoryXML = PrivDir ++ "/" ++ "inventory2.xml",
	ok = im:import(InventoryXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(InventoryXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = _IUNEContent,
			attributes = IUNEAttr} = lists:keyfind('in:InventoryUnitNE',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = IUNEId} = lists:keyfind(id,
			#xmlAttribute.name, IUNEAttr),
	#xmlElement{content = IUHwContent1,
			attributes = IUHwAttr1} = lists:keyfind('in:InventoryUnitHw',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = IUHwId1} = lists:keyfind(id,
			#xmlAttribute.name, IUHwAttr1),
	#xmlElement{content = _IUHwContent2,
			attributes = IUHwAttr2} = lists:keyfind('in:InventoryUnitHw',
			#xmlElement.name, IUHwContent1),
	#xmlAttribute{value = IUHwId2} = lists:keyfind(id,
			#xmlAttribute.name, IUHwAttr2),
	#xmlElement{content = _IUSwContent,
			attributes = IUSwAttr} = lists:keyfind('in:InventoryUnitSw',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = IUSwId} = lists:keyfind(id,
			#xmlAttribute.name, IUSwAttr),
	IUNEName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",InventoryUnitNE=", IUNEId]),
	IUHwName1 = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",InventoryUnitHw=", IUHwId1]),
	IUHwName2 = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",InventoryUnitHw=", IUHwId1,
			",InventoryUnitHw=", IUHwId2]),
	IUSwName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",AntennaInventoryUnit=", IUSwId]),
	{ok, #resource{name = IUNEName}} = im:get_resource_name(IUNEName),
	{ok, #resource{name = IUHwName1}} = im:get_resource_name(IUHwName1),
	{ok, #resource{name = IUHwName2}} = im:get_resource_name(IUHwName2),
	{ok, #resource{name = IUSwName}} = im:get_resource_name(IUSwName).

bulk_cm_nr() ->
	[{userdata, [{doc, "Import bulk CM for nr network resources"}]}].

bulk_cm_nr(Config) ->
	PrivDir = ?config(priv_dir, Config),
	NrXML = PrivDir ++ "/" ++ "nr.xml",
	ok = im:import(NrXML),
	{#xmlElement{content = BulkCmContent}, []} = xmerl_scan:file(NrXML),
	#xmlElement{content = ConfigContent,
			attributes = ConfigAttr} = lists:keyfind(configData,
			#xmlElement.name, BulkCmContent),
	#xmlAttribute{value = DnPrefix} = lists:keyfind(dnPrefix,
			#xmlAttribute.name, ConfigAttr),
	#xmlElement{content = SubnetContent,
			attributes = SubnetAttr} = lists:keyfind('xn:SubNetwork',
			#xmlElement.name, ConfigContent),
	#xmlAttribute{value = SubnetId} = lists:keyfind(id,
			#xmlAttribute.name, SubnetAttr),
	#xmlElement{content = MeContent,
			attributes = MeAttr} = lists:keyfind('xn:ManagedElement',
			#xmlElement.name, SubnetContent),
	#xmlAttribute{value = MeId} = lists:keyfind(id,
			#xmlAttribute.name, MeAttr),
	#xmlElement{content = GNBDUContent,
			attributes = GNBDUAttr} = lists:keyfind('nn:GNBDUFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = GNBDUId} = lists:keyfind(id,
			#xmlAttribute.name, GNBDUAttr),
	#xmlElement{content = _NRCellDUContent,
			attributes = NRCellDUAttr} = lists:keyfind('nn:NRCellDU',
			#xmlElement.name, GNBDUContent),
	#xmlAttribute{value = NRCellDUId} = lists:keyfind(id,
			#xmlAttribute.name, NRCellDUAttr),
	#xmlElement{content = _NRSectorCarrierContent,
			attributes = NRSectorCarrierAttr} = lists:keyfind('nn:NRSectorCarrier',
			#xmlElement.name, GNBDUContent),
	#xmlAttribute{value = NRSectorCarrierId} = lists:keyfind(id,
			#xmlAttribute.name, NRSectorCarrierAttr),
	#xmlElement{content = _EpF1cContent,
			attributes = EpF1cAttr} = lists:keyfind('nn:EP_F1C',
			#xmlElement.name, GNBDUContent),
	#xmlAttribute{value = EpF1cId} = lists:keyfind(id,
			#xmlAttribute.name, EpF1cAttr),
	#xmlElement{content = _EpF1uContent,
			attributes = EpF1uAttr} = lists:keyfind('nn:EP_F1U',
			#xmlElement.name, GNBDUContent),
	#xmlAttribute{value = EpF1uId} = lists:keyfind(id,
			#xmlAttribute.name, EpF1uAttr),
	GNBDUName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBDUFunction=", GNBDUId]),
	NRCellDUName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBDUFunction=", GNBDUId,
			",NRCellDU=", NRCellDUId]),
	NRSectorCarrierName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBDUFunction=", GNBDUId,
			",NRSectorCarrier=", NRSectorCarrierId]),
	EpF1cName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBDUFunction=", GNBDUId,
			",EP_F1C=", EpF1cId]),
	EpF1uName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBDUFunction=", GNBDUId,
			",EP_F1U=", EpF1uId]),
	#xmlElement{content = GNBCUCPContent,
			attributes = GNBCUCPAttr} = lists:keyfind('nn:GNBCUCPFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = GNBCUCPId} = lists:keyfind(id,
			#xmlAttribute.name, GNBCUCPAttr),
	#xmlElement{content = _NRCellDUContent,
			attributes = NRCellCUAttr} = lists:keyfind('nn:NRCellCU',
			#xmlElement.name, GNBCUCPContent),
	#xmlAttribute{value = NRCellCUId} = lists:keyfind(id,
			#xmlAttribute.name, NRCellCUAttr),
	#xmlElement{content = _EpE1Content,
			attributes = EpE1Attr} = lists:keyfind('nn:EP_E1',
			#xmlElement.name, GNBCUCPContent),
	#xmlAttribute{value = EpE1Id} = lists:keyfind(id,
			#xmlAttribute.name, EpE1Attr),
	#xmlElement{content = _EpXncContent,
			attributes = EpXncAttr} = lists:keyfind('nn:EP_XnC',
			#xmlElement.name, GNBCUCPContent),
	#xmlAttribute{value = EpXncId} = lists:keyfind(id,
			#xmlAttribute.name, EpXncAttr),
	#xmlElement{content = _EpX2cContent,
			attributes = EpX2cAttr} = lists:keyfind('nn:EP_X2C',
			#xmlElement.name, GNBCUCPContent),
	#xmlAttribute{value = EpX2cId} = lists:keyfind(id,
			#xmlAttribute.name, EpX2cAttr),
	#xmlElement{content = _EpNgcContent,
			attributes = EpNgcAttr} = lists:keyfind('nn:EP_NgC',
			#xmlElement.name, GNBCUCPContent),
	#xmlAttribute{value = EpNgcId} = lists:keyfind(id,
			#xmlAttribute.name, EpNgcAttr),
	GNBCUCPName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId]),
	NRCellCUName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId,
			",NRCellCU=", NRCellCUId]),
	EpE1Name = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId,
			",EP_E1=", EpE1Id]),
	EpXncName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId,
			",EP_XnC=", EpXncId]),
	EpX2cName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId,
			",EP_X2C=", EpX2cId]),
	EpNgcName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUCPFunction=", GNBCUCPId,
			",EP_NgC=", EpNgcId]),
	#xmlElement{content = GNBCUUPContent,
			attributes = GNBCUUPAttr} = lists:keyfind('nn:GNBCUUPFunction',
			#xmlElement.name, MeContent),
	#xmlAttribute{value = GNBCUUPId} = lists:keyfind(id,
			#xmlAttribute.name, GNBCUUPAttr),
	#xmlElement{content = _EpXnuContent,
			attributes = EpXnuAttr} = lists:keyfind('nn:EP_XnU',
			#xmlElement.name, GNBCUUPContent),
	#xmlAttribute{value = EpXnuId} = lists:keyfind(id,
			#xmlAttribute.name, EpXnuAttr),
	#xmlElement{content = _EpNguContent,
			attributes = EpNguAttr} = lists:keyfind('nn:EP_NgU',
			#xmlElement.name, GNBCUUPContent),
	#xmlAttribute{value = EpNguId} = lists:keyfind(id,
			#xmlAttribute.name, EpNguAttr),
	#xmlElement{content = _EpX2uContent,
			attributes = EpX2uAttr} = lists:keyfind('nn:EP_X2U',
			#xmlElement.name, GNBCUUPContent),
	#xmlAttribute{value = EpX2uId} = lists:keyfind(id,
			#xmlAttribute.name, EpX2uAttr),
	#xmlElement{content = _EpS1uContent,
			attributes = EpS1uAttr} = lists:keyfind('nn:EP_S1U',
			#xmlElement.name, GNBCUUPContent),
	#xmlAttribute{value = EpS1uId} = lists:keyfind(id,
			#xmlAttribute.name, EpS1uAttr),
	GNBCUUPName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUUPFunction=", GNBCUUPId]),
	EpXnuName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUUPFunction=", GNBCUUPId,
			",EP_XnU=", EpXnuId]),
	EpNguName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUUPFunction=", GNBCUUPId,
			",EP_NgU=", EpNguId]),
	EpX2uName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUUPFunction=", GNBCUUPId,
			",EP_X2U=", EpX2uId]),
	EpS1uName = lists:flatten([DnPrefix, ",SubNetwork=", SubnetId,
			",ManagedElement=", MeId, ",GNBCUUPFunction=", GNBCUUPId,
			",EP_S1U=", EpS1uId]),
	{ok, #resource{name = GNBCUUPName}} = im:get_resource_name(GNBCUUPName),
	{ok, #resource{name = EpXnuName}} = im:get_resource_name(EpXnuName),
	{ok, #resource{name = EpNguName}} = im:get_resource_name(EpNguName),
	{ok, #resource{name = EpX2uName}} = im:get_resource_name(EpX2uName),
	{ok, #resource{name = EpS1uName}} = im:get_resource_name(EpS1uName),
%%%GNBDU
	{ok, #resource{name = GNBDUName}} = im:get_resource_name(GNBDUName),
	{ok, #resource{name = NRCellDUName}} = im:get_resource_name(NRCellDUName),
	{ok, #resource{name = NRSectorCarrierName}} = im:get_resource_name(NRSectorCarrierName),
	{ok, #resource{name = EpF1cName}} = im:get_resource_name(EpF1cName),
	{ok, #resource{name = EpF1uName}} = im:get_resource_name(EpF1uName),
%%%GNBCUCP
	{ok, #resource{name = GNBCUCPName}} = im:get_resource_name(GNBCUCPName),
	{ok, #resource{name = NRCellCUName}} = im:get_resource_name(NRCellCUName),
	{ok, #resource{name = EpE1Name}} = im:get_resource_name(EpE1Name),
	{ok, #resource{name = EpXncName}} = im:get_resource_name(EpXncName),
	{ok, #resource{name = EpX2cName}} = im:get_resource_name(EpX2cName),
	{ok, #resource{name = EpNgcName}} = im:get_resource_name(EpNgcName).

add_rule() ->
	[{userdata, [{doc, "Add PEE matching rules"}]}].

add_rule(_Config) ->
	Rule = fun(DN1) ->
			[{DN1, [], ['$_']}]
	end,
	{ok, #pee_rule{}} = im:add_rule(Rule, "testing").

get_rule() ->
	[{userdata, [{doc, "Get a specific rule"}]}].

get_rule(_Config) ->
	Rule = fun(DN) ->
				[{DN, [], ['$_']}]
	end,
	{ok, #pee_rule{id = Id} = PeeRule} = im:add_rule(Rule, "testing"),
	{ok, PeeRule} = im:get_rule(Id).

get_rules() ->
	[{userdata, [{doc, "Get all the rules"}]}].

get_rules(_Config) ->
	Rule = fun(DN) ->
				[{DN, [], ['$_']}]
	end,
	{ok, #pee_rule{}} = im:add_rule(Rule, "testing"),
	PeeRuleIds = im:get_rule(),
	PeeRules = [im:get_rule(Id) || Id <- PeeRuleIds],
	F = fun({ok, #pee_rule{}}) ->
				true;
			(_P) ->
				false
	end,
	true = lists:all(F, PeeRules).

delete_rule() ->
	[{userdata, [{doc, "Delete a specific rule"}]}].

delete_rule(_Config) ->
	Rule = fun(DN) ->
				[{DN, [], ['$_']}]
	end,
	{ok, #pee_rule{id = Id}} = im:add_rule(Rule, "testing"),
	ok = im:delete_rule(Id),
	{error, not_found} = im:get_rule(Id).

get_pee() ->
	[{userdata, [{doc, "Get matching PEE CMON entity(s) for a given Distinguished Name"}]}].

get_pee(_Config) ->
	SiteId = generate_identity(7),
	DomainComponent = "DC=sigscale.net,SubNetwork=1,ManagedElement=1,PEEMonitoredEntity.mEId=",
	ok = fill_resource(10),
	PeeResource = #resource{name = DomainComponent ++ SiteId,
			category = "PEE", class_type = "PEEMonitoredEntity", base_type = "ResourceFunction",
			characteristic = [#resource_char{name = "mEId", class_type = undefined, schema = undefined, value = SiteId},
			#resource_char{name = "peeMeDescription", class_type = "PEEMEDescription",
			schema = "/resourceCatalogManagement/v3/schema/peeCmonNrm#/definitions/PEEMEDescription",
			value = #{"environmentType" => "hut",
			"equipmentType" => "9G", "powerInterface" => "petrol", "sensorDescription" => "SensorPack-3",
			"siteDescription" => "Fullerton Falls", "siteIdentification" => SiteId, "siteLatitude" => "23.54294",
			"siteLongitude" => "90.60755", "vSRmsDescription" => "Sunken", "xcuDguDescription" => "DGUv1"}},
			#resource_char{name = "peeMeConfiguration", class_type = "PEEMEConfiguration",
			schema = "/resourceCatalogManagement/v3/schema/peeCmonNrm#/definitions/PEEMEConfiguration",
			value = #{"currentMaxThreshold" => "35", "currentMinThreshold" => "15", "humidityMaxThreshold" => "66",
			"humidityMinThreshold" => "6", "powerMaxThreshold" => "2500", "powerMinThreshold" => "500",
			"temperatureMaxThreshold" => "15", "temperatureMinThreshold" => "15", "voltageMaxThreshold" => "245",
			"voltageMinThreshold" => "202"}}]},
	{ok, #resource{}} = im:add_resource(PeeResource),
	Rule = fun(DN) ->
			SubList = string:tokens(DN, ","),
			Fid = fun(F, [H | T], Acc) ->
					case string:tokens(H, "=") of
						["ID", Id] ->
							[Id | Acc];
						_ ->
							F(F, T, Acc)
					end;
				(_F, [], Acc) ->
					Acc
			end,
			[SID] = Fid(Fid, SubList, []),
			PeeMeDN = "DC=sigscale.net,SubNetwork=1,ManagedElement=1,PEEMonitoredEntity.mEId=" ++ SID,
			[{#resource{name = '$1', _ = '_'}, [{'==', '$1', PeeMeDN}], ['$_']}]
	end,
	{ok, #pee_rule{id = Id}} = im:add_rule(Rule, "testing"),
	NodeBDN = "DC=sigscale.net,SubNetwork=1,ManagedElement=1,NodeBFunction=1,ID=" ++ SiteId,
	{ok, [#resource{class_type = "PEEMonitoredEntity", characteristic = Chars}]} = im:get_pee(Id, NodeBDN),
	F = fun(#resource_char{name = "peeMeDescription"}) ->
				true;
			(_) ->
				false
	end,
	[#resource_char{value = #{"siteIdentification" := SId}}] = lists:filter(F, Chars),
	SId == SiteId.

%%---------------------------------------------------------------------
%%  Internal functions
%%---------------------------------------------------------------------

generate_identity(Length) when Length > 0 ->
	Charset = charset(),
	NumChars = length(Charset),
	Random = crypto:strong_rand_bytes(Length),
	generate_identity(Random, Charset, NumChars,[]).
%% @hidden
generate_identity(<<N, Rest/binary>>, Charset, NumChars, Acc) ->
	CharNum = (N rem NumChars) + 1,
	NewAcc = [lists:nth(CharNum, Charset) | Acc],
	generate_identity(Rest, Charset, NumChars, NewAcc);
generate_identity(<<>>, _Charset, _NumChars, Acc) ->
	Acc.

%% @hidden
cell_allocation() ->
	cell_allocation(rand:uniform(12) + 6, []).
%% @hidden
cell_allocation(N, Acc) when N > 0 ->
	cell_allocation(N - 1, [rand:uniform(124) | Acc]);
cell_allocation(0, Acc) ->
	cell_allocation1(lists:reverse(lists:sort(Acc)), []).
%% @hidden
cell_allocation1([H], Acc) ->
	[integer_to_list(H) | Acc];
cell_allocation1([H | T], Acc) ->
	cell_allocation1(T, [" " ++ integer_to_list(H) | Acc]).

%% @hidden
charset() ->
	C1 = lists:seq($A, $D),
	C2 = lists:seq($f, $h),
	C3 = lists:seq($j, $k),
	C4 = lists:seq($m, $n),
	C5 = lists:seq($P, $T),
	C6 = lists:seq($w, $z),
	C7 = lists:seq($ , $ ),
	lists:append([C1, C2, C3, C4, C5, C6, C7]).

%% @hidden
fill_resource(0) ->
	ok;
fill_resource(N) ->
	Resource = #resource{name = "DC=sigscale.net,SubNetwork=1,ManagedElement=1,BssFunction=1,BtsSiteMgr=" ++
			integer_to_list(N), description = "GSM Base Transceiver Station (BTS)", category = "RAN",
			class_type = "BtsSiteMgr", base_type = "ResourceFunction",
			schema = "/resourceInventoryManagement/v3/schema/BtsSiteMgr",
			specification = #specification_ref{id = "149672829752946", name = "BtsSiteMgr", version = "1.0"}},
	{ok, #resource{}} = im:add_resource(Resource),
	fill_resource(N - 1).

%% @hidden
indent(N) ->
	Tabs = lists:duplicate(N, $\t),
	#xmlText{value = "\n" ++ Tabs, type = text}.

